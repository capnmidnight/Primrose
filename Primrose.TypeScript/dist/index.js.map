{
  "version": 3,
  "sources": ["../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/typeChecks.ts", "../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/arrays.ts", "../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/events/EventBase.ts", "../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/events/Task.ts", "../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/attrs.ts", "../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/css.ts", "../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/tags.ts", "../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/canvas.ts", "../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/flags.ts", "../src/controlTypes.ts", "../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/strings/stringReverse.ts", "../src/Cursor.ts", "../src/Delayer.ts", "../src/themes.ts", "../src/Grammars/Rule.ts", "../src/Grammars/Token.ts", "../src/Grammars/Grammar.ts", "../src/Grammars/Basic.ts", "../src/Grammars/HTML.ts", "../src/Grammars/JavaScript.ts", "../src/Grammars/PlainText.ts", "../src/Grammars/index.ts", "../src/keys.ts", "../src/os.ts", "../src/Point.ts", "../src/Size.ts", "../src/Rectangle.ts", "../src/Row.ts", "../src/primrose.ts"],
  "sourcesContent": ["function t(o: any, s: string, c: Function) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return t(obj, \"function\", Function);\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return t(obj, \"string\", String);\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return t(obj, \"number\", Number);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value.\r\n */\r\nexport function isGoodNumber(obj: any): obj is number {\r\n    return isNumber(obj)\r\n        && Number.isFinite(obj)\r\n        && !Number.isNaN(obj);\r\n}\r\n\r\nexport function isObject(obj: any): obj is object {\r\n    return isDefined(obj)\r\n        && t(obj, \"object\", Object);\r\n}\r\n\r\nexport function isPromise<T>(obj: any): obj is Promise<T> {\r\n    return obj instanceof Promise;\r\n}\r\n\r\nexport function isDate(obj: any): obj is Date {\r\n    return obj instanceof Date;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return obj instanceof Array;\r\n}\r\n\r\nexport function assertNever(x: never, msg?: string): never {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\n\r\nexport function isNullOrUndefined<T>(obj: T | null | undefined): obj is null | undefined {\r\n    return obj === null\r\n        || obj === undefined;\r\n}\r\n\r\nexport function isDefined<T>(obj: T | null | undefined): obj is T {\r\n    return !isNullOrUndefined(obj);\r\n}\r\n\r\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\r\n    return isFunction(obj);\r\n}\r\n\r\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\r\n    return !isEventListener(obj);\r\n}\r\n\r\nexport function isArrayBufferView(obj: any): obj is ArrayBufferView {\r\n    return obj instanceof Uint8Array\r\n        || obj instanceof Uint8ClampedArray\r\n        || obj instanceof Int8Array\r\n        || obj instanceof Uint16Array\r\n        || obj instanceof Int16Array\r\n        || obj instanceof Uint32Array\r\n        || obj instanceof Int32Array\r\n        || obj instanceof Float32Array\r\n        || obj instanceof Float64Array\r\n        || \"BigUint64Array\" in globalThis && obj instanceof globalThis[\"BigUint64Array\"]\r\n        || \"BigInt64Array\" in globalThis && obj instanceof globalThis[\"BigInt64Array\"];\r\n}\r\n\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}", "import { isBoolean, isDefined, isFunction, isNullOrUndefined } from \"../typeChecks\";\r\n\r\nfunction defaultKeySelector<T>(obj: T): any {\r\n    return obj;\r\n}\r\n\r\nexport function arrayBinarySearchFind<T, V>(arr: T[], key: V, keySelector: (obj: T) => V): T | undefined {\r\n    const idx = arrayBinarySearchByKey(arr, key, keySelector);\r\n    if (Number.isInteger(idx)) {\r\n        return arr[idx - 1];\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Performs a binary search on a list to find where the item should be inserted.\r\n *\r\n * If the item is found, the returned index will be an exact integer.\r\n *\r\n * If the item is not found, the returned insertion index will be 0.5 greater than\r\n * the index at which it should be inserted.\r\n */\r\nexport function arrayBinarySearchByKey<T, V>(arr: T[], itemKey: V, keySelector: (obj: T) => V): number {\r\n    let left = 0;\r\n    let right = arr.length;\r\n    let idx = Math.floor((left + right) / 2);\r\n    let found = false;\r\n    while (left < right && idx < arr.length) {\r\n        const compareTo = arr[idx];\r\n        const compareToKey = isNullOrUndefined(compareTo)\r\n            ? null\r\n            : keySelector(compareTo);\r\n        if (isDefined(compareToKey)\r\n            && itemKey < compareToKey) {\r\n            right = idx;\r\n        }\r\n        else {\r\n            if (itemKey === compareToKey) {\r\n                found = true;\r\n            }\r\n            left = idx + 1;\r\n        }\r\n\r\n        idx = Math.floor((left + right) / 2);\r\n    }\r\n\r\n    if (!found) {\r\n        idx += 0.5;\r\n    }\r\n\r\n    return idx;\r\n}\r\n\r\n/**\r\n * Performs a binary search on a list to find where the item should be inserted.\r\n *\r\n * If the item is found, the returned index will be an exact integer.\r\n *\r\n * If the item is not found, the returned insertion index will be 0.5 greater than\r\n * the index at which it should be inserted.\r\n */\r\nexport function arrayBinarySearch<T, V>(arr: T[], item: T, keySelector?: (obj: T) => V): number {\r\n    keySelector = keySelector || defaultKeySelector;\r\n    const itemKey = keySelector(item);\r\n    return arrayBinarySearchByKey(arr, itemKey, keySelector);\r\n}\r\n\r\nexport function arrayBinaryContains<T, V>(arr: T[], item: T, keySelector?: (obj: T) => V): boolean {\r\n    return Number.isInteger(arrayBinarySearch(arr, item, keySelector));\r\n}\r\n\r\nfunction removeAtIndex<T>(arr: T[], idx: number): boolean {\r\n    if (Number.isInteger(idx)) {\r\n        arrayRemoveAt(arr, idx - 1);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function arrayBinarySearchRemoveByKey<T, V>(arr: T[], itemKey: V, keySelector: (obj: T) => V): boolean {\r\n    const idx = arrayBinarySearchByKey(arr, itemKey, keySelector);\r\n    return removeAtIndex(arr, idx);\r\n}\r\n\r\nexport function arrayBinarySearchRemove<T, V>(arr: T[], item: T, keySelector?: (obj: T) => V): boolean {\r\n    const idx = arrayBinarySearch(arr, item, keySelector);\r\n    return removeAtIndex(arr, idx);\r\n}\r\n\r\n\r\n/**\r\n * Empties out an array, returning the items that were in the array.\r\n * \r\n * @param arr the array to empty\r\n */\r\nexport function arrayClear<T>(arr: T[]) {\r\n    return arr.splice(0);\r\n}\r\n\r\n/**\r\n * Checks to see if two arrays contain the same elements\r\n * @returns -1 if the arrays match, the index of the first mismatched item if they don't.\r\n * @param arr1\r\n * @param arr2\r\n */\r\n\r\nexport function arrayCompare<T>(arr1: ReadonlyArray<T>, arr2: ReadonlyArray<T>): number {\r\n    for (let i = 0; i < arr1.length; ++i) {\r\n        if (arr1[i] !== arr2[i]) {\r\n            return i;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\n\r\nexport function arrayGen<T>(count: number, thunk: (i: number) => T): T[] {\r\n    return Array.from(iterableGen(count, thunk));\r\n}\r\n\r\nexport function* iterableGen<T>(count: number, thunk: (i: number) => T) {\r\n    for (let i = 0; i < count; ++i) {\r\n        yield thunk(i);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Inserts an item at the given index into an array.\r\n * @param arr\r\n * @param item\r\n * @param idx\r\n */\r\n\r\nexport function arrayInsertAt<T>(arr: T[], item: T, idx: number) {\r\n    arr.splice(idx, 0, item);\r\n}\r\n\r\n/**\r\n * Returns a random item from an array of items.\r\n *\r\n * Provides an option to consider an additional item as part of the collection\r\n * for random selection.\r\n */\r\nexport function arrayRandom<T>(arr: T[], defaultValue?: T): T | undefined {\r\n    const offset = defaultValue != null ? 1 : 0,\r\n        idx = Math.floor(Math.random() * (arr.length + offset)) - offset;\r\n    if (idx < 0) {\r\n        return defaultValue;\r\n    }\r\n    else {\r\n        return arr[idx];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Removes a given item from an array, returning true if the item was removed.\r\n */\r\nexport function arrayRemove<T>(arr: T[], value: T) {\r\n    const idx = arr.indexOf(value);\r\n    if (idx > -1) {\r\n        arrayRemoveAt(arr, idx);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function arrayFilter<T>(arr: T[], predicate: (v: T) => boolean): T | null {\r\n    for (let i = arr.length - 1; i >= 0; --i) {\r\n        if (predicate(arr[i])) {\r\n            return arrayRemoveAt(arr, i);\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function arrayRemoveByKey<T, K>(arr: T[], key: K, getKey: (v: T) => K): T | null {\r\n    return arrayFilter(arr, (v) => getKey(v) === key);\r\n}\r\n\r\n/**\r\n * Removes an item at the given index from an array.\r\n */\r\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\r\n    return arr.splice(idx, 1)[0];\r\n}\r\n\r\n/**\r\n * Replaces all of the items in an array with the given items.\r\n *\r\n * This helps reduce GC pressure as you're not creating arrays\r\n * and then dropping them on the floor.\r\n * \r\n * @param arr the array to fill\r\n * @param items the items to put into the array\r\n */\r\nexport function arrayReplace<T>(arr: T[], ...items: T[]) {\r\n    arr.splice(0, arr.length, ...items);\r\n}\r\n\r\n\r\nfunction _arrayScan<T>(forward: boolean, arr: readonly T[], tests: ((val: T) => boolean)[]): T {\r\n    const start = forward ? 0 : arr.length - 1;\r\n    const end = forward ? arr.length : -1;\r\n    const inc = forward ? 1 : -1;\r\n    for (const test of tests) {\r\n        for (let i = start; i != end; i += inc) {\r\n            const item = arr[i];\r\n            if (test(item)) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Scans through a series of filters to find an item that matches\r\n * any of the filters. The first item of the first filter that matches\r\n * will be returned.\r\n */\r\nexport function arrayScan<T, S extends T>(arr: readonly T[], ...tests: ((val: T) => val is S)[]): S;\r\nexport function arrayScan<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T\r\nexport function arrayScan<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T {\r\n    return _arrayScan(true, arr, tests);\r\n}\r\n\r\n/**\r\n * Scans through a series of filters to find an item that matches\r\n * any of the filters. The last item of the first filter that matches\r\n * will be returned.\r\n */\r\nexport function arrayScanReverse<T, S extends T>(arr: readonly T[], ...tests: ((val: T) => val is S)[]): S;\r\nexport function arrayScanReverse<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T;\r\nexport function arrayScanReverse<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T {\r\n    return _arrayScan(false, arr, tests);\r\n}\r\n\r\nexport function arrayShuffleInplace<T>(arr: T[]): void {\r\n    for (let i = 0; i < arr.length - 1; ++i) {\r\n        const subLength = arr.length - i;\r\n        const subIndex = Math.floor(Math.random() * subLength);\r\n        const temp = arr[i];\r\n        const j = subIndex + i;\r\n        arr[i] = arr[j];\r\n        arr[j] = temp;\r\n    }\r\n}\r\n\r\nexport function arrayShuffle<T>(arr: readonly T[]): T[] {\r\n    const output = arr.slice();\r\n    arrayShuffleInplace(output);\r\n    return output;\r\n}\r\n\r\n/**\r\n * Performs an insert operation that maintains the sort\r\n * order of the array, returning the index at which the\r\n * item was inserted.\r\n */\r\nexport function arraySortedInsert<T>(arr: T[], item: T): number;\r\nexport function arraySortedInsert<T, V>(arr: T[], item: T, keySelector?: (obj: T) => V): number;\r\nexport function arraySortedInsert<T>(arr: T[], item: T, allowDuplicates?: boolean): number;\r\nexport function arraySortedInsert<T, V>(arr: T[], item: T, keySelector?: (obj: T) => V, allowDuplicates?: boolean): number;\r\nexport function arraySortedInsert<T, V>(arr: T[], item: T, keySelector?: ((obj: T) => V) | boolean, allowDuplicates?: boolean): number {\r\n    let ks: ((obj: T) => V) | undefined;\r\n\r\n    if (isFunction(keySelector)) {\r\n        ks = keySelector;\r\n    }\r\n    else if (isBoolean(keySelector)) {\r\n        allowDuplicates = keySelector;\r\n    }\r\n\r\n    if (isNullOrUndefined(allowDuplicates)) {\r\n        allowDuplicates = true;\r\n    }\r\n\r\n    return arraySortedInsertInternal<T, V>(arr, item, ks, allowDuplicates);\r\n}\r\n\r\nfunction arraySortedInsertInternal<T, V>(arr: T[], item: T, ks: ((obj: T) => V) | undefined, allowDuplicates: boolean) {\r\n    let idx = arrayBinarySearch(arr, item, ks);\r\n    const found = (idx % 1) === 0;\r\n    idx = idx | 0;\r\n    if (!found || allowDuplicates) {\r\n        arrayInsertAt(arr, item, idx);\r\n    }\r\n\r\n    return idx;\r\n}\r\n\r\n/**\r\n * Creates a new array that is sorted by the key extracted\r\n * by the keySelector callback, not modifying the input array,\r\n * (unlike JavaScript's own Array.prototype.sort).\r\n * @param arr\r\n * @param keySelector\r\n */\r\nexport function arraySortByKey<T, V>(arr: ReadonlyArray<T>, keySelector: (obj: T) => V): T[] {\r\n    const newArr = Array.from(arr);\r\n    arraySortByKeyInPlace<T, V>(newArr, keySelector);\r\n    return newArr;\r\n}\r\n\r\n/**\r\n * Sorts an existing array by the key extracted by the keySelector\r\n * callback, without creating a new array.\r\n * @param arr\r\n * @param keySelector\r\n */\r\nexport function arraySortByKeyInPlace<T, V>(newArr: T[], keySelector: (obj: T) => V) {\r\n    newArr.sort((a, b) => {\r\n        const keyA = keySelector(a);\r\n        const keyB = keySelector(b);\r\n        if (keyA < keyB) {\r\n            return -1;\r\n        }\r\n        else if (keyA > keyB) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    });\r\n}\r\n\r\nconst numericPattern = /^(\\d+)/;\r\n/**\r\n * Creates a new array that is sorted by the key extracted\r\n * by the keySelector callback, not modifying the input array,\r\n * (unlike JavaScript's own Array.prototype.sort).\r\n *\r\n * If the values have a number at the beginning, they'll be sorted\r\n * by that number.\r\n * @param arr\r\n * @param keySelector\r\n */\r\nexport function arraySortNumericByKey<T>(arr: ReadonlyArray<T>, keySelector: (obj: T) => string): T[] {\r\n    const newArr = Array.from(arr);\r\n    newArr.sort((a, b) => {\r\n        const keyA = keySelector(a);\r\n        const keyB = keySelector(b);\r\n        const matchA = keyA.match(numericPattern);\r\n        const matchB = keyB.match(numericPattern);\r\n        if (isDefined(matchA)\r\n            && isDefined(matchB)) {\r\n            const numberA = parseFloat(matchA[1]);\r\n            const numberB = parseFloat(matchB[1]);\r\n\r\n            if (numberA < numberB) {\r\n                return -1;\r\n            }\r\n            else if (numberA > numberB) {\r\n                return 1;\r\n            }\r\n        }\r\n\r\n        if (keyA < keyB) {\r\n            return -1;\r\n        }\r\n        else if (keyA > keyB) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    return newArr;\r\n}\r\n\r\nexport function arrayZip<T, V>(arr1: readonly T[], arr2: readonly T[], combine: (a: T, b: T) => V): V[] {\r\n    const len = Math.max(arr1.length, arr2.length);\r\n    const output = new Array<V>(len);\r\n    for (let i = 0; i < len; ++i) {\r\n        output[i] = combine(arr1[i], arr2[i]);\r\n    }\r\n\r\n    return output;\r\n}\r\n", "import { arrayClear, arrayRemoveAt } from \"../collections/arrays\";\r\nimport { isBoolean, isDefined, isFunction, isNullOrUndefined } from \"../typeChecks\";\r\n\r\ntype EventCallback = (evt: Event) => any;\r\n\r\nexport class EventBase implements EventTarget {\r\n    private readonly listeners = new Map<string, EventCallback[]>();\r\n    private readonly listenerOptions = new Map<EventCallback, boolean | AddEventListenerOptions>();\r\n\r\n    addEventListener(type: string, callback: (evt: Event) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (isFunction(callback)) {\r\n            let listeners = this.listeners.get(type);\r\n            if (!listeners) {\r\n                listeners = new Array<EventCallback>();\r\n                this.listeners.set(type, listeners);\r\n            }\r\n\r\n            if (!listeners.find((c) => c === callback)) {\r\n                listeners.push(callback);\r\n\r\n                if (options) {\r\n                    this.listenerOptions.set(callback, options);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (evt: Event) => any) {\r\n        if (isFunction(callback)) {\r\n            const listeners = this.listeners.get(type);\r\n            if (listeners) {\r\n                this.removeListener(listeners, callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearEventListeners(type?: string) {\r\n        for (const [evtName, handlers] of this.listeners) {\r\n            if (isNullOrUndefined(type) || type === evtName) {\r\n                for (const handler of handlers) {\r\n                    this.removeEventListener(type, handler);\r\n                }\r\n                arrayClear(handlers);\r\n                this.listeners.delete(evtName);\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeListener(listeners: EventCallback[], callback: EventCallback) {\r\n        const idx = listeners.findIndex((c) => c === callback);\r\n        if (idx >= 0) {\r\n            arrayRemoveAt(listeners, idx);\r\n            if (this.listenerOptions.has(callback)) {\r\n                this.listenerOptions.delete(callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(evt: Event): boolean {\r\n        const listeners = this.listeners.get(evt.type);\r\n        if (listeners) {\r\n            for (const callback of listeners) {\r\n                const options = this.listenerOptions.get(callback);\r\n                if (isDefined(options)\r\n                    && !isBoolean(options)\r\n                    && options.once) {\r\n                    this.removeListener(listeners, callback);\r\n                }\r\n\r\n                callback.call(this, evt);\r\n            }\r\n        }\r\n        return !evt.defaultPrevented;\r\n    }\r\n}\r\n\r\nexport class TypedEvent<T extends string> extends Event {\r\n\r\n    override get type(): T {\r\n        return super.type as T;\r\n    }\r\n\r\n    constructor(type: T, eventInitDict?: EventInit) {\r\n        super(type, eventInitDict);\r\n    }\r\n}\r\n\r\nexport class TypedEventBase<EventsT> extends EventBase {\r\n    private readonly bubblers = new Set<TypedEventBase<EventsT>>();\r\n    private readonly scopes = new WeakMap<object, Array<[any, any]>>();\r\n\r\n    addBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.add(bubbler);\r\n    }\r\n\r\n    removeBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.delete(bubbler);\r\n    }\r\n\r\n    override addEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        super.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    override removeEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any) {\r\n        super.removeEventListener(type, callback as any);\r\n    }\r\n\r\n    override clearEventListeners<K extends keyof EventsT & string>(type?: K): void {\r\n        return super.clearEventListeners(type);\r\n    }\r\n\r\n    addScopedEventListener<K extends keyof EventsT & string>(scope: object, type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (!this.scopes.has(scope)) {\r\n            this.scopes.set(scope, []);\r\n        }\r\n        this.scopes.get(scope).push([type, callback]);\r\n        this.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    removeScope<K extends keyof EventsT & string>(scope: object) {\r\n        const listeners = this.scopes.get(scope);\r\n        if (listeners) {\r\n            this.scopes.delete(scope);\r\n            for (const [type, listener] of listeners) {\r\n                this.removeEventListener(type as K, listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    override dispatchEvent<T extends Event>(evt: T): boolean {\r\n        if (!super.dispatchEvent(evt)) {\r\n            return false;\r\n        }\r\n\r\n        if (!evt.cancelBubble) {\r\n            for (const bubbler of this.bubblers) {\r\n                if (!bubbler.dispatchEvent(evt)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}", "import { arrayClear } from \"../collections/arrays\";\r\nimport { isDefined } from \"../typeChecks\";\r\nimport { TypedEventBase } from \"./EventBase\";\r\n\r\nexport type TaskExecutionState =\r\n    | \"waiting\"\r\n    | \"running\"\r\n    | \"finished\"\r\n\r\nexport type TaskResultState =\r\n    | \"none\"\r\n    | \"resolved\"\r\n    | \"errored\";\r\n\r\n/**\r\n * A Task represents a Promise that exposes its resolve/reject functions\r\n * as methods, rather than requiring a callback being passed to its constructor.\r\n * Tasks can be used to build manually-resolved Promises with less\r\n * boilerplate of nested function blocks.\r\n **/\r\nexport class Task<ResultsT = void> implements Promise<ResultsT> {\r\n    private readonly onThens = new Array<(v: ResultsT) => any>();\r\n    private readonly onCatches = new Array<(reason?: any) => void>();\r\n\r\n    private _result: ResultsT = undefined;\r\n    private _error: any = undefined;\r\n    private _executionState: TaskExecutionState = \"waiting\";\r\n    private _resultState: TaskResultState = \"none\";\r\n\r\n    /**\r\n     * Signal success for the Task\r\n     *\r\n     * @param value - the value to store with the resolved Task.\r\n     **/\r\n    public readonly resolve: (value: ResultsT) => void;\r\n\r\n    /**\r\n     * Signal failrue for the Task\r\n     *\r\n     * @param value - the error to store with the rejected Task.\r\n     **/\r\n    public readonly reject: (reason: any) => void;\r\n\r\n\r\n    /**\r\n     * Create a new Task\r\n     *\r\n     * @param autoStart - set to false to require manually starting the Task. Useful\r\n     * for reusable tasks that run on timers.\r\n     */\r\n    constructor(private readonly autoStart = true) {\r\n        // It's very likely that we will want to use resolve/reject\r\n        // as values to pass to another function/method, so we create\r\n        // them not as methods, but as bound lambda expressions stored\r\n        // in public fields.\r\n        this.resolve = (value) => {\r\n            if (this.running) {\r\n                this._result = value;\r\n                this._resultState = \"resolved\";\r\n\r\n                for (const thenner of this.onThens) {\r\n                    thenner(value);\r\n                }\r\n\r\n                this.clear();\r\n                this._executionState = \"finished\";\r\n            }\r\n        };\r\n\r\n        this.reject = (reason) => {\r\n            if (this.running) {\r\n                this._error = reason;\r\n                this._resultState = \"errored\";\r\n\r\n                for (const catcher of this.onCatches) {\r\n                    catcher(reason);\r\n                }\r\n\r\n                this.clear();\r\n                this._executionState = \"finished\";\r\n            }\r\n        };\r\n\r\n        if (this.autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    private clear() {\r\n        arrayClear(this.onThens);\r\n        arrayClear(this.onCatches);\r\n    }\r\n\r\n    /**\r\n     * If the task was not auto-started, signal that the task is now ready to recieve\r\n     * resolutions or rejections.\r\n     **/\r\n    start() {\r\n        this._executionState = \"running\";\r\n    }\r\n\r\n    /**\r\n     * Creates a resolving callback for a static value.\r\n     * @param value\r\n     */\r\n    resolver(value: ResultsT) {\r\n        return () => this.resolve(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a resolving callback for a type of an event.\r\n     **/\r\n    forEvent<EventT extends ResultsT & Event>() {\r\n        return (evt: EventT) => this.resolve(evt);\r\n    }\r\n\r\n    resolveOn<EventMapT, EventT extends keyof EventMapT = keyof EventMapT>(\r\n        target: TypedEventBase<EventMapT> | EventTarget,\r\n        resolveEvt: EventT,\r\n        value: ResultsT) {\r\n        const resolver = this.resolver(value);\r\n        target.addEventListener(resolveEvt as any, resolver);\r\n        this.finally(() =>\r\n            target.removeEventListener(resolveEvt as any, resolver));\r\n    }\r\n\r\n    /**\r\n     * Get the last result that the task had resolved to, if any is available.\r\n     *\r\n     * If the Task had been rejected, attempting to get the result will rethrow\r\n     * the error that had rejected the task.\r\n     **/\r\n    get result(): ResultsT {\r\n        if (isDefined(this.error)) {\r\n            throw this.error;\r\n        }\r\n\r\n        return this._result;\r\n    }\r\n\r\n    /**\r\n     * Get the last error that the task had been rejected by, if any.\r\n     **/\r\n    get error(): any {\r\n        return this._error;\r\n    }\r\n\r\n    /**\r\n     * Get the current state of the task.\r\n     **/\r\n    get executionState() {\r\n        return this._executionState;\r\n    }\r\n\r\n    /**\r\n     * Returns true when the Task is hasn't started yet.\r\n     **/\r\n    get waiting(): boolean {\r\n        return this.executionState === \"waiting\";\r\n    }\r\n\r\n    /**\r\n     * Returns true when the Task is waiting to be resolved or rejected.\r\n     **/\r\n    get started(): boolean {\r\n        return this.executionState !== \"waiting\";\r\n    }\r\n\r\n    /**\r\n     * Returns true after the Task has started, but before it has finished.\r\n     **/\r\n    get running(): boolean {\r\n        return this.executionState === \"running\";\r\n    }\r\n\r\n    /**\r\n     * Returns true when the Task has been resolved or rejected.\r\n     **/\r\n    get finished(): boolean {\r\n        return this.executionState === \"finished\";\r\n    }\r\n\r\n    get resultState() {\r\n        return this._resultState;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the Task had been resolved successfully.\r\n     **/\r\n    get resolved(): boolean {\r\n        return this.resultState === \"resolved\";\r\n    }\r\n\r\n    /**\r\n     * Returns true if the Task had been rejected, regardless of any\r\n     * reason being given.\r\n     **/\r\n    get errored(): boolean {\r\n        return this.resultState === \"errored\";\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.toString();\r\n    }\r\n\r\n    /**\r\n     * Calling Task.then(), Task.catch(), or Task.finally() creates a new Promise.\r\n     * This method creates that promise and links it with the task.\r\n     **/\r\n    private project(): Promise<ResultsT> {\r\n        return new Promise<ResultsT>((resolve, reject) => {\r\n            if (!this.finished) {\r\n                this.onThens.push(resolve);\r\n                this.onCatches.push(reject);\r\n            }\r\n            else if (this.errored) {\r\n                reject(this.error);\r\n            }\r\n            else {\r\n                resolve(this.result);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attach a handler to the task that fires when the task is resolved.\r\n     * \r\n     * @param onfulfilled\r\n     * @param onrejected\r\n     */\r\n    then<TResult1 = ResultsT, TResult2 = never>(onfulfilled?: (value: ResultsT) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.project().then(onfulfilled, onrejected);\r\n    }\r\n\r\n    /**\r\n     * Attach a handler that fires when the Task is rejected.\r\n     * \r\n     * @param onrejected\r\n     */\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<ResultsT | TResult> {\r\n        return this.project().catch(onrejected);\r\n    }\r\n\r\n    /**\r\n     * Attach a handler that fires regardless of whether the Task is resolved\r\n     * or rejected.\r\n     * \r\n     * @param onfinally\r\n     */\r\n    finally(onfinally?: () => void): Promise<ResultsT> {\r\n        return this.project().finally(onfinally);\r\n    }\r\n\r\n    /**\r\n     * Resets the Task to an unsignalled state, which is useful for\r\n     * reducing GC pressure when working with lots of tasks.\r\n     **/\r\n    reset() {\r\n        this._reset(this.autoStart);\r\n    }\r\n\r\n    restart() {\r\n        this._reset(true);\r\n    }\r\n\r\n    private _reset(start: boolean) {\r\n        if (this.running) {\r\n            this.reject(\"Resetting previous invocation\");\r\n        }\r\n\r\n        this.clear();\r\n        this._result = undefined;\r\n        this._error = undefined;\r\n        this._executionState = \"waiting\";\r\n        this._resultState = \"none\";\r\n\r\n        if (start) {\r\n            this.start();\r\n        }\r\n    }\r\n}", "import type { MediaType } from \"@juniper-lib/mediatypes\";\r\nimport { isString } from \"@juniper-lib/tslib/typeChecks\";\r\n\r\n/**\r\n * A setter functor for HTML attributes.\r\n **/\r\nexport class Attr {\r\n    readonly tags: readonly string[];\r\n    /**\r\n     * Creates a new setter functor for HTML Attributes\r\n     * @param key - the attribute name.\r\n     * @param value - the value to set for the attribute.\r\n     * @param tags - the HTML tags that support this attribute.\r\n     */\r\n    constructor(\r\n        public readonly key: string,\r\n        public readonly value: any,\r\n        private readonly bySetAttribute: boolean,\r\n        ...tags: string[]) {\r\n        this.tags = tags.map((t) => t.toLocaleUpperCase());\r\n        Object.freeze(this);\r\n    }\r\n\r\n    /**\r\n     * Set the attribute value on an HTMLElement\r\n     * @param elem - the element on which to set the attribute.\r\n     */\r\n    applyToElement(elem: HTMLElement) {\r\n        const isDataSet = this.key.startsWith(\"data-\");\r\n        const isValid = this.tags.length === 0\r\n            || this.tags.indexOf(elem.tagName) > -1\r\n            || isDataSet;\r\n\r\n        if (!isValid) {\r\n            console.warn(`Element ${elem.tagName} does not support Attribute ${this.key}`);\r\n        }\r\n        else if (isDataSet) {\r\n            const subkey = this.key.substring(5);\r\n            elem.dataset[subkey] = this.value;\r\n        }\r\n        else if (this.key === \"style\") {\r\n            Object.assign(elem.style, this.value);\r\n        }\r\n        else if (this.key === \"classList\") {\r\n            (this.value as string[])\r\n                .forEach((v) => elem.classList.add(v));\r\n        }\r\n        else if (this.bySetAttribute) {\r\n            elem.setAttribute(this.key, this.value);\r\n        }\r\n        else if (this.key in elem) {\r\n            (elem as any)[this.key] = this.value;\r\n        }\r\n        else if (this.value === false) {\r\n            elem.removeAttribute(this.key);\r\n        }\r\n        else if (this.value === true) {\r\n            elem.setAttribute(this.key, \"\");\r\n        }\r\n        else {\r\n            elem.setAttribute(this.key, this.value);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * a list of types the server accepts, typically a file type.\r\n * @param value - the value to set on the attribute.\r\n **/\r\nexport function accept(value: string) { return new Attr(\"accept\", value, false, \"form\", \"input\"); }\r\n\r\n/**\r\n * The accessKey attribute\r\n **/\r\nexport function accessKey(value: string) { return new Attr(\"accessKey\", value, false, \"input\", \"button\"); }\r\n\r\n/**\r\n * specifying the horizontal alignment of the element.\r\n **/\r\nexport function align(value: string) { return new Attr(\"align\", value, false, \"applet\", \"caption\", \"col\", \"colgroup\", \"hr\", \"iframe\", \"img\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"); }\r\n\r\n/**\r\n * Specifies a feature-policy for the iframe.\r\n **/\r\nexport function allow(value: string) { return new Attr(\"allow\", value, false, \"iframe\"); }\r\n\r\n/**\r\n * Whether or not to allow an IFrame to open full screen elements.\r\n */\r\nexport function allowFullscreen(value: boolean) { return new Attr(\"allowfullscreen\", value, false, \"iframe\"); }\r\n\r\n/**\r\n * Alternative text in case an image can't be displayed.\r\n **/\r\nexport function alt(value: string) { return new Attr(\"alt\", value, false, \"applet\", \"area\", \"img\", \"input\"); }\r\n\r\n/**\r\n * Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\r\n **/\r\nexport function ariaActiveDescendant(value: string) { return new Attr(\"ariaActiveDescendant\", value, false); }\r\n\r\n/**\r\n * Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\r\n **/\r\nexport function ariaAtomic(value: boolean) { return new Attr(\"ariaAtomic\", value, false); }\r\n\r\n/**\r\n * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be presented if they are made.\r\n **/\r\nexport function ariaAutoComplete(value: string) { return new Attr(\"ariaAutoComplete\", value, false); }\r\n\r\n/**\r\n * Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\r\n **/\r\nexport function ariaBusy(value: boolean) { return new Attr(\"ariaBusy\", value, false); }\r\n\r\n/**\r\n * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected.\r\n **/\r\nexport function ariaChecked(value: boolean) { return new Attr(\"ariaChecked\", value, false); }\r\n\r\n/**\r\n * Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex.\r\n  **/\r\nexport function ariaColCount(value: number) { return new Attr(\"ariaColCount\", value, false); }\r\n\r\n/**\r\n * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colcount and aria-colspan.\r\n  **/\r\nexport function ariaColIndex(value: number) { return new Attr(\"ariaColIndex\", value, false); }\r\n\r\n/**\r\n * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan.\r\n  **/\r\nexport function ariaColSpan(value: number) { return new Attr(\"ariaColSpan\", value, false); }\r\n\r\n/**\r\n * Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns.\r\n  **/\r\nexport function ariaControls(value: string) { return new Attr(\"ariaControls\", value, false); }\r\n\r\n/**\r\n * Indicates the element that represents the current item within a container or set of related elements.\r\n  **/\r\nexport function ariaCurrent(value: string) { return new Attr(\"ariaCurrent\", value, false); }\r\n\r\n/**\r\n * Identifies the element (or elements) that describes the object. See related aria-labelledby.\r\n  **/\r\nexport function ariaDescribedBy(value: string) { return new Attr(\"ariaDescribedBy\", value, false); }\r\n\r\n/**\r\n * Identifies the element that provides a detailed, extended description for the object. See related aria-describedby.\r\n  **/\r\nexport function ariaDetails(value: string) { return new Attr(\"ariaDetails\", value, false); }\r\n\r\n/**\r\n * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly.\r\n  **/\r\nexport function ariaDisabled(value: boolean) { return new Attr(\"ariaDisabled\", value, false); }\r\n\r\n/**\r\n * Identifies the element that provides an error message for the object. See related aria-invalid and aria-describedby.\r\n  **/\r\nexport function ariaErrorMessage(value: string) { return new Attr(\"ariaErrorMessage\", value, false); }\r\n\r\n/**\r\n * Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\r\n **/\r\nexport function ariaExpanded(value: boolean) { return new Attr(\"ariaExpanded\", value, false); }\r\n\r\n/**\r\n * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order.\r\n  **/\r\nexport function ariaFlowTo(value: string) { return new Attr(\"ariaFlowTo\", value, false); }\r\n\r\n/**\r\n * Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\r\n  **/\r\nexport function ariaHasPopup(value: string) { return new Attr(\"ariaHasPopup\", value, false); }\r\n\r\n/**\r\n * Indicates whether the element is exposed to an accessibility API. See related aria-disabled.\r\n **/\r\nexport function ariaHidden(value: boolean) { return new Attr(\"ariaHidden\", value, false); }\r\n\r\n/**\r\n * Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage.\r\n  **/\r\nexport function ariaInvalid(value: string) { return new Attr(\"ariaInvalid\", value, false); }\r\n\r\n/**\r\n * Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\r\n  **/\r\nexport function ariaKeyShortcuts(value: string) { return new Attr(\"ariaKeyShortcuts\", value, false); }\r\n\r\n/**\r\n * Defines a string value that labels the current element. See related aria-labelledby.\r\n  **/\r\nexport function ariaLabel(value: string) { return new Attr(\"ariaLabel\", value, false); }\r\n\r\n/**\r\n * Identifies the element (or elements) that labels the current element. See related aria-describedby.\r\n  **/\r\nexport function ariaLabelledBy(value: string) { return new Attr(\"ariaLabelledBy\", value, false); }\r\n\r\n/**\r\n * Defines the hierarchical level of an element within a structure.\r\n  **/\r\nexport function ariaLevel(value: number) { return new Attr(\"ariaLevel\", value, false); }\r\n\r\n/**\r\n * Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\r\n  **/\r\nexport function ariaLive(value: string) { return new Attr(\"ariaLive\", value, false); }\r\n\r\n/**\r\n * Indicates whether an element is modal when displayed\r\n  **/\r\nexport function ariaModal(value: boolean) { return new Attr(\"ariaModal\", value, false); }\r\n\r\n/**\r\n * Indicates whether a text box accepts multiple lines of input or only a single line.\r\n  **/\r\nexport function ariaMultiline(value: boolean) { return new Attr(\"ariaMultiline\", value, false); }\r\n\r\n/**\r\n * Indicates that the user may select more than one item from the current selectable descendants.\r\n  **/\r\nexport function ariaMultiSelectable(value: boolean) { return new Attr(\"ariaMultiSelectable\", value, false); }\r\n\r\n/**\r\n * Indicates that the user may select more than one item from the current selectable descendants.\r\n  **/\r\nexport function ariaOrientation(value: string) { return new Attr(\"ariaOrientation\", value, false); }\r\n\r\n/**\r\n * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls.\r\n  **/\r\nexport function ariaOwns(value: string) { return new Attr(\"ariaOwns\", value, false); }\r\n\r\n/**\r\n * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.\r\n  **/\r\nexport function ariaPlaceholder(value: string) { return new Attr(\"ariaPlaceholder\", value, false); }\r\n\r\n/**\r\n * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize.\r\n  **/\r\nexport function ariaPosInSet(value: number) { return new Attr(\"ariaPosInSet\", value, false); }\r\n\r\n/**\r\n * Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected.\r\n **/\r\nexport function ariaPressed(value: boolean) { return new Attr(\"ariaPressed\", value, false); }\r\n\r\n/**\r\n * Indicates that the element is not editable, but is otherwise operable. See related aria-disabled.\r\n  **/\r\nexport function ariaReadOnly(value: boolean) { return new Attr(\"ariaReadOnly\", value, false); }\r\n\r\n/**\r\n * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic.\r\n  **/\r\nexport function ariaRelevant(value: string) { return new Attr(\"ariaRelevant\", value, false); }\r\n\r\n/**\r\n * Indicates that user input is required on the element before a form may be submitted.\r\n  **/\r\nexport function ariaRequired(value: boolean) { return new Attr(\"ariaRequired\", value, false); }\r\n\r\n/**\r\n * Defines a human-readable, author-localized description for the role of an element.\r\n  **/\r\nexport function ariaRoleDescription(value: string) { return new Attr(\"ariaRoleDescription\", value, false); }\r\n\r\n/**\r\n * Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex.\r\n  **/\r\nexport function ariaRowCount(value: number) { return new Attr(\"ariaRowCount\", value, false); }\r\n\r\n/**\r\n * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowcount and aria-rowspan.\r\n  **/\r\nexport function ariaRowIndex(value: number) { return new Attr(\"ariaRowIndex\", value, false); }\r\n\r\n/**\r\n Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan.\r\n  **/\r\nexport function ariaRowSpan(value: number) { return new Attr(\"ariaRowSpan\", value, false); }\r\n\r\n/**\r\n * Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed.\r\n **/\r\nexport function ariaSelected(value: boolean) { return new Attr(\"ariaSelected\", value, false); }\r\n\r\n/**\r\n * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset.\r\n  **/\r\nexport function ariaSetSize(value: number) { return new Attr(\"ariaSetsize\", value, false); }\r\n\r\n/**\r\n * Indicates if items in a table or grid are sorted in ascending or descending order.\r\n  **/\r\nexport function ariaSort(value: string) { return new Attr(\"ariaSort\", value, false); }\r\n\r\n/**\r\n * Defines the maximum allowed value for a range widget.\r\n  **/\r\nexport function ariaValueMax(value: number) { return new Attr(\"ariaValueMax\", value, false); }\r\n\r\n/**\r\n * Defines the minimum allowed value for a range widget.\r\n  **/\r\nexport function ariaValueMin(value: number) { return new Attr(\"ariaValueMin\", value, false); }\r\n\r\n/**\r\n * Defines the current value for a range widget. See related aria-valuetext.\r\n  **/\r\nexport function ariaValueNow(value: number) { return new Attr(\"ariaValueNow\", value, false); }\r\n\r\n/**\r\n * Defines the human readable text alternative of aria-valuenow for a range widget.\r\n  **/\r\nexport function ariaValueText(value: string) { return new Attr(\"ariaValueText\", value, false); }\r\n\r\n/**\r\n * Executes the script asynchronously.\r\n  **/\r\nexport function async(value: string) { return new Attr(\"async\", value, false, \"script\"); }\r\n\r\n/**\r\n * Sets whether input is automatically capitalized when entered by user\r\n  **/\r\nexport function autoCapitalize(value: boolean) { return new Attr(\"autocapitalize\", value, false); }\r\n\r\n/**\r\n * Indicates whether controls in this form can by default have their values automatically completed by the browser.\r\n  **/\r\nexport function autoComplete(value: boolean) { return new Attr(\"autocomplete\", value ? \"on\" : \"off\", false, \"form\", \"input\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * The element should be automatically focused after the page loaded.\r\n  **/\r\nexport function autoFocus(value: boolean) { return new Attr(\"autofocus\", value, false, \"button\", \"input\", \"keygen\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * The audio or video should play as soon as possible.\r\n  **/\r\nexport function autoPlay(value: boolean) { return new Attr(\"autoplay\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * Contains the time range of already buffered media.\r\n  **/\r\nexport function buffered(value: boolean) { return new Attr(\"buffered\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * From the HTML Media Capture\r\n  **/\r\nexport function capture(value: boolean) { return new Attr(\"capture\", value, false, \"input\"); }\r\n\r\n/**\r\n * Declares the character encoding of the page or script.\r\n  **/\r\nexport function charSet(value: string) { return new Attr(\"charset\", value, false, \"meta\", \"script\"); }\r\n\r\n/**\r\n * Indicates whether the element should be checked on page load.\r\n  **/\r\nexport function checked(value: boolean) { return new Attr(\"checked\", value, false, \"command\", \"input\"); }\r\n\r\n/**\r\n * Contains a URI which points to the source of the quote or change.\r\n  **/\r\nexport function cite(value: string) { return new Attr(\"cite\", value, false, \"blockquote\", \"del\", \"ins\", \"q\"); }\r\n\r\n/**\r\n * Often used with CSS to style elements with common properties.\r\n  **/\r\nexport function className(value: string) { return new Attr(\"className\", value, false); }\r\n\r\n/**\r\n * Often used with CSS to style elements with common properties.\r\n  **/\r\nexport function classList(...values: string[]) { return new Attr(\"classList\", values, false); }\r\n\r\n/**\r\n * Specifies the URL of the applet's class file to be loaded and executed.\r\n  **/\r\nexport function code(value: string) { return new Attr(\"code\", value, false, \"applet\"); }\r\n\r\n/**\r\n * This attribute gives the absolute or relative URL of the directory where applets' .class files referenced by the code attribute are stored.\r\n  **/\r\nexport function codeBase(value: string) { return new Attr(\"codebase\", value, false, \"applet\"); }\r\n\r\n/**\r\n * Defines the number of columns in a textarea.\r\n  **/\r\nexport function cols(value: number) { return new Attr(\"cols\", value, false, \"textarea\"); }\r\n\r\n/**\r\n * The colspan attribute defines the number of columns a cell should span.\r\n  **/\r\nexport function colSpan(value: number) { return new Attr(\"colspan\", value, false, \"td\", \"th\"); }\r\n\r\n/**\r\n * A value associated with http-equiv or name depending on the context.\r\n  **/\r\nexport function content(value: string) { return new Attr(\"content\", value, false, \"meta\"); }\r\n\r\n/**\r\n * Indicates whether the element's content is editable.\r\n  **/\r\nexport function contentEditable(value: string) { return new Attr(\"contenteditable\", value, false); }\r\n\r\n/**\r\n * Defines the ID of a <menu> element which will serve as the element's context menu.\r\n  **/\r\nexport function contextMenu(value: string) { return new Attr(\"contextmenu\", value, false); }\r\n\r\n/**\r\n * Indicates whether the browser should show playback controls to the user.\r\n  **/\r\nexport function controls(value: boolean) { return new Attr(\"controls\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * A set of values specifying the coordinates of the hot-spot region.\r\n  **/\r\nexport function coords(value: string) { return new Attr(\"coords\", value, false, \"area\"); }\r\n\r\n/**\r\n * How the element handles cross-origin requests\r\n  **/\r\nexport function crossOrigin(value: string) { return new Attr(\"crossorigin\", value, false, \"audio\", \"img\", \"link\", \"script\", \"video\"); }\r\n\r\n/**\r\n * Specifies the Content Security Policy that an embedded document must agree to enforce upon itself.\r\n  **/\r\nexport function csp(value: string) { return new Attr(\"csp\", value, false, \"iframe\"); }\r\n\r\n/**\r\n * Specifies the URL of the resource.\r\n  **/\r\nexport function data(value: string) { return new Attr(\"data\", value, false, \"object\"); }\r\n\r\n/**\r\n * Lets you attach custom attributes to an HTML element.\r\n */\r\nexport function customData(name: string, value: any) { return new Attr(\"data-\" + name.toLowerCase(), value, false); }\r\n\r\n/**\r\n * Indicates the date and time associated with the element.\r\n  **/\r\nexport function dateTime(value: Date) { return new Attr(\"datetime\", value, false, \"del\", \"ins\", \"time\"); }\r\n\r\n/**\r\n * Indicates the preferred method to decode the image.\r\n  **/\r\nexport function decoding(value: string) { return new Attr(\"decoding\", value, false, \"img\"); }\r\n\r\n/**\r\n * Indicates that the track should be enabled unless the user's preferences indicate something different.\r\n  **/\r\nexport function htmlDefault(value: boolean | string) { return new Attr(\"default\", value, false, \"track\"); }\r\n\r\n/**\r\n * Indicates that the script should be executed after the page has been parsed.\r\n  **/\r\nexport function defer(value: boolean) { return new Attr(\"defer\", value, false, \"script\"); }\r\n\r\n/**\r\n * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\r\n  **/\r\nexport function dir(value: string) { return new Attr(\"dir\", value, false); }\r\n\r\n/**\r\n * Indicates whether the user can interact with the element.\r\n  **/\r\nexport function disabled(value: boolean) { return new Attr(\"disabled\", value, false, \"button\", \"command\", \"fieldset\", \"input\", \"keygen\", \"optgroup\", \"option\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * ??? \r\n  **/\r\nexport function dirName(value: string) { return new Attr(\"dirname\", value, false, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * Indicates that the hyperlink is to be used for downloading a resource.\r\n  **/\r\nexport function download(value: boolean) { return new Attr(\"download\", value, false, \"a\", \"area\"); }\r\n\r\n/**\r\n * Defines whether the element can be dragged.\r\n  **/\r\nexport function draggable(value: boolean) { return new Attr(\"draggable\", value, false); }\r\n\r\n/**\r\n * Indicates that the element accepts the dropping of content onto it.\r\n  **/\r\nexport function dropZone(value: string) { return new Attr(\"dropzone\", value, false); }\r\n\r\n/**\r\n * Defines the content type of the form data when the method is POST.\r\n  **/\r\nexport function encType(value: string) { return new Attr(\"enctype\", value, false, \"form\"); }\r\n\r\n/**\r\n * The enterkeyhint specifies what action label (or icon) to present for the enter key on virtual keyboards. The attribute can be used with form controls (such as the value of textarea elements), or in elements in an editing host (e.g., using contenteditable attribute).\r\n  **/\r\nexport function enterKeyHint(value: string) { return new Attr(\"enterkeyhint\", value, false, \"textarea\"); }\r\n\r\n/**\r\n * Describes elements which belongs to this one.\r\n  **/\r\nexport function htmlFor(value: string) { return new Attr(\"htmlFor\", value, false, \"label\", \"output\"); }\r\n\r\n/**\r\n * Indicates the form that is the owner of the element.\r\n  **/\r\nexport function form(value: string) { return new Attr(\"form\", value, false, \"button\", \"fieldset\", \"input\", \"keygen\", \"label\", \"meter\", \"object\", \"output\", \"progress\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * Indicates the action of the element, overriding the action defined in the <form>.\r\n  **/\r\nexport function formAction(value: string) { return new Attr(\"formaction\", value, false, \"input\", \"button\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this attribute sets the encoding type to use during form submission. If this attribute is specified, it overrides the enctype attribute of the button's form owner.\r\n  **/\r\nexport function formEncType(value: string) { return new Attr(\"formenctype\", value, false, \"button\", \"input\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this attribute sets the submission method to use during form submission (GET, POST, etc.). If this attribute is specified, it overrides the method attribute of the button's form owner.\r\n  **/\r\nexport function formMethod(value: string) { return new Attr(\"formmethod\", value, false, \"button\", \"input\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the novalidate attribute of the button's form owner.\r\n  **/\r\nexport function formNoValidate(value: boolean) { return new Attr(\"formnovalidate\", value, false, \"button\", \"input\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this attribute specifies the browsing context (for example, tab, window, or inline frame) in which to display the response that is received after submitting the form. If this attribute is specified, it overrides the target attribute of the button's form owner.\r\n  **/\r\nexport function formTarget(value: string) { return new Attr(\"formtarget\", value, false, \"button\", \"input\"); }\r\n\r\n/**\r\n * Width of the border to put around an IFrame.\r\n */\r\nexport function frameBorder(value: string | number) { return new Attr(\"frameborder\", value, false, \"iframe\"); }\r\n\r\n/**\r\n * IDs of the <th> elements which applies to this element.\r\n  **/\r\nexport function headers(value: string) { return new Attr(\"headers\", value, false, \"td\", \"th\"); }\r\n\r\n/**\r\n * Specifies the height of elements listed here. For all other elements, use the CSS height property.\r\n  **/\r\nexport function htmlHeight(value: number | string) { return new Attr(\"height\", value, false, \"canvas\", \"embed\", \"iframe\", \"img\", \"input\", \"object\", \"video\"); }\r\n\r\n/**\r\n * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\r\n  **/\r\nexport function hidden(value: boolean) { return new Attr(\"hidden\", value, false); }\r\n\r\n/**\r\n * Indicates the lower bound of the upper range.\r\n  **/\r\nexport function high(value: number) { return new Attr(\"high\", value, false, \"meter\"); }\r\n\r\n/**\r\n * The URL of a linked resource.\r\n  **/\r\nexport function href(value: string | URL) { return new Attr(\"href\", unpackURL(value), false, \"a\", \"area\", \"base\", \"link\"); }\r\n\r\n/**\r\n * Specifies the language of the linked resource.\r\n  **/\r\nexport function hrefLang(value: string) { return new Attr(\"hreflang\", value, false, \"a\", \"area\", \"link\"); }\r\n\r\n/**\r\n * Defines a pragma directive.\r\n  **/\r\nexport function httpEquiv(value: string) { return new Attr(\"httpEquiv\", value, false, \"meta\"); }\r\n\r\n/**\r\n * Specifies a picture which represents the command.\r\n  **/\r\nexport function icon(value: string) { return new Attr(\"icon\", value, false, \"command\"); }\r\n\r\n/**\r\n * Often used with CSS to style a specific element. The value of this attribute must be unique.\r\n  **/\r\nexport function id(value: string) { return new Attr(\"id\", value, false); }\r\n\r\n/**\r\n * Indicates the relative fetch priority for the resource.\r\n  **/\r\nexport function importance(value: string) { return new Attr(\"importance\", value, false, \"iframe\", \"img\", \"link\", \"script\"); }\r\n\r\n/**\r\n * Provides a hint as to the type of data that might be entered by the user while editing the element or its contents. The attribute can be used with form controls (such as the value of textarea elements), or in elements in an editing host (e.g., using contenteditable attribute).\r\n  **/\r\nexport function inputMode(value: string) { return new Attr(\"inputmode\", value, false, \"textarea\"); }\r\n\r\n/**\r\n * Specifies a Subresource Integrity value that allows browsers to verify what they fetch.\r\n  **/\r\nexport function integrity(value: string) { return new Attr(\"integrity\", value, false, \"link\", \"script\"); }\r\n\r\n/**\r\n * This attribute tells the browser to ignore the actual intrinsic size of the image and pretend it\u2019s the size specified in the attribute.\r\n  **/\r\nexport function intrinsicSize(value: string) { return new Attr(\"intrinsicsize\", value, false, \"img\"); }\r\n\r\n/**\r\n * Indicates that the image is part of a server-side image map.\r\n  **/\r\nexport function isMap(value: boolean) { return new Attr(\"ismap\", value, false, \"img\"); }\r\n\r\n/**\r\n * Specifies the type of key generated.\r\n  **/\r\nexport function keyType(value: string) { return new Attr(\"keytype\", value, false, \"keygen\"); }\r\n\r\n/**\r\n * The itemprop attribute\r\n  **/\r\nexport function itemProp(value: string) { return new Attr(\"itemprop\", value, false); }\r\n\r\n/**\r\n * Specifies the kind of text track.\r\n  **/\r\nexport function kind(value: string) { return new Attr(\"kind\", value, false, \"track\"); }\r\n\r\n/**\r\n * Specifies a user-readable title of the element.\r\n  **/\r\nexport function label(value: string) { return new Attr(\"label\", value, false, \"optgroup\", \"option\", \"track\"); }\r\n\r\n/**\r\n * Defines the language used in the element.\r\n  **/\r\nexport function lang(value: string) { return new Attr(\"lang\", value, false); }\r\n\r\n/**\r\n * Defines the script language used in the element.\r\n  **/\r\nexport function language(value: string) { return new Attr(\"language\", value, false, \"script\"); }\r\n\r\n/**\r\n * Identifies a list of pre-defined options to suggest to the user.\r\n  **/\r\nexport function list(value: string) { return new Attr(\"list\", value, true, \"input\"); }\r\n\r\n/**\r\n * Indicates whether the media should start playing from the start when it's finished.\r\n  **/\r\nexport function loop(value: boolean) { return new Attr(\"loop\", value, false, \"audio\", \"bgsound\", \"marquee\", \"video\"); }\r\n\r\n/**\r\n * Indicates the upper bound of the lower range.\r\n  **/\r\nexport function low(value: number) { return new Attr(\"low\", value, false, \"meter\"); }\r\n\r\n/**\r\n * Indicates the maximum value allowed.\r\n  **/\r\nexport function max(value: number) { return new Attr(\"max\", value, false, \"input\", \"meter\", \"progress\"); }\r\n\r\n/**\r\n * Defines the maximum number of characters allowed in the element.\r\n  **/\r\nexport function maxLength(value: number) { return new Attr(\"maxlength\", value, false, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * Defines the minimum number of characters allowed in the element.\r\n  **/\r\nexport function minLength(value: number) { return new Attr(\"minlength\", value, false, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * Specifies a hint of the media for which the linked resource was designed.\r\n  **/\r\nexport function media(value: string) { return new Attr(\"media\", value, false, \"a\", \"area\", \"link\", \"source\", \"style\"); }\r\n\r\n/**\r\n * Defines which HTTP method to use when submitting the form. Can be GET (default) or POST.\r\n  **/\r\nexport function method(value: string) { return new Attr(\"method\", value, false, \"form\"); }\r\n\r\n/**\r\n * Indicates the minimum value allowed.\r\n  **/\r\nexport function min(value: number) { return new Attr(\"min\", value, false, \"input\", \"meter\"); }\r\n\r\n/**\r\n * Indicates whether multiple values can be entered in an input of the type email or file.\r\n  **/\r\nexport function multiple(value: boolean) { return new Attr(\"multiple\", value, false, \"input\", \"select\"); }\r\n\r\n/**\r\n * Indicates whether the audio will be initially silenced on page load.\r\n  **/\r\nexport function muted(value: boolean) { return new Attr(\"muted\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * Name of the element. For example used by the server to identify the fields in form submits.\r\n  **/\r\nexport function name(value: string) { return new Attr(\"name\", value, false, \"button\", \"form\", \"fieldset\", \"iframe\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\", \"map\", \"meta\", \"param\"); }\r\n\r\n/**\r\n * This attribute indicates that the form shouldn't be validated when submitted.\r\n  **/\r\nexport function noValidate(value: boolean) { return new Attr(\"novalidate\", value, false, \"form\"); }\r\n\r\n/**\r\n * Indicates whether the details will be shown on page load.\r\n  **/\r\nexport function open(value: boolean) { return new Attr(\"open\", value, false, \"details\"); }\r\n\r\n/**\r\n * Indicates the optimal numeric value.\r\n  **/\r\nexport function optimum(value: number) { return new Attr(\"optimum\", value, false, \"meter\"); }\r\n\r\n/**\r\n * Defines a regular expression which the element's value will be validated against.\r\n  **/\r\nexport function pattern(value: string) { return new Attr(\"pattern\", value, false, \"input\"); }\r\n\r\n/**\r\n * The ping attribute specifies a space-separated list of URLs to be notified if a user follows the hyperlink.\r\n  **/\r\nexport function ping(value: string) { return new Attr(\"ping\", value, false, \"a\", \"area\"); }\r\n\r\n/**\r\n * Provides a hint to the user of what can be entered in the field.\r\n  **/\r\nexport function placeHolder(value: string) { return new Attr(\"placeholder\", value, false, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * Indicates that the media element should play automatically on iOS.\r\n  **/\r\nexport function playsInline(value: boolean) { return new Attr(\"playsInline\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * A URL indicating a poster frame to show until the user plays or seeks.\r\n  **/\r\nexport function poster(value: string) { return new Attr(\"poster\", value, false, \"video\"); }\r\n\r\n/**\r\n * Indicates whether the whole resource, parts of it or nothing should be preloaded.\r\n  **/\r\nexport function preload(value: boolean | string) { return new Attr(\"preload\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * Indicates whether the element can be edited.\r\n  **/\r\nexport function readOnly(value: boolean) { return new Attr(\"readonly\", value, false, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * The radiogroup attribute\r\n  **/\r\nexport function radioGroup(value: string) { return new Attr(\"radiogroup\", value, false, \"command\"); }\r\n\r\n/**\r\n * Specifies which referrer is sent when fetching the resource.\r\n  **/\r\nexport function referrerPolicy(value: string) { return new Attr(\"referrerpolicy\", value, false, \"a\", \"area\", \"iframe\", \"img\", \"link\", \"script\"); }\r\n\r\n/**\r\n * Specifies the relationship of the target object to the link object.\r\n  **/\r\nexport function rel(value: string) { return new Attr(\"rel\", value, false, \"a\", \"area\", \"link\"); }\r\n\r\n/**\r\n * Indicates whether this element is required to fill out or not.\r\n  **/\r\nexport function required(value: boolean) { return new Attr(\"required\", value, false, \"input\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * Indicates whether the list should be displayed in a descending order instead of a ascending.\r\n  **/\r\nexport function reversed(value: boolean) { return new Attr(\"reversed\", value, false, \"ol\"); }\r\n\r\n/**\r\n * Defines the number of rows in a text area.\r\n  **/\r\nexport function role(value: string) { return new Attr(\"role\", value, false); }\r\n\r\n/**\r\n * The rows attribute\r\n  **/\r\nexport function rows(value: number) { return new Attr(\"rows\", value, false, \"textarea\"); }\r\n\r\n/**\r\n * Defines the number of rows a table cell should span over.\r\n  **/\r\nexport function rowSpan(value: number) { return new Attr(\"rowspan\", value, false, \"td\", \"th\"); }\r\n\r\n/**\r\n * Stops a document loaded in an iframe from using certain features (such as submitting forms or opening new windows).\r\n  **/\r\nexport function sandbox(value: string) { return new Attr(\"sandbox\", value, false, \"iframe\"); }\r\n\r\n/**\r\n * Defines the cells that the header test (defined in the th element) relates to.\r\n  **/\r\nexport function scope(value: string) { return new Attr(\"scope\", value, false, \"th\"); }\r\n\r\n/**\r\n * The scoped attribute\r\n  **/\r\nexport function scoped(value: boolean) { return new Attr(\"scoped\", value, false, \"style\"); }\r\n\r\n/**\r\n * Defines a value which will be selected on page load.\r\n  **/\r\nexport function selected(value: boolean) { return new Attr(\"selected\", value, false, \"option\"); }\r\n\r\n/**\r\n * The shape attribute\r\n  **/\r\nexport function shape(value: string) { return new Attr(\"shape\", value, false, \"a\", \"area\"); }\r\n\r\n/**\r\n * Defines the width of the element (in pixels). If the element's type attribute is text or password then it's the number of characters.\r\n  **/\r\nexport function size(value: number) { return new Attr(\"size\", value, false, \"input\", \"select\"); }\r\n\r\n/**\r\n * Assigns a slot in a shadow DOM shadow tree to an element.\r\n  **/\r\nexport function slot(value: string) { return new Attr(\"slot\", value, false); }\r\n\r\n/**\r\n * The sizes attribute\r\n  **/\r\nexport function sizes(value: string) { return new Attr(\"sizes\", value, false, \"link\", \"img\", \"source\"); }\r\n\r\n/**\r\n * The span attribute\r\n  **/\r\nexport function span(value: string) { return new Attr(\"span\", value, false, \"col\", \"colgroup\"); }\r\n\r\n/**\r\n * Indicates whether spell checking is allowed for the element.\r\n  **/\r\nexport function spellCheck(value: boolean) { return new Attr(\"spellcheck\", value, false); }\r\n\r\nfunction unpackURL(value: string | URL) {\r\n    if (value instanceof URL) {\r\n        value = value.href;\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n/**\r\n * The URL of the embeddable content.\r\n  **/\r\nexport function src(value: string | URL) {\r\n    return new Attr(\"src\", unpackURL(value), false, \"audio\", \"embed\", \"iframe\", \"img\", \"input\", \"script\", \"source\", \"track\", \"video\");\r\n}\r\n\r\n/**\r\n * The srcdoc attribute\r\n  **/\r\nexport function srcDoc(value: string) { return new Attr(\"srcdoc\", value, false, \"iframe\"); }\r\n\r\n/**\r\n * The srclang attribute\r\n  **/\r\nexport function srcLang(value: string) { return new Attr(\"srclang\", value, false, \"track\"); }\r\n\r\n/**\r\n * A MediaStream object to use as a source for an HTML video or audio element\r\n  **/\r\nexport function srcObject(value: MediaProvider) { return new Attr(\"srcObject\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * One or more responsive image candidates.\r\n  **/\r\nexport function srcSet(value: string) { return new Attr(\"srcset\", value, false, \"img\", \"source\"); }\r\n\r\n/**\r\n * Defines the first number if other than 1.\r\n  **/\r\nexport function start(value: number) { return new Attr(\"start\", value, false, \"ol\"); }\r\n\r\n/**\r\n * The step attribute\r\n  **/\r\nexport function step(value: number) { return new Attr(\"step\", value, false, \"input\"); }\r\n\r\n/**\r\n * The summary attribute\r\n  **/\r\nexport function summary(value: string) { return new Attr(\"summary\", value, false, \"table\"); }\r\n\r\n/**\r\n * Overrides the browser's default tab order and follows the one specified instead.\r\n  **/\r\nexport function tabIndex(value: number) { return new Attr(\"tabindex\", value, false); }\r\n\r\n/**\r\n * Text to be displayed in a tooltip when hovering over the element.\r\n  **/\r\nexport function title(value: string) { return new Attr(\"title\", value, false); }\r\n\r\n/**\r\n * The target attribute\r\n  **/\r\nexport function target(value: string) { return new Attr(\"target\", value, false, \"a\", \"area\", \"base\", \"form\"); }\r\n\r\n/**\r\n * Specify whether an element\u2019s attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged.\r\n  **/\r\nexport function translate(value: boolean) { return new Attr(\"translate\", value, false); }\r\n\r\n/**\r\n * Defines the type of the element.\r\n  **/\r\nexport function type(value: string | MediaType) {\r\n    if (!isString(value)) {\r\n        value = value.value;\r\n    }\r\n    return new Attr(\"type\", value, false, \"button\", \"input\", \"command\", \"embed\", \"link\", \"object\", \"script\", \"source\", \"style\", \"menu\");\r\n}\r\n\r\n/**\r\n * Defines a default value which will be displayed in the element on page load.\r\n  **/\r\nexport function value(value: string | number) { return new Attr(\"value\", value, false, \"button\", \"data\", \"input\", \"li\", \"meter\", \"option\", \"progress\", \"param\"); }\r\n\r\n/**\r\n * Defines a default value which will be displayed in the element on page load.\r\n  **/\r\nexport function valueAsNumber(value: number) { return new Attr(\"valueAsNumber\", value, false, \"input\"); }\r\n\r\n/**\r\n * Defines a default value which will be displayed in the element on page load.\r\n  **/\r\nexport function valueAsDate(value: Date) { return new Attr(\"valueAsDate\", value, false, \"input\"); }\r\n\r\n/**\r\n * setting the volume at which a media element plays.\r\n  **/\r\nexport function volume(value: number) { return new Attr(\"volume\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * The usemap attribute\r\n  **/\r\nexport function useMap(value: boolean) { return new Attr(\"usemap\", value, false, \"img\", \"input\", \"object\"); }\r\n\r\n/**\r\n * For the elements listed here, this establishes the element's width.\r\n  **/\r\nexport function htmlWidth(value: number | string) { return new Attr(\"width\", value, false, \"canvas\", \"embed\", \"iframe\", \"img\", \"input\", \"object\", \"video\"); }\r\n\r\n/**\r\n * Indicates whether the text should be wrapped.\r\n  **/\r\nexport function wrap(value: boolean) { return new Attr(\"wrap\", value, false, \"textarea\"); }", "import { isArray, isDefined, isNumber, isString } from \"@juniper-lib/tslib/typeChecks\";\r\nimport { IElementAppliable } from \"./tags\";\r\n\r\nfunction asInt(v: number | string): string {\r\n    return isNumber(v) ? v.toFixed(0) : v;\r\n}\r\n\r\nexport function perc(value: number): CSSPercentage {\r\n    return `${value}%`;\r\n}\r\n\r\nexport function deg(value: number): CSSAngle {\r\n    return `${value}deg`;\r\n}\r\n\r\nexport function rad(value: number): CSSAngle {\r\n    return `${value}rad`;\r\n}\r\n\r\nexport function grad(value: number): CSSAngle {\r\n    return `${value}grad`;\r\n}\r\n\r\nexport function turn(value: number): CSSAngle {\r\n    return `${value}turn`;\r\n}\r\n\r\nexport function cap(value: number): CSSFontRelativeLength {\r\n    return `${value}cap`;\r\n}\r\n\r\nexport function ch(value: number): CSSFontRelativeLength {\r\n    return `${value}ch`;\r\n}\r\n\r\nexport function em(value: number): CSSFontRelativeLength {\r\n    return `${value}em`;\r\n}\r\n\r\nexport function ex(value: number): CSSFontRelativeLength {\r\n    return `${value}ex`;\r\n}\r\n\r\nexport function ic(value: number): CSSFontRelativeLength {\r\n    return `${value}ic`;\r\n}\r\n\r\nexport function lh(value: number): CSSFontRelativeLength {\r\n    return `${value}lh`;\r\n}\r\n\r\nexport function rem(value: number): CSSFontRelativeLength {\r\n    return `${value}rem`;\r\n}\r\n\r\nexport function rlh(value: number): CSSFontRelativeLength {\r\n    return `${value}rlh`;\r\n}\r\n\r\nexport function vh(value: number): CSSViewportPercentageLength {\r\n    return `${value}vh`;\r\n}\r\n\r\nexport function vw(value: number): CSSViewportPercentageLength {\r\n    return `${value}vw`;\r\n}\r\n\r\nexport function vi(value: number): CSSViewportPercentageLength {\r\n    return `${value}vi`;\r\n}\r\n\r\nexport function vb(value: number): CSSViewportPercentageLength {\r\n    return `${value}vb`;\r\n}\r\n\r\nexport function vmin(value: number): CSSViewportPercentageLength {\r\n    return `${value}vmin`;\r\n}\r\n\r\nexport function vmax(value: number): CSSViewportPercentageLength {\r\n    return `${value}vmax`;\r\n}\r\n\r\nexport function px(value: number): CSSAbsoluteLength {\r\n    return `${value}px`;\r\n}\r\n\r\nexport function cm(value: number): CSSAbsoluteLength {\r\n    return `${value}cm`;\r\n}\r\n\r\nexport function mm(value: number): CSSAbsoluteLength {\r\n    return `${value}mm`;\r\n}\r\n\r\nexport function Q(value: number): CSSAbsoluteLength {\r\n    return `${value}Q`;\r\n}\r\n\r\nexport function inch(value: number): CSSAbsoluteLength {\r\n    return `${value}in`;\r\n}\r\n\r\nexport function pc(value: number): CSSAbsoluteLength {\r\n    return `${value}pc`;\r\n}\r\n\r\nexport function pt(value: number): CSSAbsoluteLength {\r\n    return `${value}pt`;\r\n}\r\n\r\nexport function fr(value: number): CSSGridFlexValue {\r\n    return `${value}fr`;\r\n}\r\n\r\nexport function hash(r: HexDigit, g: HexDigit, b: HexDigit, a?: HexDigit): CSSColorHashValue;\r\nexport function hash(r: HexNumber, g: HexNumber, b: HexNumber, a?: HexNumber): CSSColorHashValue;\r\nexport function hash(r: string, g: string, b: string, a?: string): CSSColorHashValue {\r\n    if (isDefined(a)) {\r\n        return `#${r}${g}${b}${a}`;\r\n    }\r\n    else {\r\n        return `#${r}${g}${b}`;\r\n    }\r\n}\r\n\r\nexport function rgb(red: number, green: number, blue: number, alpha?: number): CSSColorRGBValue;\r\nexport function rgb(...v: number[]): CSSColorRGBValue {\r\n    return `rgb(${v.join(\", \")})`;\r\n}\r\n\r\nexport function rgba(red: number, green: number, blue: number, alpha: number): CSSColorRGBValue;\r\nexport function rgba(...v: number[]): CSSColorRGBValue {\r\n    return `rgba(${v.join(\", \")})`;\r\n}\r\n\r\nexport function hsl(hue: CSSAngle, saturation: CSSPercentage, lightness: CSSPercentage, alpha?: CSSAlpha): CSSColorHSLValue;\r\nexport function hsl(...v: (string | number)[]): CSSColorHSLValue {\r\n    return `hsl(${v.join(\", \")})`;\r\n}\r\n\r\nexport function hsla(hue: CSSAngle, saturation: CSSPercentage, lightness: CSSPercentage, alpha: CSSAlpha): CSSColorHSLValue;\r\nexport function hsla(...v: (string | number)[]): CSSColorHSLValue {\r\n    return `hsla(${v.join(\", \")})`;\r\n}\r\n\r\nexport function hwb(hue: CSSAngle, whiteness: CSSPercentage, blackness: CSSPercentage, alpha?: CSSAlpha): CSSColorHWBValue {\r\n    if (isDefined(alpha)) {\r\n        return `hwb(${hue} ${whiteness} ${blackness} / ${alpha})`;\r\n    }\r\n    else {\r\n        return `hwb(${hue} ${whiteness} ${blackness})`;\r\n    }\r\n}\r\n\r\nexport function lch(lightness: CSSPercentage, chroma: number, hue: CSSAngle, alpha?: CSSAlpha): CSSColorLCHValue {\r\n    if (isDefined(alpha)) {\r\n        return `lch(${lightness} ${chroma} ${hue} / ${alpha})`;\r\n    }\r\n    else {\r\n        return `lch(${lightness} ${chroma} ${hue})`;\r\n    }\r\n}\r\n\r\nexport function lab(lightness: CSSPercentage, a: number, b: number, alpha?: CSSAlpha): CSSColorLabValue {\r\n    if (isDefined(alpha)) {\r\n        return `lab(${lightness} ${a} ${b} / ${alpha})`;\r\n    }\r\n    else {\r\n        return `lab(${lightness} ${a} ${b})`;\r\n    }\r\n}\r\n\r\n/**\r\n * A selection of fonts for preferred monospace rendering.\r\n **/\r\nexport function getMonospaceFonts() {\r\n    return \"ui-monospace, 'Droid Sans Mono', 'Cascadia Mono', 'Segoe UI Mono', 'Ubuntu Mono', 'Roboto Mono', Menlo, Monaco, Consolas, monospace\";\r\n}\r\n\r\n/**\r\n * A selection of fonts for preferred monospace rendering.\r\n **/\r\nexport function getMonospaceFamily() {\r\n    return fontFamily(getMonospaceFonts());\r\n}\r\n\r\n/**\r\n * A selection of fonts that should match whatever the user's operating system normally uses.\r\n **/\r\nexport function getSystemFonts() {\r\n    return \"system-ui, -apple-system, '.SFNSText-Regular', 'San Francisco', 'Segoe UI', 'Ubuntu', 'Roboto', 'Noto Sans' 'Droid Sans', sans-serif\";\r\n}\r\n\r\n/**\r\n * A selection of fonts that should match whatever the user's operating system normally uses.\r\n **/\r\nexport function getSystemFamily() {\r\n    return fontFamily(getSystemFonts());\r\n}\r\n\r\n/**\r\n * A selection of serif fonts.\r\n **/\r\nexport function getSerifFonts() {\r\n    return \"Georgia, Cambria, 'Times New Roman', Times, serif\";\r\n}\r\n\r\nexport function getSerifFamily() {\r\n    return fontFamily(getSerifFonts());\r\n}\r\n\r\nexport type CSSPropName = Exclude<keyof CSSStyleDeclaration,\r\n    \"length\"\r\n    | \"parentRule\"\r\n    | \"getPropertyPriority\"\r\n    | \"getPropertyValue\"\r\n    | \"item\"\r\n    | \"removeProperty\"\r\n    | \"setProperty\"> & string;\r\n\r\nexport class Prop {\r\n    constructor(private readonly _value: string) {\r\n\r\n    }\r\n\r\n    get value() {\r\n        return this._value;\r\n    }\r\n\r\n    toString() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport class PropSet<T extends Prop = Prop> {\r\n    constructor(\r\n        private readonly pre: string,\r\n        private readonly props: (T | PropSet<T>)[],\r\n        private readonly post: string) {\r\n\r\n    }\r\n\r\n    get value(): string {\r\n        return this.pre\r\n            + this.props.map(p => p.toString()).join(\"\\n\")\r\n            + this.post;\r\n    }\r\n\r\n    toString() {\r\n        return this.value;\r\n    }\r\n\r\n    applyToSheet(sheet: CSSStyleSheet) {\r\n        sheet.insertRule(this.toString(), sheet.cssRules.length);\r\n    }\r\n}\r\n\r\nclass KeyValueProp extends Prop {\r\n    constructor(\r\n        private readonly _name: string,\r\n        private readonly sep: string,\r\n        value: string) {\r\n        super(value);\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    override toString() {\r\n        return this.name\r\n            + this.sep\r\n            + this.value\r\n            + \";\";\r\n    }\r\n}\r\n\r\nclass SelectorPropSet<T extends Prop = Prop> extends PropSet<T> {\r\n    constructor(selector: string, props: (T | PropSet<T>)[]) {\r\n        super(selector + \" {\\n\", props, \"\\n}\\n\");\r\n    }\r\n}\r\n\r\nclass CssDeclareProp\r\n    extends KeyValueProp {\r\n    constructor(key: string, value: string) {\r\n        super(key, \": \", value);\r\n    }\r\n}\r\n\r\nexport class CssElementStyleProp<K extends CSSPropName = CSSPropName>\r\n    extends CssDeclareProp\r\n    implements IElementAppliable {\r\n    private priority = \"\";\r\n\r\n    constructor(\r\n        public readonly key: K,\r\n        value: string | number) {\r\n        super(key.replace(/[A-Z]/g, (m) => `-${m.toLocaleLowerCase()}`), value.toString());\r\n    }\r\n\r\n    /**\r\n     * Set the attribute value on an HTMLElement\r\n     * @param elem - the element on which to set the attribute.\r\n     */\r\n    applyToElement(elem: HTMLElement) {\r\n        (elem.style as any)[this.key] = this.value + this.priority;\r\n    }\r\n\r\n    important(): this {\r\n        this.priority = \" !important\";\r\n        return this;\r\n    }\r\n\r\n    override get value(): string {\r\n        return super.value + this.priority;\r\n    }\r\n}\r\n\r\nclass CssElementStylePropSet extends SelectorPropSet<CssElementStyleProp> {\r\n    constructor(selector: string, props: CssElementStyleProp[]) {\r\n        super(selector, props);\r\n    }\r\n}\r\n\r\nexport function rule(selector: string, ...props: CssElementStyleProp[]) {\r\n    return new CssElementStylePropSet(selector, props);\r\n}\r\n\r\nexport function alignItems(v: CSSGlobalValue | CSSAlignItemsValue) { return new CssElementStyleProp(\"alignItems\", v); }\r\n\r\nexport function alignContent(v: CSSGlobalValue | CSSAlignContentValue) { return new CssElementStyleProp(\"alignContent\", v); }\r\n\r\nexport function alignSelf(v: CSSGlobalValue | CSSAlignSelfValue) { return new CssElementStyleProp(\"alignSelf\", v); }\r\n\r\nexport function all(v: CSSGlobalValue) { return new CssElementStyleProp(\"all\", v); }\r\n\r\nexport function alignmentBaseline(v: CSSAlignmentBaselineValue) { return new CssElementStyleProp(\"alignmentBaseline\", v); }\r\n\r\nexport function animationDelay(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function animationDelay(...v: CSSTimeValue[]): CssElementStyleProp;\r\nexport function animationDelay(...v: string[]) { return new CssElementStyleProp(\"animationDelay\", v.join(\", \")); }\r\n\r\nexport function animationDuration(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function animationDuration(...v: CSSTimeValue[]): CssElementStyleProp;\r\nexport function animationDuration(...v: string[]) { return new CssElementStyleProp(\"animationDuration\", v.join(\", \")); }\r\n\r\nexport function animationDirection(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function animationDirection(...v: CSSAnimationDirectionValue[]): CssElementStyleProp;\r\nexport function animationDirection(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"animationDirection\", v.join(\", \")); }\r\n\r\nexport function animationFillMode(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function animationFillMode(...v: CSSAnimationFillModeValue[]): CssElementStyleProp;\r\nexport function animationFillMode(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"animationFillMode\", v.join(\", \")); }\r\n\r\nexport function animationIterationCount(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function animationIterationCount(...v: CSSAnimationIterationCountValue[]): CssElementStyleProp;\r\nexport function animationIterationCount(...v: (number | string)[]): CssElementStyleProp { return new CssElementStyleProp(\"animationIterationCount\", v.join(\", \")); }\r\n\r\nexport function animationName(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function animationName(...v: string[]): CssElementStyleProp;\r\nexport function animationName(...v: string[]) { return new CssElementStyleProp(\"animationName\", v.join(\", \")); }\r\n\r\nexport function animationPlayState(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function animationPlayState(...v: CSSAnimationPlayStateValue[]): CssElementStyleProp;\r\nexport function animationPlayState(...v: string[]) { return new CssElementStyleProp(\"animationPlayState\", v.join(\", \")); }\r\n\r\nexport function animationTimingFunction(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function animationTimingFunction(...v: CSSAnimationTimingFunctionValue[]): CssElementStyleProp;\r\nexport function animationTimingFunction(...v: string[]) { return new CssElementStyleProp(\"animationTimingFunction\", v.join(' ')); }\r\n\r\nexport function animation(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function animation(...v: (string | number)[]): CssElementStyleProp;\r\nexport function animation(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"animation\", v.join(\" \")); }\r\n\r\nexport function appearance(v: CSSGlobalValue | CSSAppearanceValue) { return new CssElementStyleProp(\"appearance\", v); }\r\n\r\nexport function backdropFilter(v: \"none\" | CSSGlobalValue): CssElementStyleProp;\r\nexport function backdropFilter(...v: CSSFilterFunction[]): CssElementStyleProp;\r\nexport function backdropFilter(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"backdropFilter\" as any, v.join(' ')); }\r\n\r\nexport function backfaceVisibility(v: CSSGlobalValue | CSSBackfaceVisibilityValue) { return new CssElementStyleProp(\"backfaceVisibility\", v); }\r\n\r\nexport function backgroundAttachment(v: CSSGlobalValue | CSSBackgroundAttachmentValue) { return new CssElementStyleProp(\"backgroundAttachment\", v); }\r\n\r\nexport function backgroundBlendMode(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function backgroundBlendMode(...v: CSSBlendModeValue[]): CssElementStyleProp;\r\nexport function backgroundBlendMode(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundBlendMode\", v.join(\", \")); }\r\n\r\nexport function backgroundClip(v: CSSGlobalValue | CSSClipValue): CssElementStyleProp { return new CssElementStyleProp(\"backgroundClip\", v); }\r\n\r\nexport function backgroundColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"backgroundColor\", v); }\r\n\r\nexport function backgroundImage(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function backgroundImage(...v: CSSImage[]): CssElementStyleProp;\r\nexport function backgroundImage(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundImage\", v.join(\", \")); }\r\n\r\nexport function backgroundOrigin(v: CSSGlobalValue | CSSBoxType): CssElementStyleProp { return new CssElementStyleProp(\"backgroundOrigin\", v); }\r\n\r\nexport function backgroundPosition(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function backgroundPosition(v: CSSBackgroundPositionValue): CssElementStyleProp;\r\nexport function backgroundPosition(x: CSSLengthPercentage, y: CSSLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPosition(x: CSSBackgroundPositionHorizontalKeyword, y: CSSBackgroundPositionVerticalValue): CssElementStyleProp;\r\nexport function backgroundPosition(y: CSSBackgroundPositionVerticalKeyword, x: CSSBackgroundPositionHorizontalValue): CssElementStyleProp;\r\nexport function backgroundPosition(x: CSSBackgroundPositionHorizontalKeyword, y: CSSBackgroundPositionVerticalKeyword, yOffset: CSSLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPosition(x: CSSBackgroundPositionHorizontalKeyword, xOffset: CSSLengthPercentage, y: CSSBackgroundPositionVerticalKeyword): CssElementStyleProp;\r\nexport function backgroundPosition(y: CSSBackgroundPositionVerticalKeyword, x: CSSBackgroundPositionHorizontalKeyword, xOffset: CSSLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPosition(y: CSSBackgroundPositionVerticalKeyword, yOffset: CSSLengthPercentage, x: CSSBackgroundPositionHorizontalKeyword): CssElementStyleProp;\r\nexport function backgroundPosition(x: CSSBackgroundPositionHorizontalKeyword, xOffset: CSSLengthPercentage, y: CSSBackgroundPositionVerticalKeyword, yOffset: CSSLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPosition(y: CSSBackgroundPositionVerticalKeyword, yOffset: CSSLengthPercentage, x: CSSBackgroundPositionHorizontalKeyword, xOffset: CSSLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPosition(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundPosition\", v.join(\" \")); }\r\n\r\nexport function backgroundPositionX(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function backgroundPositionX(x: CSSBackgroundPositionHorizontalValue): CssElementStyleProp;\r\nexport function backgroundPositionX(x: CSSBackgroundPositionHorizontalKeyword, xOffset: CSSLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPositionX(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundPositionX\", v.join(\" \")); }\r\n\r\nexport function backgroundPositionY(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function backgroundPositionY(y: CSSBackgroundPositionVerticalValue): CssElementStyleProp;\r\nexport function backgroundPositionY(y: CSSBackgroundPositionVerticalKeyword, yOffset: CSSLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPositionY(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundPositionY\", v.join(\" \")); }\r\n\r\nexport function backgroundRepeat(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function backgroundRepeat(v: CSSBackgroundRepeatValue): CssElementStyleProp;\r\nexport function backgroundRepeat(x: CSSBackgroundRepeat, y: CSSBackgroundRepeat): CssElementStyleProp;\r\nexport function backgroundRepeat(...v: string[]) { return new CssElementStyleProp(\"backgroundRepeat\", v.join(\" \")); }\r\n\r\nexport function backgroundSize(v: CSSGlobalValue | CSSBackgroundSizeSingleValue): CssElementStyleProp;\r\nexport function backgroundSize(x: CSSBackgroundSizeValue, y: CSSBackgroundSizeValue): CssElementStyleProp;\r\nexport function backgroundSize(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundSize\", v.join(\" \")); }\r\n\r\nexport function background(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function background(...v: string[]): CssElementStyleProp;\r\nexport function background(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"background\", v.join(\", \")); }\r\n\r\nexport function baselineShift(v: string) { return new CssElementStyleProp(\"baselineShift\", v); }\r\n\r\nexport function blockSize(v: CSSGlobalValue | CSSSizePropertyValue) { return new CssElementStyleProp(\"blockSize\", v); }\r\n\r\nexport function border(v: string | 0) { return new CssElementStyleProp(\"border\", v); }\r\n\r\nexport function borderBlockEnd(v: string) { return new CssElementStyleProp(\"borderBlockEnd\", v); }\r\n\r\nexport function borderBlockEndColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"borderBlockEndColor\", v); }\r\n\r\nexport function borderBlockEndStyle(v: CSSGlobalValue | CSSBorderStyleValue) { return new CssElementStyleProp(\"borderBlockEndStyle\", v); }\r\n\r\nexport function borderBlockEndWidth(v: CSSGlobalValue | CSSLengthPercentage | CSSWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderBlockEndWidth\", v); }\r\n\r\nexport function borderBlockStart(v: string) { return new CssElementStyleProp(\"borderBlockStart\", v); }\r\n\r\nexport function borderBlockStartColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"borderBlockStartColor\", v); }\r\n\r\nexport function borderBlockStartStyle(v: CSSGlobalValue | CSSBorderStyleValue) { return new CssElementStyleProp(\"borderBlockStartStyle\", v); }\r\n\r\nexport function borderBlockStartWidth(v: CSSGlobalValue | CSSLengthPercentage | CSSWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderBlockStartWidth\", v); }\r\n\r\nexport function borderBottom(v: string) { return new CssElementStyleProp(\"borderBottom\", v); }\r\n\r\nexport function borderBottomColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"borderBottomColor\", v); }\r\n\r\nexport function borderBottomLeftRadius(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderBottomLeftRadius(v: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderBottomLeftRadius(major: CSSLengthPercentage, minor: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderBottomLeftRadius(...v: (string | number)[]) { return new CssElementStyleProp(\"borderBottomLeftRadius\", v.join(\" \")); }\r\n\r\nexport function borderBottomRightRadius(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderBottomRightRadius(v: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderBottomRightRadius(major: CSSLengthPercentage, minor: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderBottomRightRadius(...v: (string | number)[]) { return new CssElementStyleProp(\"borderBottomRightRadius\", v.join(\" \")); }\r\n\r\nexport function borderBottomStyle(v: CSSGlobalValue | CSSBorderStyleValue) { return new CssElementStyleProp(\"borderBottomStyle\", v); }\r\n\r\nexport function borderBottomWidth(v: CSSGlobalValue | CSSLengthPercentage | CSSWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderBottomWidth\", v); }\r\n\r\nexport function borderCollapse(v: CSSGlobalValue | CSSBorderCollapseValue) { return new CssElementStyleProp(\"borderCollapse\", v); }\r\n\r\nexport function borderColor(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderColor(all: CSSColorValue): CssElementStyleProp;\r\nexport function borderColor(vertical: CSSColorValue, horizontal: CSSColorValue): CssElementStyleProp;\r\nexport function borderColor(top: CSSColorValue, horizontal: CSSColorValue, bottom: CSSColorValue): CssElementStyleProp;\r\nexport function borderColor(top: CSSColorValue, right: CSSColorValue, bottom: CSSColorValue, left: CSSColorValue): CssElementStyleProp;\r\nexport function borderColor(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"borderColor\", v.join(\" \")); }\r\n\r\nexport function borderImage(v: string) { return new CssElementStyleProp(\"borderImage\", v); }\r\n\r\nexport function borderImageOutset(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderImageOutset(all: CSSLength | number): CssElementStyleProp;\r\nexport function borderImageOutset(vertical: CSSLength | number, horizontal: CSSLength | number): CssElementStyleProp;\r\nexport function borderImageOutset(top: CSSLength | number, horizontal: CSSLength | number, bottom: CSSLength | number): CssElementStyleProp;\r\nexport function borderImageOutset(top: CSSLength | number, right: CSSLength | number, bottom: CSSLength | number, left: CSSLength | number): CssElementStyleProp;\r\nexport function borderImageOutset(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"borderImageOutset\", v.join(\" \")); }\r\n\r\nexport function borderImageRepeat(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderImageRepeat(all: CSSBorderRepeatValue): CssElementStyleProp;\r\nexport function borderImageRepeat(vertical: CSSBorderRepeatValue, horizontal: CSSBorderRepeatValue): CssElementStyleProp;\r\nexport function borderImageRepeat(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"borderImageRepeat\", v.join(\" \")); }\r\n\r\nexport function borderImageSlice(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderImageSlice(all: CSSLengthPercentage | \"fill\"): CssElementStyleProp;\r\nexport function borderImageSlice(vertical: CSSLengthPercentage | \"fill\", horizontal: CSSLengthPercentage | \"fill\"): CssElementStyleProp;\r\nexport function borderImageSlice(top: CSSLengthPercentage | \"fill\", horizontal: CSSLengthPercentage | \"fill\", bottom: CSSLengthPercentage | \"fill\"): CssElementStyleProp;\r\nexport function borderImageSlice(top: CSSLengthPercentage | \"fill\", right: CSSLengthPercentage | \"fill\", bottom: CSSLengthPercentage | \"fill\", left: CSSLengthPercentage | \"fill\"): CssElementStyleProp;\r\nexport function borderImageSlice(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"borderImageSlice\", v.join(\" \")); }\r\n\r\nexport function borderImageSource(v: CSSGlobalValue | CSSImage | \"none\") { return new CssElementStyleProp(\"borderImageSource\", v); }\r\n\r\nexport function borderImageWidth(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderImageWidth(v: CSSLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function borderImageWidth(vertical: CSSLengthPercentage | \"auto\", horizontal: CSSLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function borderImageWidth(top: CSSLengthPercentage | \"auto\", horizontal: CSSLengthPercentage | \"auto\", bottom: CSSLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function borderImageWidth(top: CSSLengthPercentage | \"auto\", right: CSSLengthPercentage | \"auto\", bottom: CSSLengthPercentage | \"auto\", left: CSSLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function borderImageWidth(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"borderImageWidth\", v.join(\" \")); }\r\n\r\nexport function borderInlineEnd(v: string) { return new CssElementStyleProp(\"borderInlineEnd\", v); }\r\n\r\nexport function borderInlineEndColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"borderInlineEndColor\", v); }\r\n\r\nexport function borderInlineEndStyle(v: CSSGlobalValue | CSSBorderStyleValue) { return new CssElementStyleProp(\"borderInlineEndStyle\", v); }\r\n\r\nexport function borderInlineEndWidth(v: CSSGlobalValue | CSSLengthPercentage | CSSWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderInlineEndWidth\", v); }\r\n\r\nexport function borderInlineStart(v: string) { return new CssElementStyleProp(\"borderInlineStart\", v); }\r\n\r\nexport function borderInlineStartColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"borderInlineStartColor\", v); }\r\n\r\nexport function borderInlineStartStyle(v: CSSGlobalValue | CSSBorderStyleValue) { return new CssElementStyleProp(\"borderInlineStartStyle\", v); }\r\n\r\nexport function borderInlineStartWidth(v: CSSGlobalValue | CSSLengthPercentage | CSSWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderInlineStartWidth\", v); }\r\n\r\nexport function borderLeft(v: string) { return new CssElementStyleProp(\"borderLeft\", v); }\r\n\r\nexport function borderLeftColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"borderLeftColor\", v); }\r\n\r\nexport function borderLeftStyle(v: CSSGlobalValue | CSSBorderStyleValue) { return new CssElementStyleProp(\"borderLeftStyle\", v); }\r\n\r\nexport function borderLeftWidth(v: CSSGlobalValue | CSSLengthPercentage | CSSWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderLeftWidth\", v); }\r\n\r\nexport function borderRadius(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderRadius(all: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderRadius(all: [CSSLengthPercentage, CSSLengthPercentage]): CssElementStyleProp;\r\nexport function borderRadius(topLeftBottomRight: CSSLengthPercentage, topRightBottomLeft: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderRadius(topLeft: CSSLengthPercentage, topRightBottomLeft: CSSLengthPercentage, bottomRight: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderRadius(topLeft: CSSLengthPercentage, topRight: CSSLengthPercentage, bottomRight: CSSLengthPercentage, bottomLeft: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderRadius(...v: (string | number | (string | number)[])[]): CssElementStyleProp {\r\n    let value: string = null;\r\n    if (v.length === 0) {\r\n        value = \"\";\r\n    }\r\n    else if (isArray(v[0]) && isArray(v[1])) {\r\n        const left = v[0].join(\" \");\r\n        const right = v[1].join(\" \");\r\n        value = `${left} / ${right}`;\r\n    }\r\n    else {\r\n        value = v.join(\" \");\r\n    }\r\n    return new CssElementStyleProp(\"borderRadius\", value);\r\n}\r\n\r\nexport function borderRight(v: string) { return new CssElementStyleProp(\"borderRight\", v); }\r\n\r\nexport function borderRightColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"borderRightColor\", v); }\r\n\r\nexport function borderRightStyle(v: CSSGlobalValue | CSSBorderStyleValue) { return new CssElementStyleProp(\"borderRightStyle\", v); }\r\n\r\nexport function borderRightWidth(v: CSSGlobalValue | CSSLengthPercentage | CSSWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderRightWidth\", v); }\r\n\r\nexport function borderSpacing(v: string) { return new CssElementStyleProp(\"borderSpacing\", v); }\r\n\r\nexport function borderStyle(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderStyle(all: CSSBorderStyleValue): CssElementStyleProp;\r\nexport function borderStyle(vertical: CSSBorderStyleValue, horizontal: CSSBorderStyleValue): CssElementStyleProp;\r\nexport function borderStyle(top: CSSBorderStyleValue, horizontal: CSSBorderStyleValue, bottom: CSSBorderStyleValue): CssElementStyleProp;\r\nexport function borderStyle(top: CSSBorderStyleValue, right: CSSBorderStyleValue, bottom: CSSBorderStyleValue, left: CSSBorderStyleValue): CssElementStyleProp;\r\nexport function borderStyle(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"borderStyle\", v.join(\" \")); }\r\n\r\nexport function borderTop(v: string) { return new CssElementStyleProp(\"borderTop\", v); }\r\n\r\nexport function borderTopColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"borderTopColor\", v); }\r\n\r\nexport function borderTopLeftRadius(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderTopLeftRadius(v: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderTopLeftRadius(major: CSSLengthPercentage, minor: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderTopLeftRadius(...v: (string | number)[]) { return new CssElementStyleProp(\"borderTopLeftRadius\", v.join(\" \")); }\r\n\r\nexport function borderTopRightRadius(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderTopRightRadius(v: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderTopRightRadius(major: CSSLengthPercentage, minor: CSSLengthPercentage): CssElementStyleProp;\r\nexport function borderTopRightRadius(...v: (string | number)[]) { return new CssElementStyleProp(\"borderTopRightRadius\", v.join(\" \")); }\r\n\r\nexport function borderTopStyle(v: CSSGlobalValue | CSSBorderStyleValue) { return new CssElementStyleProp(\"borderTopStyle\", v); }\r\n\r\nexport function borderTopWidth(v: CSSGlobalValue | CSSLengthPercentage | CSSWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderTopWidth\", v); }\r\n\r\nexport function borderWidth(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function borderWidth(all: CSSLengthPercentage | CSSWidthKeyword | \"auto\"): CssElementStyleProp;\r\nexport function borderWidth(vert: CSSLengthPercentage | CSSWidthKeyword | \"auto\", horiz: CSSLengthPercentage | CSSWidthKeyword | \"auto\"): CssElementStyleProp;\r\nexport function borderWidth(top: CSSLengthPercentage | CSSWidthKeyword | \"auto\", horiz: CSSLengthPercentage | CSSWidthKeyword | \"auto\", bottom: CSSLengthPercentage | CSSWidthKeyword | \"auto\"): CssElementStyleProp;\r\nexport function borderWidth(top: CSSLengthPercentage | CSSWidthKeyword | \"auto\", right: CSSLengthPercentage | CSSWidthKeyword | \"auto\", bottom: CSSLengthPercentage | CSSWidthKeyword | \"auto\", left: CSSLengthPercentage | CSSWidthKeyword | \"auto\"): CssElementStyleProp;\r\nexport function borderWidth(...v: (string | number)[]) { return new CssElementStyleProp(\"borderWidth\", v.join(\" \")); }\r\n\r\nexport function bottom(v: CSSGlobalValue | CSSElementPositionValue) { return new CssElementStyleProp(\"bottom\", v); }\r\n\r\nexport function boxShadow(v: string) { return new CssElementStyleProp(\"boxShadow\", v); }\r\n\r\nexport function boxSizing(v: string) { return new CssElementStyleProp(\"boxSizing\", v); }\r\n\r\nexport function breakAfter(v: string) { return new CssElementStyleProp(\"breakAfter\", v); }\r\n\r\nexport function breakBefore(v: string) { return new CssElementStyleProp(\"breakBefore\", v); }\r\n\r\nexport function breakInside(v: string) { return new CssElementStyleProp(\"breakInside\", v); }\r\n\r\nexport function captionSide(v: string) { return new CssElementStyleProp(\"captionSide\", v); }\r\n\r\nexport function caretColor(v: string) { return new CssElementStyleProp(\"caretColor\", v); }\r\n\r\nexport function clear(v: string) { return new CssElementStyleProp(\"clear\", v); }\r\n\r\nexport function clip(v: string) { return new CssElementStyleProp(\"clip\", v); }\r\n\r\nexport function clipPath(v: string) { return new CssElementStyleProp(\"clipPath\", v); }\r\n\r\nexport function clipRule(v: string) { return new CssElementStyleProp(\"clipRule\", v); }\r\n\r\nexport function color(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function color(v: CSSColorValue): CssElementStyleProp;\r\nexport function color(v: string): CssElementStyleProp { return new CssElementStyleProp(\"color\", v); }\r\n\r\nexport function colorInterpolation(v: string) { return new CssElementStyleProp(\"colorInterpolation\", v); }\r\n\r\nexport function colorInterpolationFilters(v: string) { return new CssElementStyleProp(\"colorInterpolationFilters\", v); }\r\n\r\nexport function colorScheme(v: string) { return new CssElementStyleProp(\"colorScheme\", v); }\r\n\r\nexport function columnCount(v: string) { return new CssElementStyleProp(\"columnCount\", v); }\r\n\r\nexport function columnFill(v: string) { return new CssElementStyleProp(\"columnFill\", v); }\r\n\r\nexport function columnGap(v: CSSGlobalValue | CSSLengthPercentage | CSSCalcStatement): CssElementStyleProp { return new CssElementStyleProp(\"columnGap\", v); }\r\nexport function gridColumnGap(v: CSSGlobalValue | CSSLengthPercentage | CSSCalcStatement) { return new CssElementStyleProp(\"gridColumnGap\", v); }\r\n\r\nexport function columnRule(v: string) { return new CssElementStyleProp(\"columnRule\", v); }\r\n\r\nexport function columnRuleColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"columnRuleColor\", v); }\r\n\r\nexport function columnRuleStyle(v: string) { return new CssElementStyleProp(\"columnRuleStyle\", v); }\r\n\r\nexport function columnRuleWidth(v: CSSGlobalValue | CSSLength | CSSWidthKeyword) { return new CssElementStyleProp(\"columnRuleWidth\", v); }\r\n\r\nexport function columnSpan(v: string) { return new CssElementStyleProp(\"columnSpan\", v); }\r\n\r\nexport function columnWidth(v: CSSGlobalValue | CSSLength | \"auto\") { return new CssElementStyleProp(\"columnWidth\", v); }\r\n\r\nexport function columns(v: string) { return new CssElementStyleProp(\"columns\", v); }\r\n\r\nexport function contain(v: string) { return new CssElementStyleProp(\"contain\", v); }\r\n\r\nexport function counterIncrement(v: string) { return new CssElementStyleProp(\"counterIncrement\", v); }\r\n\r\nexport function counterReset(v: string) { return new CssElementStyleProp(\"counterReset\", v); }\r\n\r\nexport function cursor(v: CSSGlobalValue | CSSCursorValue) { return new CssElementStyleProp(\"cursor\", v); }\r\n\r\nexport function direction(v: CSSGlobalValue | CSSDirectionValue) { return new CssElementStyleProp(\"direction\", v); }\r\n\r\nexport function display(v: CSSGlobalValue | CSSDisplayValue) { return new CssElementStyleProp(\"display\", v); }\r\n\r\nexport function dominantBaseline(v: string) { return new CssElementStyleProp(\"dominantBaseline\", v); }\r\n\r\nexport function emptyCells(v: string) { return new CssElementStyleProp(\"emptyCells\", v); }\r\n\r\nexport function fill(v: string) { return new CssElementStyleProp(\"fill\", v); }\r\n\r\nexport function fillOpacity(v: string) { return new CssElementStyleProp(\"fillOpacity\", v); }\r\n\r\nexport function fillRule(v: string) { return new CssElementStyleProp(\"fillRule\", v); }\r\n\r\nexport function filter(v: string) { return new CssElementStyleProp(\"filter\", v); }\r\n\r\nexport function flexBasis(v: CSSGlobalValue | CSSFlexBasisValue) { return new CssElementStyleProp(\"flexBasis\", v); }\r\n\r\nexport function flexDirection(v: CSSGlobalValue | CSSFlexDirectionValue) { return new CssElementStyleProp(\"flexDirection\", v); }\r\n\r\nexport function flexWrap(v: CSSGlobalValue | CSSFlexWrapValue) { return new CssElementStyleProp(\"flexWrap\", v); }\r\n\r\nexport function flexFlow(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function flexFlow(v: CSSFlexFlowValue): CssElementStyleProp;\r\nexport function flexFlow(x: CSSFlexFlowValue, y: CSSFlexFlowValue): CssElementStyleProp;\r\nexport function flexFlow(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"flexFlow\", v.join(' ')); }\r\n\r\nexport function flex(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function flex(grow: number): CssElementStyleProp;\r\nexport function flex(basis: CSSFlexBasisValue): CssElementStyleProp;\r\nexport function flex(grow: number, shrink: number): CssElementStyleProp;\r\nexport function flex(grow: number, basis: CSSFlexBasisValue): CssElementStyleProp;\r\nexport function flex(grow: number, shrink: number, basis: CSSFlexBasisValue): CssElementStyleProp;\r\nexport function flex(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"flex\", v.join(' ')); }\r\n\r\nexport function flexGrow(v: CSSGlobalValue | number) { return new CssElementStyleProp(\"flexGrow\", v); }\r\n\r\nexport function flexShrink(v: CSSGlobalValue | number) { return new CssElementStyleProp(\"flexShrink\", v); }\r\n\r\nexport function float(v: CSSGlobalValue | CSSFloatValue) { return new CssElementStyleProp(\"float\", v); }\r\n\r\nexport function floodColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"floodColor\", v); }\r\n\r\nexport function floodOpacity(v: string) { return new CssElementStyleProp(\"floodOpacity\", v); }\r\n\r\nexport function font(v: string) { return new CssElementStyleProp(\"font\", v); }\r\n\r\nexport function fontFamily(v: string) { return new CssElementStyleProp(\"fontFamily\", v); }\r\n\r\nexport function fontFeatureSettings(v: string) { return new CssElementStyleProp(\"fontFeatureSettings\", v); }\r\n\r\nexport function fontKerning(v: string) { return new CssElementStyleProp(\"fontKerning\", v); }\r\n\r\nexport function fontOpticalSizing(v: string) { return new CssElementStyleProp(\"fontOpticalSizing\", v); }\r\n\r\nexport function fontSize(v: string) { return new CssElementStyleProp(\"fontSize\", v); }\r\n\r\nexport function fontStretch(v: string) { return new CssElementStyleProp(\"fontStretch\", v); }\r\n\r\nexport function fontStyle(v: string) { return new CssElementStyleProp(\"fontStyle\", v); }\r\n\r\nexport function fontVariant(v: string) { return new CssElementStyleProp(\"fontVariant\", v); }\r\n\r\nexport function fontVariantCaps(v: string) { return new CssElementStyleProp(\"fontVariantCaps\", v); }\r\n\r\nexport function fontVariantEastAsian(v: string) { return new CssElementStyleProp(\"fontVariantEastAsian\", v); }\r\n\r\nexport function fontVariantLigatures(v: string) { return new CssElementStyleProp(\"fontVariantLigatures\", v); }\r\n\r\nexport function fontVariantNumeric(v: string) { return new CssElementStyleProp(\"fontVariantNumeric\", v); }\r\n\r\nexport function fontVariationSettings(v: string) { return new CssElementStyleProp(\"fontVariationSettings\", v); }\r\n\r\nexport function fontWeight(v: string) { return new CssElementStyleProp(\"fontWeight\", v); }\r\n\r\nexport function gap(v: CSSGlobalValue | CSSLengthPercentage | CSSCalcStatement): CssElementStyleProp;\r\nexport function gap(row: CSSLengthPercentage | CSSCalcStatement, column: CSSLengthPercentage | CSSCalcStatement): CssElementStyleProp\r\nexport function gap(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"gap\", v.join(\" \")); }\r\nexport function gridGap(v: CSSGlobalValue | CSSLengthPercentage | CSSCalcStatement): CssElementStyleProp;\r\nexport function gridGap(row: CSSLengthPercentage | CSSCalcStatement, column: CSSLengthPercentage | CSSCalcStatement): CssElementStyleProp\r\nexport function gridGap(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"gridGap\", v.join(\" \")); }\r\n\r\nexport function grid(v: string) { return new CssElementStyleProp(\"grid\", v); }\r\n\r\nexport function gridArea(v: string): CssElementStyleProp;\r\nexport function gridArea(rowStart: number, colStart?: number, rowEnd?: number, colEnd?: number): CssElementStyleProp;\r\nexport function gridArea(vOrRowStart: string | number, colStart?: number, rowEnd?: number, colEnd?: number): CssElementStyleProp {\r\n    if (!isString(vOrRowStart)) {\r\n        vOrRowStart = [vOrRowStart, colStart, rowEnd, colEnd]\r\n            .filter(isDefined)\r\n            .join('/');\r\n    }\r\n\r\n    return new CssElementStyleProp(\"gridArea\", vOrRowStart);\r\n}\r\n\r\nexport function gridAutoColumns(v: string) { return new CssElementStyleProp(\"gridAutoColumns\", v); }\r\n\r\nexport function gridAutoFlow(v: CSSGlobalValue | CSSGridAutoFlowValue) { return new CssElementStyleProp(\"gridAutoFlow\", v); }\r\n\r\nexport function gridAutoRows(v: string) { return new CssElementStyleProp(\"gridAutoRows\", v); }\r\n\r\nexport function gridColumn(v: string): CssElementStyleProp\r\nexport function gridColumn(colStart: number, colEnd?: number): CssElementStyleProp\r\nexport function gridColumn(vOrColStart: string | number, colEnd?: number): CssElementStyleProp {\r\n    if (!isString(vOrColStart)) {\r\n        vOrColStart = [vOrColStart, colEnd]\r\n            .filter(isDefined)\r\n            .join('/');\r\n    }\r\n    return new CssElementStyleProp(\"gridColumn\", vOrColStart);\r\n}\r\n\r\nexport function gridColumnEnd(v: string | number) { return new CssElementStyleProp(\"gridColumnEnd\", v); }\r\n\r\nexport function gridColumnStart(v: string | number) { return new CssElementStyleProp(\"gridColumnStart\", v); }\r\n\r\nexport function gridRow(v: string): CssElementStyleProp\r\nexport function gridRow(rowStart: number, rowEnd?: number): CssElementStyleProp\r\nexport function gridRow(vOrRowStart: string | number, rowEnd?: number): CssElementStyleProp {\r\n    if (!isString(vOrRowStart)) {\r\n        vOrRowStart = [vOrRowStart, rowEnd]\r\n            .filter(isDefined)\r\n            .join('/');\r\n    }\r\n    return new CssElementStyleProp(\"gridRow\", vOrRowStart);\r\n}\r\n\r\nexport function gridRowEnd(v: string | number) { return new CssElementStyleProp(\"gridRowEnd\", v); }\r\n\r\nexport function gridRowStart(v: string | number) { return new CssElementStyleProp(\"gridRowStart\", v); }\r\n\r\nexport function gridTemplate(v: string) { return new CssElementStyleProp(\"gridTemplate\", v); }\r\n\r\nexport function gridTemplateAreas(...v: string[]) { return new CssElementStyleProp(\"gridTemplateAreas\", v.map((r) => '\"' + r + '\"').join('\\n')); }\r\n\r\nexport function gridTemplateColumns(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function gridTemplateColumns(...v: CSSGridTemplateTrackValue[]): CssElementStyleProp;\r\nexport function gridTemplateColumns(...v: (string | number)[]) { return new CssElementStyleProp(\"gridTemplateColumns\", v.join(\" \")); }\r\n\r\nexport function gridTemplateRows(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function gridTemplateRows(...v: CSSGridTemplateTrackValue[]): CssElementStyleProp;\r\nexport function gridTemplateRows(...v: (string | number)[]) { return new CssElementStyleProp(\"gridTemplateRows\", v.join(\" \")); }\r\n\r\nexport function height(v: CSSGlobalValue | CSSSizePropertyValue) { return new CssElementStyleProp(\"height\", v); }\r\n\r\nexport function hyphens(v: string) { return new CssElementStyleProp(\"hyphens\", v); }\r\n\r\nexport function imageOrientation(v: string) { return new CssElementStyleProp(\"imageOrientation\", v); }\r\n\r\nexport function imageRendering(v: string) { return new CssElementStyleProp(\"imageRendering\", v); }\r\n\r\nexport function inlineSize(v: string) { return new CssElementStyleProp(\"inlineSize\", v); }\r\n\r\nexport function isolation(v: string) { return new CssElementStyleProp(\"isolation\", v); }\r\n\r\nexport function justifyContent(v: string) { return new CssElementStyleProp(\"justifyContent\", v); }\r\n\r\nexport function justifyItems(v: string) { return new CssElementStyleProp(\"justifyItems\", v); }\r\n\r\nexport function justifySelf(v: string) { return new CssElementStyleProp(\"justifySelf\", v); }\r\n\r\nexport function left(v: CSSElementPositionValue) { return new CssElementStyleProp(\"left\", v); }\r\n\r\nexport function letterSpacing(v: string) { return new CssElementStyleProp(\"letterSpacing\", v); }\r\n\r\nexport function lightingColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"lightingColor\", v); }\r\n\r\nexport function lineBreak(v: string) { return new CssElementStyleProp(\"lineBreak\", v); }\r\n\r\nexport function lineHeight(v: string) { return new CssElementStyleProp(\"lineHeight\", v); }\r\n\r\nexport function listStyle(v: string) { return new CssElementStyleProp(\"listStyle\", v); }\r\n\r\nexport function listStyleImage(v: string) { return new CssElementStyleProp(\"listStyleImage\", v); }\r\n\r\nexport function listStylePosition(v: string) { return new CssElementStyleProp(\"listStylePosition\", v); }\r\n\r\nexport function listStyleType(v: string) { return new CssElementStyleProp(\"listStyleType\", v); }\r\n\r\nexport function margin(v: CSSGlobalValue | CSSLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function margin(vert: CSSLengthPercentage | \"auto\", horiz: CSSLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function margin(top: CSSLengthPercentage | \"auto\", horiz: CSSLengthPercentage | \"auto\", bot: CSSLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function margin(top: CSSLengthPercentage | \"auto\", right: CSSLengthPercentage | \"auto\", bot: CSSLengthPercentage | \"auto\", left: CSSLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function margin(...v: (number | string)[]) { return new CssElementStyleProp(\"margin\", v.join(\" \")); }\r\n\r\nexport function marginBlockEnd(v: CSSLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginBlockEnd\", v); }\r\n\r\nexport function marginBlockStart(v: CSSLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginBlockStart\", v); }\r\n\r\nexport function marginBottom(v: CSSLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginBottom\", v); }\r\n\r\nexport function marginInlineEnd(v: CSSLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginInlineEnd\", v); }\r\n\r\nexport function marginInlineStart(v: CSSLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginInlineStart\", v); }\r\n\r\nexport function marginLeft(v: CSSLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginLeft\", v); }\r\n\r\nexport function marginRight(v: CSSLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginRight\", v); }\r\n\r\nexport function marginTop(v: CSSLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginTop\", v); }\r\n\r\nexport function marker(v: string) { return new CssElementStyleProp(\"marker\", v); }\r\n\r\nexport function markerEnd(v: string) { return new CssElementStyleProp(\"markerEnd\", v); }\r\n\r\nexport function markerMid(v: string) { return new CssElementStyleProp(\"markerMid\", v); }\r\n\r\nexport function markerStart(v: string) { return new CssElementStyleProp(\"markerStart\", v); }\r\n\r\nexport function mask(v: string) { return new CssElementStyleProp(\"mask\", v); }\r\n\r\nexport function maskType(v: string) { return new CssElementStyleProp(\"maskType\", v); }\r\n\r\nexport function maxBlockSize(v: string) { return new CssElementStyleProp(\"maxBlockSize\", v); }\r\n\r\nexport function maxHeight(v: string | 0) { return new CssElementStyleProp(\"maxHeight\", v); }\r\n\r\nexport function maxInlineSize(v: string) { return new CssElementStyleProp(\"maxInlineSize\", v); }\r\n\r\nexport function maxWidth(v: string | 0) { return new CssElementStyleProp(\"maxWidth\", v); }\r\n\r\nexport function minBlockSize(v: string) { return new CssElementStyleProp(\"minBlockSize\", v); }\r\n\r\nexport function minHeight(v: string | 0) { return new CssElementStyleProp(\"minHeight\", v); }\r\n\r\nexport function minInlineSize(v: string) { return new CssElementStyleProp(\"minInlineSize\", v); }\r\n\r\nexport function minWidth(v: string | 0) { return new CssElementStyleProp(\"minWidth\", v); }\r\n\r\nexport function mixBlendMode(v: string) { return new CssElementStyleProp(\"mixBlendMode\", v); }\r\n\r\nexport function objectFit(v: string) { return new CssElementStyleProp(\"objectFit\", v); }\r\n\r\nexport function objectPosition(v: string) { return new CssElementStyleProp(\"objectPosition\", v); }\r\n\r\nexport function offset(v: string) { return new CssElementStyleProp(\"offset\", v); }\r\n\r\nexport function offsetDistance(v: string) { return new CssElementStyleProp(\"offsetDistance\", v); }\r\n\r\nexport function offsetPath(v: string) { return new CssElementStyleProp(\"offsetPath\", v); }\r\n\r\nexport function offsetRotate(v: string) { return new CssElementStyleProp(\"offsetRotate\", v); }\r\n\r\nexport function opacity(v: CSSGlobalValue | CSSAlpha) { return new CssElementStyleProp(\"opacity\", v); }\r\n\r\nexport function order(v: string) { return new CssElementStyleProp(\"order\", v); }\r\n\r\nexport function orphans(v: string) { return new CssElementStyleProp(\"orphans\", v); }\r\n\r\nexport function outline(v: string) { return new CssElementStyleProp(\"outline\", v); }\r\n\r\nexport function outlineColor(v: CSSGlobalValue | CSSColorValue | \"invert\") { return new CssElementStyleProp(\"outlineColor\", v); }\r\n\r\nexport function outlineOffset(v: string) { return new CssElementStyleProp(\"outlineOffset\", v); }\r\n\r\nexport function outlineStyle(v: string) { return new CssElementStyleProp(\"outlineStyle\", v); }\r\n\r\nexport function outlineWidth(v: string | 0) { return new CssElementStyleProp(\"outlineWidth\", v); }\r\n\r\nexport function overflow(v: CSSGlobalValue | CSSOverflowValue): CssElementStyleProp;\r\nexport function overflow(x: CSSOverflowValue, y: CSSOverflowValue): CssElementStyleProp;\r\nexport function overflow(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"overflow\", v.join(\" \")); }\r\n\r\nexport function overflowX(v: CSSGlobalValue | CSSOverflowValue) { return new CssElementStyleProp(\"overflowX\", v); }\r\n\r\nexport function overflowY(v: CSSGlobalValue | CSSOverflowValue) { return new CssElementStyleProp(\"overflowY\", v); }\r\n\r\nexport function overflowAnchor(v: string) { return new CssElementStyleProp(\"overflowAnchor\", v); }\r\n\r\nexport function overflowWrap(v: string) { return new CssElementStyleProp(\"overflowWrap\", v); }\r\n\r\nexport function overscrollBehavior(v: string) { return new CssElementStyleProp(\"overscrollBehavior\", v); }\r\n\r\nexport function overscrollBehaviorBlock(v: string) { return new CssElementStyleProp(\"overscrollBehaviorBlock\", v); }\r\n\r\nexport function overscrollBehaviorInline(v: string) { return new CssElementStyleProp(\"overscrollBehaviorInline\", v); }\r\n\r\nexport function overscrollBehaviorX(v: string) { return new CssElementStyleProp(\"overscrollBehaviorX\", v); }\r\n\r\nexport function overscrollBehaviorY(v: string) { return new CssElementStyleProp(\"overscrollBehaviorY\", v); }\r\n\r\nexport function padding(v: CSSGlobalValue | CSSLengthPercentage): CssElementStyleProp;\r\nexport function padding(vert: CSSLengthPercentage, horiz: CSSLengthPercentage): CssElementStyleProp;\r\nexport function padding(top: CSSLengthPercentage, horiz: CSSLengthPercentage, bot: CSSLengthPercentage): CssElementStyleProp;\r\nexport function padding(top: CSSLengthPercentage, right: CSSLengthPercentage, bot: CSSLengthPercentage, left: CSSLengthPercentage): CssElementStyleProp;\r\nexport function padding(...v: (CSSGlobalValue | CSSLengthPercentage)[]) { return new CssElementStyleProp(\"padding\", v.join(\" \")); }\r\n\r\nexport function paddingBlockEnd(v: CSSGlobalValue | CSSLengthPercentage) { return new CssElementStyleProp(\"paddingBlockEnd\", v); }\r\n\r\nexport function paddingBlockStart(v: CSSGlobalValue | CSSLengthPercentage) { return new CssElementStyleProp(\"paddingBlockStart\", v); }\r\n\r\nexport function paddingBottom(v: CSSGlobalValue | CSSLengthPercentage) { return new CssElementStyleProp(\"paddingBottom\", v); }\r\n\r\nexport function paddingInlineEnd(v: CSSGlobalValue | CSSLengthPercentage) { return new CssElementStyleProp(\"paddingInlineEnd\", v); }\r\n\r\nexport function paddingInlineStart(v: CSSGlobalValue | CSSLengthPercentage) { return new CssElementStyleProp(\"paddingInlineStart\", v); }\r\n\r\nexport function paddingLeft(v: CSSGlobalValue | CSSLengthPercentage) { return new CssElementStyleProp(\"paddingLeft\", v); }\r\n\r\nexport function paddingRight(v: CSSGlobalValue | CSSLengthPercentage) { return new CssElementStyleProp(\"paddingRight\", v); }\r\n\r\nexport function paddingTop(v: CSSGlobalValue | CSSLengthPercentage) { return new CssElementStyleProp(\"paddingTop\", v); }\r\n\r\nexport function pageBreakAfter(v: string) { return new CssElementStyleProp(\"pageBreakAfter\", v); }\r\n\r\nexport function pageBreakBefore(v: string) { return new CssElementStyleProp(\"pageBreakBefore\", v); }\r\n\r\nexport function pageBreakInside(v: string) { return new CssElementStyleProp(\"pageBreakInside\", v); }\r\n\r\nexport function paintOrder(v: string) { return new CssElementStyleProp(\"paintOrder\", v); }\r\n\r\nexport function perspective(v: string) { return new CssElementStyleProp(\"perspective\", v); }\r\n\r\nexport function perspectiveOrigin(v: string) { return new CssElementStyleProp(\"perspectiveOrigin\", v); }\r\n\r\nexport function placeContent(v: string) { return new CssElementStyleProp(\"placeContent\", v); }\r\n\r\nexport function placeItems(v: string) { return new CssElementStyleProp(\"placeItems\", v); }\r\n\r\nexport function placeSelf(v: string) { return new CssElementStyleProp(\"placeSelf\", v); }\r\n\r\nexport function pointerEvents(v: CSSGlobalValue | CSSPointerEventsValue) { return new CssElementStyleProp(\"pointerEvents\", v); }\r\n\r\nexport function position(v: CSSGlobalValue | CSSPositionValue) { return new CssElementStyleProp(\"position\", v); }\r\n\r\nexport function quotes(v: string) { return new CssElementStyleProp(\"quotes\", v); }\r\n\r\nexport function resize(v: string) { return new CssElementStyleProp(\"resize\", v); }\r\n\r\nexport function right(v: CSSElementPositionValue) { return new CssElementStyleProp(\"right\", v); }\r\n\r\nexport function rowGap(v: CSSGlobalValue | CSSLengthPercentage | CSSCalcStatement) { return new CssElementStyleProp(\"rowGap\", v); }\r\nexport function gridRowGap(v: CSSGlobalValue | CSSLengthPercentage | CSSCalcStatement) { return new CssElementStyleProp(\"gridRowGap\", v); }\r\n\r\nexport function rubyPosition(v: string) { return new CssElementStyleProp(\"rubyPosition\", v); }\r\n\r\nexport function scrollBehavior(v: string) { return new CssElementStyleProp(\"scrollBehavior\", v); }\r\n\r\nexport function scrollMargin(v: string | 0) { return new CssElementStyleProp(\"scrollMargin\", v); }\r\n\r\nexport function scrollMarginBlock(v: string) { return new CssElementStyleProp(\"scrollMarginBlock\", v); }\r\n\r\nexport function scrollMarginBlockEnd(v: string) { return new CssElementStyleProp(\"scrollMarginBlockEnd\", v); }\r\n\r\nexport function scrollMarginBlockStart(v: string) { return new CssElementStyleProp(\"scrollMarginBlockStart\", v); }\r\n\r\nexport function scrollMarginBottom(v: string | 0) { return new CssElementStyleProp(\"scrollMarginBottom\", v); }\r\n\r\nexport function scrollMarginInline(v: string) { return new CssElementStyleProp(\"scrollMarginInline\", v); }\r\n\r\nexport function scrollMarginInlineEnd(v: string) { return new CssElementStyleProp(\"scrollMarginInlineEnd\", v); }\r\n\r\nexport function scrollMarginInlineStart(v: string) { return new CssElementStyleProp(\"scrollMarginInlineStart\", v); }\r\n\r\nexport function scrollMarginLeft(v: string | 0) { return new CssElementStyleProp(\"scrollMarginLeft\", v); }\r\n\r\nexport function scrollMarginRight(v: string | 0) { return new CssElementStyleProp(\"scrollMarginRight\", v); }\r\n\r\nexport function scrollMarginTop(v: string | 0) { return new CssElementStyleProp(\"scrollMarginTop\", v); }\r\n\r\nexport function scrollPadding(v: string | 0) { return new CssElementStyleProp(\"scrollPadding\", v); }\r\n\r\nexport function scrollPaddingBlock(v: string) { return new CssElementStyleProp(\"scrollPaddingBlock\", v); }\r\n\r\nexport function scrollPaddingBlockEnd(v: string) { return new CssElementStyleProp(\"scrollPaddingBlockEnd\", v); }\r\n\r\nexport function scrollPaddingBlockStart(v: string) { return new CssElementStyleProp(\"scrollPaddingBlockStart\", v); }\r\n\r\nexport function scrollPaddingBottom(v: string | 0) { return new CssElementStyleProp(\"scrollPaddingBottom\", v); }\r\n\r\nexport function scrollPaddingInline(v: string) { return new CssElementStyleProp(\"scrollPaddingInline\", v); }\r\n\r\nexport function scrollPaddingInlineEnd(v: string) { return new CssElementStyleProp(\"scrollPaddingInlineEnd\", v); }\r\n\r\nexport function scrollPaddingInlineStart(v: string) { return new CssElementStyleProp(\"scrollPaddingInlineStart\", v); }\r\n\r\nexport function scrollPaddingLeft(v: string | 0) { return new CssElementStyleProp(\"scrollPaddingLeft\", v); }\r\n\r\nexport function scrollPaddingRight(v: string | 0) { return new CssElementStyleProp(\"scrollPaddingRight\", v); }\r\n\r\nexport function scrollPaddingTop(v: string | 0) { return new CssElementStyleProp(\"scrollPaddingTop\", v); }\r\n\r\nexport function scrollSnapAlign(v: string) { return new CssElementStyleProp(\"scrollSnapAlign\", v); }\r\n\r\nexport function scrollSnapStop(v: string) { return new CssElementStyleProp(\"scrollSnapStop\", v); }\r\n\r\nexport function scrollSnapType(v: string) { return new CssElementStyleProp(\"scrollSnapType\", v); }\r\n\r\nexport function shapeImageThreshold(v: string) { return new CssElementStyleProp(\"shapeImageThreshold\", v); }\r\n\r\nexport function shapeMargin(v: string) { return new CssElementStyleProp(\"shapeMargin\", v); }\r\n\r\nexport function shapeOutside(v: string) { return new CssElementStyleProp(\"shapeOutside\", v); }\r\n\r\nexport function shapeRendering(v: string) { return new CssElementStyleProp(\"shapeRendering\", v); }\r\n\r\nexport function stopColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"stopColor\", v); }\r\n\r\nexport function stopOpacity(v: string) { return new CssElementStyleProp(\"stopOpacity\", v); }\r\n\r\nexport function stroke(v: string) { return new CssElementStyleProp(\"stroke\", v); }\r\n\r\nexport function strokeDasharray(v: string) { return new CssElementStyleProp(\"strokeDasharray\", v); }\r\n\r\nexport function strokeDashoffset(v: string) { return new CssElementStyleProp(\"strokeDashoffset\", v); }\r\n\r\nexport function strokeLinecap(v: string) { return new CssElementStyleProp(\"strokeLinecap\", v); }\r\n\r\nexport function strokeLinejoin(v: string) { return new CssElementStyleProp(\"strokeLinejoin\", v); }\r\n\r\nexport function strokeMiterlimit(v: string) { return new CssElementStyleProp(\"strokeMiterlimit\", v); }\r\n\r\nexport function strokeOpacity(v: string) { return new CssElementStyleProp(\"strokeOpacity\", v); }\r\n\r\nexport function strokeWidth(v: string | 0) { return new CssElementStyleProp(\"strokeWidth\", v); }\r\n\r\nexport function tabSize(v: string) { return new CssElementStyleProp(\"tabSize\", v); }\r\n\r\nexport function tableLayout(v: string) { return new CssElementStyleProp(\"tableLayout\", v); }\r\n\r\nexport function textAlign(v: CSSGlobalValue | CSSTextAlignValue) { return new CssElementStyleProp(\"textAlign\", v); }\r\n\r\nexport function textAlignLast(v: CSSGlobalValue | CSSTextAlignLastValue) { return new CssElementStyleProp(\"textAlignLast\", v); }\r\n\r\nexport function textAnchor(v: string) { return new CssElementStyleProp(\"textAnchor\", v); }\r\n\r\nexport function textCombineUpright(v: string) { return new CssElementStyleProp(\"textCombineUpright\", v); }\r\n\r\nexport function textDecoration(v: string) { return new CssElementStyleProp(\"textDecoration\", v); }\r\n\r\nexport function textDecorationColor(v: CSSGlobalValue | CSSColorValue) { return new CssElementStyleProp(\"textDecorationColor\", v); }\r\n\r\nexport function textDecorationLine(v: string) { return new CssElementStyleProp(\"textDecorationLine\", v); }\r\n\r\nexport function textDecorationSkipInk(v: string) { return new CssElementStyleProp(\"textDecorationSkipInk\", v); }\r\n\r\nexport function textDecorationStyle(v: string) { return new CssElementStyleProp(\"textDecorationStyle\", v); }\r\n\r\nexport function textIndent(v: string) { return new CssElementStyleProp(\"textIndent\", v); }\r\n\r\nexport function textOrientation(v: string) { return new CssElementStyleProp(\"textOrientation\", v); }\r\n\r\nexport function textOverflow(v: CSSGlobalValue | CSSTextOverflowValue) { return new CssElementStyleProp(\"textOverflow\", v); }\r\n\r\nexport function textRendering(v: string) { return new CssElementStyleProp(\"textRendering\", v); }\r\n\r\nexport function textShadow(v: string) { return new CssElementStyleProp(\"textShadow\", v); }\r\n\r\nexport function textTransform(v: string) { return new CssElementStyleProp(\"textTransform\", v); }\r\n\r\nexport function textUnderlinePosition(v: string) { return new CssElementStyleProp(\"textUnderlinePosition\", v); }\r\n\r\nexport function top(v: CSSElementPositionValue) { return new CssElementStyleProp(\"top\", v); }\r\n\r\nexport function touchAction(v: CSSGlobalValue | CSSTouchActionValue) { return new CssElementStyleProp(\"touchAction\", v); }\r\n\r\nexport function transform(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function transform(perspective: CSSTransformPerspectiveValue, ...rest: CSSTransformValue[]): CssElementStyleProp;\r\nexport function transform(...v: CSSTransformValue[]): CssElementStyleProp;\r\nexport function transform(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"transform\", v.join(\" \")); }\r\n\r\nexport function transformBox(v: CSSGlobalValue | CSSTransformBoxValue) { return new CssElementStyleProp(\"transformBox\", v); }\r\n\r\nexport function transformOrigin(v: CSSGlobalValue): CssElementStyleProp;\r\nexport function transformOrigin(v: CSSLengthPercentage | CSSBackgroundPositionKeyword): CssElementStyleProp;\r\nexport function transformOrigin(x: CSSLengthPercentage | CSSBackgroundPositionHorizontalKeyword, y: CSSLengthPercentage | CSSBackgroundPositionVerticalKeyword): CssElementStyleProp;\r\nexport function transformOrigin(x: CSSLengthPercentage | CSSBackgroundPositionHorizontalKeyword, y: CSSLengthPercentage | CSSBackgroundPositionVerticalKeyword, z: CSSLength): CssElementStyleProp;\r\nexport function transformOrigin(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"transformOrigin\", v.join(\" \")); }\r\n\r\nexport function transformStyle(v: CSSGlobalValue | CSSTransformStyleValue) { return new CssElementStyleProp(\"transformStyle\", v); }\r\n\r\nexport function transition(v: string) { return new CssElementStyleProp(\"transition\", v); }\r\n\r\nexport function transitionDelay(v: string | 0) { return new CssElementStyleProp(\"transitionDelay\", v); }\r\n\r\nexport function transitionDuration(v: string | 0) { return new CssElementStyleProp(\"transitionDuration\", v); }\r\n\r\nexport function transitionProperty(v: string) { return new CssElementStyleProp(\"transitionProperty\", v); }\r\n\r\nexport function transitionTimingFunction(v: string) { return new CssElementStyleProp(\"transitionTimingFunction\", v); }\r\n\r\nexport function unicodeBidi(v: string) { return new CssElementStyleProp(\"unicodeBidi\", v); }\r\n\r\nexport function userSelect(v: string) { return new CssElementStyleProp(\"userSelect\", v); }\r\n\r\nexport function verticalAlign(v: CSSGlobalValue | CSSVerticalAlignValue) { return new CssElementStyleProp(\"verticalAlign\", v); }\r\n\r\nexport function visibility(v: CSSGlobalValue | CSSVisiblityValue) { return new CssElementStyleProp(\"visibility\", v); }\r\n\r\nexport function whiteSpace(v: CSSGlobalValue | CSSWhiteSpaceValue) { return new CssElementStyleProp(\"whiteSpace\", v); }\r\n\r\nexport function widows(v: CSSGlobalValue | number) { return new CssElementStyleProp(\"widows\", asInt(v)); }\r\n\r\nexport function width(v: CSSGlobalValue | CSSSizePropertyValue) { return new CssElementStyleProp(\"width\", v); }\r\n\r\nexport function willChange(v: string) { return new CssElementStyleProp(\"willChange\", v); }\r\n\r\nexport function wordBreak(v: string) { return new CssElementStyleProp(\"wordBreak\", v); }\r\n\r\nexport function wordSpacing(v: string) { return new CssElementStyleProp(\"wordSpacing\", v); }\r\n\r\nexport function wordWrap(v: CSSGlobalValue | CSSWordWrapValue) { return new CssElementStyleProp(\"wordWrap\", v); }\r\n\r\nexport function writingMode(v: CSSGlobalValue | CSSWritingModeValue) { return new CssElementStyleProp(\"writingMode\", v); }\r\n\r\nexport function zIndex(v: number) { return new CssElementStyleProp(\"zIndex\", asInt(v)); }\r\n\r\nclass CssRegularAtRuleSet<T extends CSSAtRuleRegular = CSSAtRuleRegular> extends PropSet<Prop> {\r\n    constructor(selector: T, value: string) {\r\n        super(\"@\" + selector + \" \", [new Prop(value)], \";\");\r\n    }\r\n}\r\n\r\nexport function cssCharset(value: string) {\r\n    return new CssRegularAtRuleSet(\"charset\", value);\r\n}\r\n\r\nexport function cssImport(value: string) {\r\n    return new CssRegularAtRuleSet(\"import\", value);\r\n}\r\n\r\nexport function cssNamespace(value: string) {\r\n    return new CssRegularAtRuleSet(\"namespace\", value);\r\n}\r\n\r\nclass CssColorProfileProp<T extends CSSColorProfilePropName = CSSColorProfilePropName> extends CssDeclareProp {\r\n    constructor(name: T, value: string) {\r\n        super(name, value);\r\n    }\r\n}\r\n\r\nexport function colorProfile(name: CSSDashedName, src: string, renderingIntent: CssColorProfileProp<\"rendering-intent\">): PropSet;\r\nexport function colorProfile(name: CSSDashedName, src: string, components: CssColorProfileProp<\"components\">): PropSet;\r\nexport function colorProfile(name: CSSDashedName, src: string, renderingIntent: CssColorProfileProp<\"rendering-intent\">, components: CssColorProfileProp<\"components\">): PropSet;\r\nexport function colorProfile(name: CSSDashedName, src: string, ...props: CssColorProfileProp[]): PropSet {\r\n    props.unshift(new CssColorProfileProp(\"src\", src));\r\n    return new SelectorPropSet(\"@color-profile \" + name, props);\r\n}\r\n\r\nexport function renderingIntent(value: CSSRenderingIntentValue): CssColorProfileProp { return new CssColorProfileProp(\"rendering-intent\", value); }\r\n\r\nexport function components(...names: string[]) { return new CssColorProfileProp(\"components\", names.join(\", \")); }\r\n\r\nclass CssCounterStyleProp<T extends CSSCounterStylePropName = CSSCounterStylePropName> extends CssDeclareProp {\r\n    constructor(name: T, value: string) {\r\n        super(name, value);\r\n    }\r\n}\r\n\r\nexport function counterStyle(name: string, ...props: CssCounterStyleProp[]): PropSet {\r\n    return new SelectorPropSet(`@counter-style ${name}`, props);\r\n}\r\n\r\nexport function system(value: CSSCounterStyleSystemValue) { return new CssCounterStyleProp(\"system\", value); }\r\n\r\nexport function negative(value: string) { return new CssCounterStyleProp(\"negative\", value); }\r\n\r\nexport function prefix(value: string) { return new CssCounterStyleProp(\"prefix\", value); }\r\n\r\nexport function suffix(value: string) { return new CssCounterStyleProp(\"suffix\", value); }\r\n\r\nexport function range(value: CSSCounterStyleRangeValue | \"auto\"): CssCounterStyleProp<\"range\">;\r\nexport function range(...v: CSSCounterStyleRangeValue[]): CssCounterStyleProp<\"range\">;\r\nexport function range(...v: string[]): CssCounterStyleProp<\"range\"> { return new CssCounterStyleProp(\"range\", v.join(\", \")); }\r\n\r\nexport function pad(count: number, symbol: string) { return new CssCounterStyleProp(\"pad\", `${asInt(count)} ${JSON.stringify(symbol)}`); }\r\n\r\nexport function fallback(value: string) { return new CssCounterStyleProp(\"fallback\", value); }\r\n\r\nexport function symbols(value: string) { return new CssCounterStyleProp(\"symbols\", value); }\r\n\r\nexport function additiveSymbols(...v: string[]) { return new CssCounterStyleProp(\"additive-symbols\", v.join(\", \")); }\r\n\r\nexport function speakAs(value: string) { return new CssCounterStyleProp(\"speak-as\", value); }\r\n\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@font-feature-values\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes\r\n\r\nexport function layer(...names: string[]): PropSet;\r\nexport function layer(name: string, ...rules: PropSet[]): PropSet;\r\nexport function layer(...rules: PropSet[]): PropSet;\r\nexport function layer(...namesOrRules: (PropSet | string)[]) {\r\n    const names = [\r\n        ...namesOrRules.filter(isString)\r\n    ];\r\n\r\n    const rules = namesOrRules.filter(v => v instanceof PropSet) as PropSet[];\r\n\r\n    if (names.length === 0 && rules.length === 0) {\r\n        throw new Error(\"Layer names and/or rules are not defined.\");\r\n    }\r\n    if (names.length > 1 && rules.length > 0) {\r\n        throw new Error(\"Cannot define multiple layers and rules at the same time\")\r\n    }\r\n    else if (names.length === 0) {\r\n        return new SelectorPropSet(\"@layer\", rules);\r\n    }\r\n    else {\r\n        const layerList = names.join(\", \");\r\n        if (names.length > 1 || rules.length === 0) {\r\n            return new CssRegularAtRuleSet(\"layer\", layerList);\r\n        }\r\n        else {\r\n            return new SelectorPropSet(\"@layer \" + layerList, rules);\r\n        }\r\n    }\r\n}\r\n\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@media\r\nexport function media(query: string, ...props: PropSet[]) {\r\n    return new SelectorPropSet(\"@media \" + query, props);\r\n}\r\n\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@page\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@supports\r\n", "import { once } from \"@juniper-lib/tslib/events/once\";\r\nimport { IProgress } from \"@juniper-lib/tslib/progress/IProgress\";\r\nimport { isBoolean, isDate, isDefined, isFunction, isNumber, isObject, isString } from \"@juniper-lib/tslib/typeChecks\";\r\nimport { Attr, autoPlay, classList, className, controls, htmlFor, loop, muted, playsInline, type } from \"./attrs\";\r\nimport { display, margin, PropSet } from \"./css\";\r\n\r\nexport interface ErsatzElement<T extends Element = Element> {\r\n    element: T;\r\n}\r\n\r\nexport function isErsatzElement<T extends Element = Element>(obj: any): obj is ErsatzElement<T> {\r\n    if (!isObject(obj)) {\r\n        return false;\r\n    }\r\n\r\n    const elem = obj as ErsatzElement;\r\n    return elem.element instanceof Element;\r\n}\r\n\r\nexport type Elements<T extends Element = Element> = T | ErsatzElement<T>;\r\n\r\nexport function resolveElement<T extends Element = HTMLElement>(elem: Elements<T>): T {\r\n    if (isErsatzElement(elem)) {\r\n        return elem.element;\r\n    }\r\n\r\n    return elem;\r\n}\r\n\r\nexport interface IElementAppliable<T extends Element = Element> {\r\n    applyToElement(x: Elements<T>): void;\r\n}\r\n\r\nexport function isIElementAppliable<T extends Element = Element>(obj: any): obj is IElementAppliable<T> {\r\n    return isObject(obj)\r\n        && \"applyToElement\" in obj\r\n        && isFunction((obj as any).applyToElement);\r\n}\r\n\r\nexport type ElementChild<T extends Element = Element> = Elements<T>\r\n    | IElementAppliable\r\n    | string\r\n    | number\r\n    | boolean\r\n    | Date;\r\n\r\nexport function isElementChild(obj: any): obj is ElementChild {\r\n    return obj instanceof Element\r\n        || isErsatzElement(obj)\r\n        || isIElementAppliable(obj)\r\n        || isString(obj)\r\n        || isNumber(obj)\r\n        || isBoolean(obj)\r\n        || isDate(obj);\r\n}\r\n\r\nexport function isElements(child: ElementChild): child is Elements {\r\n    return isErsatzElement(child)\r\n        || child instanceof Element;\r\n}\r\n\r\nexport interface IFocusable {\r\n    focus(): void;\r\n}\r\n\r\nexport function isFocusable(elem: any): elem is IFocusable {\r\n    return \"focus\" in elem && isFunction((elem as IFocusable).focus);\r\n}\r\n\r\nexport function elementSetDisplay<T extends HTMLElement = HTMLElement>(elem: Elements<T>, visible: boolean, visibleDisplayType: string = \"\"): void {\r\n    elem = resolveElement(elem);\r\n    elem.style.display = visible ? visibleDisplayType : \"none\";\r\n}\r\n\r\nexport function elementIsDisplayed<T extends HTMLElement = HTMLElement>(elem: Elements<T>): boolean {\r\n    elem = resolveElement(elem);\r\n    return elem.style.display !== \"none\";\r\n}\r\n\r\nexport function elementToggleDisplay<T extends HTMLElement = HTMLElement>(elem: Elements<T>, visibleDisplayType: string = \"block\"): void {\r\n    elementSetDisplay(elem, !elementIsDisplayed(elem), visibleDisplayType);\r\n}\r\n\r\nexport function elementInsertBefore(parent: Elements, newElem: Elements, refElem: Elements): void {\r\n    parent = resolveElement(parent);\r\n    newElem = resolveElement(newElem);\r\n    refElem = resolveElement(refElem);\r\n    if (parent && newElem) {\r\n        parent.insertBefore(newElem, refElem);\r\n    }\r\n}\r\n\r\nexport function elementGetIndexInParent(elem: Elements): number {\r\n    elem = resolveElement(elem);\r\n\r\n    if (elem.parentElement) {\r\n        for (let i = 0; i < elem.parentElement.childElementCount; ++i) {\r\n            if (elem.parentElement.children[i] === elem) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function elementGetCustomData(elem: Elements<HTMLElement>, name: Lowercase<string>): string {\r\n    elem = resolveElement(elem);\r\n    return elem.dataset[name.toLowerCase()];\r\n}\r\n\r\nexport function elementApply(elem: Elements, ...children: ElementChild[]): Elements {\r\n    elem = resolveElement(elem);\r\n\r\n    for (const child of children) {\r\n        if (isDefined(child)) {\r\n            if (child instanceof Node) {\r\n                elem.append(child);\r\n            }\r\n            else if (isErsatzElement(child)) {\r\n                elem.append(resolveElement(child));\r\n            }\r\n            else if (isIElementAppliable(child)) {\r\n                child.applyToElement(elem);\r\n            }\r\n            else {\r\n                elem.append(document.createTextNode(child.toLocaleString()));\r\n            }\r\n        }\r\n    }\r\n\r\n    return elem;\r\n}\r\n\r\nexport function elementReplace(elem: Elements, ...elems: Elements[]): Elements {\r\n    elem = resolveElement(elem);\r\n    elem.replaceWith(...elems.map(resolveElement));\r\n    return elem;\r\n}\r\n\r\nexport function elementSwap<T extends Elements>(elem: Elements, withPlaceholder: (placeholder: Elements) => T): T {\r\n    const placeholder = Div();\r\n    const e = withPlaceholder(placeholder);\r\n    elementReplace(placeholder, elementReplace(elem, e));\r\n    return e;\r\n}\r\n\r\nexport function getElement<T extends Element = HTMLElement>(selector: string): T {\r\n    return document.querySelector<T>(selector);\r\n}\r\n\r\nexport function getButton(selector: string) {\r\n    return getElement<HTMLButtonElement>(selector);\r\n}\r\n\r\nexport function getInput(selector: string) {\r\n    return getElement<HTMLInputElement>(selector);\r\n}\r\n\r\nexport function getSelect(selector: string) {\r\n    return getElement<HTMLSelectElement>(selector);\r\n}\r\n\r\nexport function getCanvas(selector: string) {\r\n    return getElement<HTMLCanvasElement>(selector);\r\n}\r\n\r\n/**\r\n * Creates an HTML element for a given tag name.\r\n * \r\n * Boolean attributes that you want to default to true can be passed\r\n * as just the attribute creating function, \r\n *   e.g. `Audio(autoPlay)` vs `Audio(autoPlay(true))`\r\n * @param name - the name of the tag\r\n * @param rest - optional attributes, child elements, and text\r\n * @returns\r\n */\r\nexport function tag<K extends keyof HTMLElementTagNameMap>(name: K, ...rest: ElementChild[]): HTMLElementTagNameMap[K] {\r\n    let elem: HTMLElementTagNameMap[K] = null;\r\n\r\n    for (const attr of rest) {\r\n        if (attr instanceof Attr && attr.key === \"id\") {\r\n            elem = document.getElementById(attr.value) as HTMLElementTagNameMap[K];\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (elem == null) {\r\n        elem = document.createElement(name);\r\n    }\r\n\r\n    elementApply(elem, ...rest);\r\n\r\n    return elem;\r\n}\r\n\r\nexport interface IDisableable {\r\n    disabled: boolean;\r\n}\r\n\r\nexport function isDisableable(obj: any): obj is IDisableable {\r\n    return \"disabled\" in obj\r\n        && isBoolean(obj.disabled);\r\n}\r\n\r\n/**\r\n * Empty an element of all children. This is faster than setting `innerHTML = \"\"`.\r\n */\r\nexport function elementClearChildren(elem: Elements) {\r\n    elem = resolveElement(elem);\r\n    while (elem.lastChild) {\r\n        elem.lastChild.remove();\r\n    }\r\n}\r\n\r\nexport function elementSetText(elem: Elements<HTMLElement>, text: string): void {\r\n    elem = resolveElement(elem);\r\n    elementClearChildren(elem);\r\n    elem.append(TextNode(text));\r\n}\r\n\r\nexport function elementGetText(elem: Elements<HTMLElement>): string {\r\n    elem = resolveElement(elem);\r\n    return elem.innerText;\r\n}\r\n\r\nexport function elementSetTitle(elem: Elements<HTMLElement>, text: string): void {\r\n    elem = resolveElement(elem);\r\n    elem.title = text;\r\n}\r\n\r\nexport function elementSetClass(elem: Elements, enabled: boolean, className: string) {\r\n    elem = resolveElement(elem);\r\n    const canEnable = isDefined(className);\r\n    const hasEnabled = canEnable && elem.classList.contains(className);\r\n\r\n    if (canEnable && hasEnabled !== enabled) {\r\n        elem.classList.toggle(className);\r\n    }\r\n}\r\n\r\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, enabled: boolean, label: string, title: string) {\r\n    button = resolveElement(button);\r\n    button.disabled = !enabled;\r\n    elementSetText(button, label);\r\n    elementSetTitle(button, title);\r\n}\r\n\r\n\r\nasync function mediaElementCan(type: \"canplay\" | \"canplaythrough\", elem: HTMLMediaElement, prog?: IProgress): Promise<boolean> {\r\n    if (isDefined(prog)) {\r\n        prog.start();\r\n    }\r\n\r\n    const expectedState = type === \"canplay\"\r\n        ? elem.HAVE_CURRENT_DATA\r\n        : elem.HAVE_ENOUGH_DATA;\r\n\r\n    if (elem.readyState >= expectedState) {\r\n        return true;\r\n    }\r\n\r\n    try {\r\n        await once<HTMLMediaElementEventMap>(elem, type, \"error\");\r\n        return true;\r\n    }\r\n    catch (err) {\r\n        console.warn(elem.error, err);\r\n        return false;\r\n    }\r\n    finally {\r\n        if (isDefined(prog)) {\r\n            prog.end();\r\n        }\r\n    }\r\n}\r\n\r\nexport function mediaElementCanPlay(elem: HTMLMediaElement, prog?: IProgress): Promise<boolean> {\r\n    return mediaElementCan(\"canplay\", elem, prog);\r\n}\r\n\r\nexport function mediaElementCanPlayThrough(elem: HTMLMediaElement, prog?: IProgress): Promise<boolean> {\r\n    return mediaElementCan(\"canplaythrough\", elem, prog);\r\n}\r\n\r\nexport function A(...rest: ElementChild[]): HTMLAnchorElement { return tag(\"a\", ...rest); }\r\nexport function Abbr(...rest: ElementChild[]): HTMLElement { return tag(\"abbr\", ...rest); }\r\nexport function Address(...rest: ElementChild[]): HTMLElement { return tag(\"address\", ...rest); }\r\nexport function Area(...rest: ElementChild[]): HTMLAreaElement { return tag(\"area\", ...rest); }\r\nexport function Article(...rest: ElementChild[]): HTMLElement { return tag(\"article\", ...rest); }\r\nexport function Aside(...rest: ElementChild[]): HTMLElement { return tag(\"aside\", ...rest); }\r\nexport function Audio(...rest: ElementChild[]): HTMLAudioElement { return tag(\"audio\", ...rest); }\r\nexport function B(...rest: ElementChild[]): HTMLElement { return tag(\"b\", ...rest); }\r\nexport function Base(...rest: ElementChild[]): HTMLBaseElement { return tag(\"base\", ...rest); }\r\nexport function BDI(...rest: ElementChild[]): HTMLElement { return tag(\"bdi\", ...rest); }\r\nexport function BDO(...rest: ElementChild[]): HTMLElement { return tag(\"bdo\", ...rest); }\r\nexport function BlockQuote(...rest: ElementChild[]): HTMLQuoteElement { return tag(\"blockquote\", ...rest); }\r\nexport function Body(...rest: ElementChild[]): HTMLBodyElement { return tag(\"body\", ...rest); }\r\nexport function BR(): HTMLBRElement { return tag(\"br\"); }\r\nexport function ButtonRaw(...rest: ElementChild[]): HTMLButtonElement { return tag(\"button\", ...rest); }\r\nexport function Button(...rest: ElementChild[]): HTMLButtonElement { return ButtonRaw(...rest, type(\"button\")); }\r\nexport function ButtonSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-sm\")); }\r\nexport function ButtonPrimary(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-primary\")); }\r\nexport function ButtonPrimaryOutline(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-outline-primary\")); }\r\nexport function ButtonPrimarySmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-sm\", \"btn-primary\")); }\r\nexport function ButtonPrimaryOutlineSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-sm\", \"btn-outline-primary\")); }\r\nexport function ButtonSecondary(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-secondary\")); }\r\nexport function ButtonSecondaryOutline(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-outline-secondary\")); }\r\nexport function ButtonSecondarySmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-sm\", \"btn-secondary\")); }\r\nexport function ButtonSecondaryOutlineSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-sm\", \"btn-outline-secondary\")); }\r\nexport function ButtonDanger(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-danger\")); }\r\nexport function ButtonDangerOutline(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-outline-danger\")); }\r\nexport function ButtonDangerSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-sm\", \"btn-danger\")); }\r\nexport function ButtonDangerOutlineSmalle(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, classList(\"btn\", \"btn-sm\", \"btn-outline-danger\")); }\r\nexport function ButtonSubmit(...rest: ElementChild[]): HTMLButtonElement { return ButtonRaw(...rest, type(\"submit\")); }\r\nexport function ButtonReset(...rest: ElementChild[]): HTMLButtonElement { return ButtonRaw(...rest, type(\"reset\")); }\r\nexport function Canvas(...rest: ElementChild[]): HTMLCanvasElement { return tag(\"canvas\", ...rest); }\r\nexport function Caption(...rest: ElementChild[]): HTMLTableCaptionElement { return tag(\"caption\", ...rest); }\r\nexport function Cite(...rest: ElementChild[]): HTMLElement { return tag(\"cite\", ...rest); }\r\nexport function Code(...rest: ElementChild[]): HTMLElement { return tag(\"code\", ...rest); }\r\nexport function Col(...rest: ElementChild[]): HTMLTableColElement { return tag(\"col\", ...rest); }\r\nexport function ColGroup(...rest: ElementChild[]): HTMLTableColElement { return tag(\"colgroup\", ...rest); }\r\nexport function Data(...rest: ElementChild[]): HTMLDataElement { return tag(\"data\", ...rest); }\r\nexport function DataList(...rest: ElementChild[]): HTMLDataListElement { return tag(\"datalist\", ...rest); }\r\nexport function DD(...rest: ElementChild[]): HTMLElement { return tag(\"dd\", ...rest); }\r\nexport function Del(...rest: ElementChild[]): HTMLModElement { return tag(\"del\", ...rest); }\r\nexport function Details(...rest: ElementChild[]): HTMLDetailsElement { return tag(\"details\", ...rest); }\r\nexport function DFN(...rest: ElementChild[]): HTMLElement { return tag(\"dfn\", ...rest); }\r\nexport function Dialog(...rest: ElementChild[]): HTMLDialogElement { return tag(\"dialog\", ...rest); }\r\nexport function Div(...rest: ElementChild[]): HTMLDivElement { return tag(\"div\", ...rest); }\r\nexport function DL(...rest: ElementChild[]): HTMLDListElement { return tag(\"dl\", ...rest); }\r\nexport function DT(...rest: ElementChild[]): HTMLElement { return tag(\"dt\", ...rest); }\r\nexport function Em(...rest: ElementChild[]): HTMLElement { return tag(\"em\", ...rest); }\r\nexport function Embed(...rest: ElementChild[]): HTMLEmbedElement { return tag(\"embed\", ...rest); }\r\nexport function FieldSet(...rest: ElementChild[]): HTMLFieldSetElement { return tag(\"fieldset\", ...rest); }\r\nexport function FigCaption(...rest: ElementChild[]): HTMLElement { return tag(\"figcaption\", ...rest); }\r\nexport function Figure(...rest: ElementChild[]): HTMLElement { return tag(\"figure\", ...rest); }\r\nexport function Footer(...rest: ElementChild[]): HTMLElement { return tag(\"footer\", ...rest); }\r\nexport function Form(...rest: ElementChild[]): HTMLFormElement { return tag(\"form\", ...rest); }\r\nexport function H1(...rest: ElementChild[]): HTMLHeadingElement { return tag(\"h1\", ...rest); }\r\nexport function H2(...rest: ElementChild[]): HTMLHeadingElement { return tag(\"h2\", ...rest); }\r\nexport function H3(...rest: ElementChild[]): HTMLHeadingElement { return tag(\"h3\", ...rest); }\r\nexport function H4(...rest: ElementChild[]): HTMLHeadingElement { return tag(\"h4\", ...rest); }\r\nexport function H5(...rest: ElementChild[]): HTMLHeadingElement { return tag(\"h5\", ...rest); }\r\nexport function H6(...rest: ElementChild[]): HTMLHeadingElement { return tag(\"h6\", ...rest); }\r\nexport function HR(...rest: ElementChild[]): HTMLHRElement { return tag(\"hr\", ...rest); }\r\nexport function Head(...rest: ElementChild[]): HTMLHeadElement { return tag(\"head\", ...rest); }\r\nexport function Header(...rest: ElementChild[]): HTMLElement { return tag(\"header\", ...rest); }\r\nexport function HGroup(...rest: ElementChild[]): HTMLElement { return tag(\"hgroup\", ...rest); }\r\nexport function HTML(...rest: ElementChild[]): HTMLElement { return tag(\"html\", ...rest); }\r\nexport function I(...rest: ElementChild[]): HTMLElement { return tag(\"i\", ...rest); }\r\nexport function FAIcon(iconName: string, ...rest: ElementChild[]): HTMLElement { return I(className(`fa fa-${iconName}`), ...rest); }\r\nexport function IFrame(...rest: ElementChild[]): HTMLIFrameElement { return tag(\"iframe\", ...rest); }\r\nexport function Img(...rest: ElementChild[]): HTMLImageElement { return tag(\"img\", ...rest); }\r\nexport function Input(...rest: ElementChild[]): HTMLInputElement { return tag(\"input\", ...rest); }\r\nexport function Ins(...rest: ElementChild[]): HTMLModElement { return tag(\"ins\", ...rest); }\r\nexport function KBD(...rest: ElementChild[]): HTMLElement { return tag(\"kbd\", ...rest); }\r\nexport function Label(...rest: ElementChild[]): HTMLLabelElement { return tag(\"label\", ...rest); }\r\nexport function PreLabeled<T extends Elements>(id: string, label: ElementChild, input: T): [HTMLLabelElement, T] {\r\n    resolveElement(input).id = id;\r\n    return [\r\n        Label(htmlFor(id), label),\r\n        input\r\n    ];\r\n}\r\nexport function PostLabeled<T extends Elements>(id: string, label: ElementChild, input: T): [T, HTMLLabelElement] {\r\n    resolveElement(input).id = id;\r\n    return [\r\n        input,\r\n        Label(htmlFor(id), label)\r\n    ];\r\n}\r\nexport function Legend(...rest: ElementChild[]) { return tag(\"legend\", ...rest); }\r\nexport function LI(...rest: ElementChild[]) { return tag(\"li\", ...rest); }\r\nexport function Link(...rest: ElementChild[]) { return tag(\"link\", ...rest); }\r\nexport function Main(...rest: ElementChild[]) { return tag(\"main\", ...rest); }\r\nexport function HtmlMap(...rest: ElementChild[]) { return tag(\"map\", ...rest); }\r\nexport function Mark(...rest: ElementChild[]) { return tag(\"mark\", ...rest); }\r\nexport function Menu(...rest: ElementChild[]) { return tag(\"menu\", ...rest); }\r\nexport function Meta(...rest: ElementChild[]) { return tag(\"meta\", ...rest); }\r\nexport function Meter(...rest: ElementChild[]) { return tag(\"meter\", ...rest); }\r\nexport function Nav(...rest: ElementChild[]) { return tag(\"nav\", ...rest); }\r\nexport function NoScript(...rest: ElementChild[]) { return tag(\"noscript\", ...rest); }\r\nexport function HtmlObject(...rest: ElementChild[]) { return tag(\"object\", ...rest); }\r\nexport function OL(...rest: ElementChild[]) { return tag(\"ol\", ...rest); }\r\nexport function OptGroup(...rest: ElementChild[]) { return tag(\"optgroup\", ...rest); }\r\nexport function Option(...rest: ElementChild[]) { return tag(\"option\", ...rest); }\r\nexport function Output(...rest: ElementChild[]) { return tag(\"output\", ...rest); }\r\nexport function P(...rest: ElementChild[]) { return tag(\"p\", ...rest); }\r\nexport function Picture(...rest: ElementChild[]) { return tag(\"picture\", ...rest); }\r\nexport function Pre(...rest: ElementChild[]) { return tag(\"pre\", ...rest); }\r\nexport function Progress(...rest: ElementChild[]) { return tag(\"progress\", ...rest); }\r\nexport function Q(...rest: ElementChild[]) { return tag(\"q\", ...rest); }\r\nexport function RP(...rest: ElementChild[]) { return tag(\"rp\", ...rest); }\r\nexport function RT(...rest: ElementChild[]) { return tag(\"rt\", ...rest); }\r\nexport function Ruby(...rest: ElementChild[]) { return tag(\"ruby\", ...rest); }\r\nexport function S(...rest: ElementChild[]) { return tag(\"s\", ...rest); }\r\nexport function Samp(...rest: ElementChild[]) { return tag(\"samp\", ...rest); }\r\nexport function Script(...rest: ElementChild[]) { return tag(\"script\", ...rest); }\r\nexport function Section(...rest: ElementChild[]) { return tag(\"section\", ...rest); }\r\nexport function Select(...rest: ElementChild[]) { return tag(\"select\", ...rest); }\r\nexport function Slot(...rest: ElementChild[]) { return tag(\"slot\", ...rest); }\r\nexport function Small(...rest: ElementChild[]) { return tag(\"small\", ...rest); }\r\nexport function Source(...rest: ElementChild[]) { return tag(\"source\", ...rest); }\r\nexport function Span(...rest: ElementChild[]) { return tag(\"span\", ...rest); }\r\nexport function Strong(...rest: ElementChild[]) { return tag(\"strong\", ...rest); }\r\nexport function Sub(...rest: ElementChild[]) { return tag(\"sub\", ...rest); }\r\nexport function Summary(...rest: ElementChild[]) { return tag(\"summary\", ...rest); }\r\nexport function Sup(...rest: ElementChild[]) { return tag(\"sup\", ...rest); }\r\nexport function Table(...rest: ElementChild[]) { return tag(\"table\", ...rest); }\r\nexport function TBody(...rest: ElementChild[]) { return tag(\"tbody\", ...rest); }\r\nexport function TD(...rest: ElementChild[]) { return tag(\"td\", ...rest); }\r\nexport function Template(...rest: ElementChild[]) { return tag(\"template\", ...rest); }\r\nexport function TextArea(...rest: ElementChild[]) { return tag(\"textarea\", ...rest); }\r\nexport function TFoot(...rest: ElementChild[]) { return tag(\"tfoot\", ...rest); }\r\nexport function TH(...rest: ElementChild[]) { return tag(\"th\", ...rest); }\r\nexport function THead(...rest: ElementChild[]) { return tag(\"thead\", ...rest); }\r\nexport function Time(...rest: ElementChild[]) { return tag(\"time\", ...rest); }\r\nexport function Title(...rest: ElementChild[]) { return tag(\"title\", ...rest); }\r\nexport function TR(...rest: ElementChild[]) { return tag(\"tr\", ...rest); }\r\nexport function Track(...rest: ElementChild[]) { return tag(\"track\", ...rest); }\r\nexport function U(...rest: ElementChild[]) { return tag(\"u\", ...rest); }\r\nexport function UL(...rest: ElementChild[]) { return tag(\"ul\", ...rest); }\r\nexport function Var(...rest: ElementChild[]) { return tag(\"var\", ...rest); }\r\nexport function Video(...rest: ElementChild[]) { return tag(\"video\", ...rest); }\r\nexport function WBR() { return tag(\"wbr\"); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a button.\r\n */\r\nexport function InputButton(...rest: ElementChild[]) { return Input(type(\"button\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a checkbox.\r\n */\r\nexport function InputCheckbox(...rest: ElementChild[]) { return Input(type(\"checkbox\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a color picker.\r\n */\r\nexport function InputColor(...rest: ElementChild[]) { return Input(type(\"color\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a date picker.\r\n */\r\nexport function InputDate(...rest: ElementChild[]) { return Input(type(\"date\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a local date-time picker.\r\n */\r\nexport function InputDateTime(...rest: ElementChild[]) { return Input(type(\"datetime-local\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is an email entry field.\r\n */\r\nexport function InputEmail(...rest: ElementChild[]) { return Input(type(\"email\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a file picker.\r\n */\r\nexport function InputFile(...rest: ElementChild[]) { return Input(type(\"file\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a hidden field.\r\n */\r\nexport function InputHidden(...rest: ElementChild[]) { return Input(type(\"hidden\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a graphical submit button.\r\n */\r\nexport function InputImage(...rest: ElementChild[]) { return Input(type(\"image\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a month picker.\r\n */\r\nexport function InputMonth(...rest: ElementChild[]) { return Input(type(\"month\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a month picker.\r\n */\r\nexport function InputNumber(...rest: ElementChild[]) { return Input(type(\"number\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a password entry field.\r\n */\r\nexport function InputPassword(...rest: ElementChild[]) { return Input(type(\"password\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a radio button.\r\n */\r\nexport function InputRadio(...rest: ElementChild[]) { return Input(type(\"radio\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a range selector.\r\n */\r\nexport function InputRange(...rest: ElementChild[]) { return Input(type(\"range\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a form reset button.\r\n */\r\nexport function InputReset(...rest: ElementChild[]) { return Input(type(\"reset\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a search entry field.\r\n */\r\nexport function InputSearch(...rest: ElementChild[]) { return Input(type(\"search\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a submit button.\r\n */\r\nexport function InputSubmit(...rest: ElementChild[]) { return Input(type(\"submit\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a telephone number entry field.\r\n */\r\nexport function InputTelephone(...rest: ElementChild[]) { return Input(type(\"tel\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a text entry field.\r\n */\r\nexport function InputText(...rest: ElementChild[]) { return Input(type(\"text\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a time picker.\r\n */\r\nexport function InputTime(...rest: ElementChild[]) { return Input(type(\"time\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a URL entry field.\r\n */\r\nexport function InputURL(...rest: ElementChild[]) { return Input(type(\"url\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a week picker.\r\n */\r\nexport function InputWeek(...rest: ElementChild[]) { return Input(type(\"week\"), ...rest); }\r\n\r\n/**\r\n * Creates a text node out of the give input.\r\n */\r\nexport function TextNode(txt: any) {\r\n    return document.createTextNode(txt);\r\n}\r\n\r\n/**\r\n * Creates a Div element with margin: auto.\r\n */\r\nexport function Run(...rest: ElementChild[]) {\r\n    return Div(\r\n        margin(\"auto\"),\r\n        ...rest);\r\n}\r\n\r\nexport function Style(...props: PropSet[]) {\r\n    const elem = document.createElement(\"style\");\r\n    document.head.append(elem);\r\n\r\n    for (let prop of props) {\r\n        prop.applyToSheet(elem.sheet);\r\n    }\r\n}\r\n\r\nexport function BackgroundAudio(autoplay: boolean, mute: boolean, looping: boolean, ...rest: ElementChild[]) {\r\n    return Audio(\r\n        playsInline(true),\r\n        controls(false),\r\n        muted(mute),\r\n        autoPlay(autoplay),\r\n        loop(looping),\r\n        display(\"none\"),\r\n        ...rest);\r\n}\r\n\r\nexport function BackgroundVideo(autoplay: boolean, mute: boolean, looping: boolean, ...rest: ElementChild[]) {\r\n    return Video(\r\n        playsInline(true),\r\n        controls(false),\r\n        muted(mute),\r\n        autoPlay(autoplay),\r\n        loop(looping),\r\n        display(\"none\"),\r\n        ...rest);\r\n}", "import { once } from \"@juniper-lib/tslib/events/once\";\r\nimport { Task } from \"@juniper-lib/tslib/events/Task\";\r\nimport { isDefined, isNullOrUndefined } from \"@juniper-lib/tslib/typeChecks\";\r\nimport { htmlHeight, htmlWidth, src } from \"./attrs\";\r\nimport { Canvas, Img } from \"./tags\";\r\n\r\nexport type CanvasTypes = HTMLCanvasElement | OffscreenCanvas;\r\nexport type CanvasImageTypes = HTMLImageElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap;\r\nexport type Context2D = CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\r\nexport type GraphicsContext = RenderingContext | OffscreenCanvasRenderingContext2D;\r\n\r\ndeclare const IS_WORKER: boolean;\r\nexport const hasHTMLCanvas = /*@__PURE__*/ !IS_WORKER && \"HTMLCanvasElement\" in globalThis;\r\nexport const hasHTMLImage = /*@__PURE__*/ !IS_WORKER && \"HTMLImageElement\" in globalThis;\r\nexport const disableAdvancedSettings = /*@__PURE__*/ false;\r\nexport const hasOffscreenCanvas = /*@__PURE__*/ !disableAdvancedSettings && \"OffscreenCanvas\" in globalThis;\r\nexport const hasImageBitmap = /*@__PURE__*/ !disableAdvancedSettings && \"createImageBitmap\" in globalThis;\r\n\r\nexport function isHTMLCanvas(obj: any): obj is HTMLCanvasElement {\r\n    return !IS_WORKER && hasHTMLCanvas && obj instanceof HTMLCanvasElement;\r\n}\r\n\r\nexport function isHTMLImage(img: any): img is HTMLImageElement {\r\n    return !IS_WORKER && hasHTMLImage && img instanceof HTMLImageElement;\r\n}\r\n\r\nexport function isOffscreenCanvas(obj: any): obj is OffscreenCanvas {\r\n    return hasOffscreenCanvas && obj instanceof OffscreenCanvas;\r\n}\r\n\r\nexport function isImageBitmap(img: any): img is ImageBitmap {\r\n    return hasImageBitmap && img instanceof ImageBitmap;\r\n}\r\n\r\nexport function isImageData(img: any): img is ImageData {\r\n    return img instanceof ImageData;\r\n}\r\n\r\n/**\r\n * Returns true if the given object is either an HTMLCanvasElement or an OffscreenCanvas.\r\n */\r\nexport function isCanvas(obj: any): obj is CanvasTypes {\r\n    return isHTMLCanvas(obj)\r\n        || isOffscreenCanvas(obj);\r\n}\r\n\r\nexport function isCanvasArray(arr: any): arr is CanvasTypes[] {\r\n    return isDefined(arr)\r\n        && arr.length > 0\r\n        && isCanvas(arr[0]);\r\n}\r\n\r\nexport function drawImageBitmapToCanvas(canv: CanvasTypes, img: ImageBitmap): void {\r\n    const g = canv.getContext(\"2d\");\r\n    if (isNullOrUndefined(g)) {\r\n        throw new Error(\"Could not create 2d context for canvas\");\r\n    }\r\n    g.drawImage(img, 0, 0);\r\n}\r\n\r\nexport function drawImageDataToCanvas(canv: CanvasTypes, img: ImageData): void {\r\n    const g = canv.getContext(\"2d\");\r\n    if (isNullOrUndefined(g)) {\r\n        throw new Error(\"Could not create 2d context for canvas\");\r\n    }\r\n    g.putImageData(img, 0, 0);\r\n}\r\n\r\nfunction testOffscreen2D() {\r\n    try {\r\n        const canv = new OffscreenCanvas(1, 1);\r\n        const g = canv.getContext(\"2d\");\r\n        return g != null;\r\n    }\r\n    catch (exp) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const hasOffscreenCanvasRenderingContext2D = /*@__PURE__*/ hasOffscreenCanvas && testOffscreen2D();\r\n\r\nexport const createUtilityCanvas = /*@__PURE__*/ hasOffscreenCanvasRenderingContext2D && createOffscreenCanvas\r\n    || !IS_WORKER && hasHTMLCanvas && createCanvas\r\n    || null;\r\n\r\nexport const createUICanvas = /*@__PURE__*/ !IS_WORKER && hasHTMLCanvas\r\n    ? createCanvas\r\n    : createUtilityCanvas;\r\n\r\nfunction testOffscreen3D() {\r\n    try {\r\n        const canv = new OffscreenCanvas(1, 1);\r\n        const g = canv.getContext(\"webgl2\");\r\n        return g != null;\r\n    }\r\n    catch (exp) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const hasOffscreenCanvasRenderingContext3D = /*@__PURE__*/ hasOffscreenCanvas && testOffscreen3D();\r\n\r\nexport function createOffscreenCanvas(width: number, height: number): OffscreenCanvas {\r\n    return new OffscreenCanvas(width, height);\r\n}\r\n\r\nexport function createCanvas(w: number, h: number): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    return Canvas(htmlWidth(w), htmlHeight(h));\r\n}\r\n\r\nexport function createOffscreenCanvasFromImageBitmap(img: ImageBitmap): OffscreenCanvas {\r\n    const canv = createOffscreenCanvas(img.width, img.height);\r\n    drawImageBitmapToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport function createCanvasFromImageBitmap(img: ImageBitmap): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    const canv = createCanvas(img.width, img.height);\r\n    drawImageBitmapToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport const createUtilityCanvasFromImageBitmap = /*@__PURE__*/ hasOffscreenCanvasRenderingContext2D && createOffscreenCanvasFromImageBitmap\r\n    || !IS_WORKER && hasHTMLCanvas && createCanvasFromImageBitmap\r\n    || null;\r\n\r\nexport function createOffscreenCanvasFromImageData(img: ImageData): OffscreenCanvas {\r\n    const canv = createOffscreenCanvas(img.width, img.height);\r\n    drawImageDataToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport function createCanvasFromImageData(img: ImageData): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    const canv = createCanvas(img.width, img.height);\r\n    drawImageDataToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport const createUtilityCanvasFromImageData = /*@__PURE__*/ hasOffscreenCanvasRenderingContext2D && createOffscreenCanvasFromImageData\r\n    || !IS_WORKER && hasHTMLCanvas && createCanvasFromImageData\r\n    || null;\r\n\r\nexport function createCanvasFromOffscreenCanvas(canv: OffscreenCanvas): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    const c = createCanvas(canv.width, canv.height);\r\n    drawImageToCanvas(c, canv);\r\n    return c;\r\n}\r\n\r\nexport function drawImageToCanvas(canv: CanvasTypes, img: CanvasImageTypes): void {\r\n    const g = canv.getContext(\"2d\");\r\n    if (isNullOrUndefined(g)) {\r\n        throw new Error(\"Could not create 2d context for canvas\");\r\n    }\r\n    g.drawImage(img, 0, 0);\r\n}\r\n\r\nexport function createOffscreenCanvasFromImage(img: HTMLImageElement): OffscreenCanvas {\r\n    const canv = createOffscreenCanvas(img.width, img.height);\r\n    drawImageToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport function createCanvasFromImage(img: HTMLImageElement): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    const canv = createCanvas(img.width, img.height);\r\n    drawImageToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport const createUtilityCanvasFromImage = /*@__PURE__*/ hasOffscreenCanvasRenderingContext2D && createOffscreenCanvasFromImage\r\n    || !IS_WORKER && hasHTMLCanvas && createCanvasFromImage\r\n    || null;\r\n\r\nexport async function createImageFromFile(file: string): Promise<HTMLImageElement> {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Image is not supported in workers\");\r\n    }\r\n\r\n    const img = Img(src(file));\r\n    await once<HTMLElementEventMap>(img, \"load\", \"error\");\r\n    return img;\r\n}\r\n\r\n/**\r\n * Resizes a canvas element\r\n * @param canv\r\n * @param w - the new width of the canvas\r\n * @param h - the new height of the canvas\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function setCanvasSize(canv: CanvasTypes, w: number, h: number, superscale = 1) {\r\n    w = Math.floor(w * superscale);\r\n    h = Math.floor(h * superscale);\r\n    if (canv.width != w\r\n        || canv.height != h) {\r\n        canv.width = w;\r\n        canv.height = h;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function is2DRenderingContext(ctx: GraphicsContext): ctx is Context2D {\r\n    return isDefined((ctx as Context2D).textBaseline);\r\n}\r\n\r\nexport function setCanvas2DContextSize(ctx: Context2D, w: number, h: number, superscale = 1) {\r\n    const oldImageSmoothingEnabled = ctx.imageSmoothingEnabled,\r\n        oldTextBaseline = ctx.textBaseline,\r\n        oldTextAlign = ctx.textAlign,\r\n        oldFont = ctx.font,\r\n        resized = setCanvasSize(\r\n            ctx.canvas,\r\n            w,\r\n            h,\r\n            superscale);\r\n\r\n    if (resized) {\r\n        ctx.imageSmoothingEnabled = oldImageSmoothingEnabled;\r\n        ctx.textBaseline = oldTextBaseline;\r\n        ctx.textAlign = oldTextAlign;\r\n        ctx.font = oldFont;\r\n    }\r\n\r\n    return resized;\r\n}\r\n\r\n/**\r\n * Resizes the canvas element of a given rendering context.\r\n * \r\n * Note: the imageSmoothingEnabled, textBaseline, textAlign, and font \r\n * properties of the context will be restored after the context is resized,\r\n * as these values are usually reset to their default values when a canvas\r\n * is resized.\r\n * @param ctx\r\n * @param w - the new width of the canvas\r\n * @param h - the new height of the canvas\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function setContextSize(ctx: GraphicsContext, w: number, h: number, superscale = 1) {\r\n    if (is2DRenderingContext(ctx)) {\r\n        return setCanvas2DContextSize(ctx, w, h, superscale);\r\n    }\r\n    else {\r\n        return setCanvasSize(\r\n            ctx.canvas,\r\n            w,\r\n            h,\r\n            superscale);\r\n    }\r\n}\r\n\r\n/**\r\n * Resizes a canvas element to match the proportions of the size of the element in the DOM.\r\n * @param canv\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function resizeCanvas(canv: HTMLCanvasElement, superscale = 1) {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    return setCanvasSize(\r\n        canv,\r\n        canv.clientWidth,\r\n        canv.clientHeight,\r\n        superscale);\r\n}\r\n\r\n/**\r\n * Resizes a canvas element of a given rendering context to match the proportions of the size of the element in the DOM.\r\n * @param ctx\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function resizeContext(ctx: CanvasRenderingContext2D, superscale = 1) {\r\n    return setContextSize(\r\n        ctx,\r\n        ctx.canvas.clientWidth,\r\n        ctx.canvas.clientHeight,\r\n        superscale);\r\n}\r\n\r\nexport function canvasToBlob(canvas: CanvasTypes, type?: string, quality?: number): Promise<Blob> {\r\n    if (isOffscreenCanvas(canvas)) {\r\n        return canvas.convertToBlob({ type, quality });\r\n    }\r\n    else if (isHTMLCanvas(canvas)) {\r\n        const blobCreated = new Task<Blob>();\r\n        canvas.toBlob(blobCreated.resolve, type, quality);\r\n        return blobCreated;\r\n    }\r\n    else {\r\n        throw new Error(\"Cannot save image from canvas\");\r\n    }\r\n}\r\n\r\nexport async function snapshot(canvas: CanvasTypes): Promise<CanvasTypes> {\r\n    const copy = createUtilityCanvas(canvas.width, canvas.height);\r\n    drawImageToCanvas(copy, canvas);\r\n    return copy;\r\n}", "export function isChrome() {\r\n    return \"chrome\" in globalThis && !navigator.userAgent.match(\"CriOS\");\r\n}\r\n\r\nexport function isFirefox() {\r\n    return \"InstallTrigger\" in globalThis;\r\n}\r\n\r\nexport function isSafari() {\r\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n}\r\n\r\nexport function isMacOS() {\r\n    return /^mac/i.test(navigator.platform);\r\n}\r\n\r\nexport function isIOS() {\r\n    return /iP(ad|hone|od)/.test(navigator.platform)\r\n        || /Macintosh(.*?) FxiOS(.*?)\\//.test(navigator.platform)\r\n        || isMacOS()\r\n            && \"maxTouchPoints\" in navigator\r\n            && (navigator as any).maxTouchPoints > 2;\r\n}\r\n\r\nexport function isApple() {\r\n    return isIOS()\r\n        || isMacOS();\r\n}\r\n\r\nexport function isMobileVR() {\r\n    return /Mobile VR/.test(navigator.userAgent)\r\n        || /Pico Neo 3 Link/.test(navigator.userAgent)\r\n        || isOculusBrowser;\r\n}\r\n\r\nexport function hasWebXR() {\r\n    return \"xr\" in navigator\r\n        && \"isSessionSupported\" in (navigator as any).xr;\r\n}\r\n\r\nexport function hasWebVR() {\r\n    return \"getVRDisplays\" in navigator;\r\n}\r\n\r\nexport function hasVR() {\r\n    return hasWebXR() || hasWebVR();\r\n}\r\n\r\nexport function isMobile() {\r\n    return /Android/.test(navigator.userAgent)\r\n        || /BlackBerry/.test(navigator.userAgent)\r\n        || /(UC Browser |UCWEB)/.test(navigator.userAgent)\r\n        || isIOS()\r\n        || isMobileVR();\r\n}\r\n\r\nexport function isDesktop() {\r\n    return !isMobile();\r\n}\r\n\r\nconst oculusBrowserPattern = /*@__PURE__*/ /OculusBrowser\\/(\\d+)\\.(\\d+)\\.(\\d+)/i;\r\nconst oculusMatch = /*@__PURE__*/ navigator.userAgent.match(oculusBrowserPattern);\r\nexport const isOculusBrowser = /*@__PURE__*/ !!oculusMatch;\r\nexport const oculusBrowserVersion: { major: number, minor: number, patch: number } = /*@__PURE__*/ isOculusBrowser && {\r\n    major: parseFloat(oculusMatch[1]),\r\n    minor: parseFloat(oculusMatch[2]),\r\n    patch: parseFloat(oculusMatch[3])\r\n};\r\n\r\nexport const isOculusGo = /*@__PURE__*/ isOculusBrowser && /pacific/i.test(navigator.userAgent);\r\nexport const isOculusQuest = /*@__PURE__*/ isOculusBrowser && /quest/i.test(navigator.userAgent);\r\nexport const isOculusQuest2 = /*@__PURE__*/ isOculusBrowser && /quest 2/i.test(navigator.userAgent);\r\nexport const isOculusQuest1 = /*@__PURE__*/ isOculusBrowser && !isOculusQuest2;\r\n\r\nexport const isWorkerSupported = /*@__PURE__*/ \"Worker\" in globalThis;", "\uFEFFexport const singleLineOutput = Object.freeze([\r\n    \"CursorLeft\",\r\n    \"CursorRight\",\r\n    \"CursorSkipLeft\",\r\n    \"CursorSkipRight\",\r\n    \"CursorHome\",\r\n    \"CursorEnd\",\r\n    \"CursorFullHome\",\r\n    \"CursorFullEnd\",\r\n\r\n    \"SelectLeft\",\r\n    \"SelectRight\",\r\n    \"SelectSkipLeft\",\r\n    \"SelectSkipRight\",\r\n    \"SelectHome\",\r\n    \"SelectEnd\",\r\n    \"SelectFullHome\",\r\n    \"SelectFullEnd\",\r\n\r\n    \"SelectAll\"\r\n]);\r\n\r\nexport const multiLineOutput = Object.freeze(singleLineOutput\r\n    .concat([\r\n        \"CursorDown\",\r\n        \"CursorUp\",\r\n        \"CursorPageDown\",\r\n        \"CursorPageUp\",\r\n\r\n        \"SelectDown\",\r\n        \"SelectUp\",\r\n        \"SelectPageDown\",\r\n        \"SelectPageUp\",\r\n\r\n        \"ScrollDown\",\r\n        \"ScrollUp\"\r\n    ]));\r\n\r\nconst input = [\r\n    \"Backspace\",\r\n    \"Delete\",\r\n    \"DeleteWordLeft\",\r\n    \"DeleteWordRight\",\r\n    \"DeleteLine\",\r\n\r\n    \"Undo\",\r\n    \"Redo\",\r\n];\r\n\r\nexport const singleLineInput = Object.freeze(singleLineOutput\r\n    .concat(input));\r\n\r\nexport const multiLineInput = Object.freeze(multiLineOutput\r\n    .concat(input)\r\n    .concat([\r\n        \"AppendNewline\",\r\n        \"PrependNewline\"\r\n    ]));", "const combiningMarks =\r\n    /(<%= allExceptCombiningMarks %>)(<%= combiningMarks %>+)/g,\r\n    surrogatePair = /(<%= highSurrogates %>)(<%= lowSurrogates %>)/g;\r\n\r\n// unicode-aware string reverse\r\nexport function stringReverse(str: string) {\r\n    str = str.replace(combiningMarks, function (_match, capture1,\r\n        capture2) {\r\n        return stringReverse(capture2) + capture1;\r\n    })\r\n        .replace(surrogatePair, \"$2$1\");\r\n    let res = \"\";\r\n    for (let i = str.length - 1; i >= 0; --i) {\r\n        res += str[i];\r\n    }\r\n    return res;\r\n}\r\n\r\n", "\uFEFFimport { stringReverse } from \"@juniper-lib/tslib/strings/stringReverse\";\r\nimport type { Row } from \"./Row\";\r\n\r\nexport class Cursor {\r\n\r\n    static min(a: Cursor, b: Cursor) {\r\n        if (a.i <= b.i) {\r\n            return a;\r\n        }\r\n        return b;\r\n    }\r\n\r\n    static max(a: Cursor, b: Cursor) {\r\n        if (a.i > b.i) {\r\n            return a;\r\n        }\r\n        return b;\r\n    }\r\n\r\n    public i: number;\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(i?: number, x?: number, y?: number) {\r\n        this.i = i || 0;\r\n        this.x = x || 0;\r\n        this.y = y || 0;\r\n        Object.seal(this);\r\n    }\r\n\r\n    clone() {\r\n        return new Cursor(this.i, this.x, this.y);\r\n    }\r\n\r\n    toString() {\r\n        return `[i:${this.i} x:${this.x} y:${this.y}]`;\r\n    }\r\n\r\n    copy(cursor: Cursor) {\r\n        this.i = cursor.i;\r\n        this.x = cursor.x;\r\n        this.y = cursor.y;\r\n    }\r\n\r\n    fullHome() {\r\n        this.i = 0;\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n\r\n    fullEnd(rows: Row[]) {\r\n        this.i = 0;\r\n        let lastLength = 0;\r\n        for (let y = 0; y < rows.length; ++y) {\r\n            const row = rows[y];\r\n            lastLength = row.stringLength;\r\n            this.i += lastLength;\r\n        }\r\n        this.y = rows.length - 1;\r\n        this.x = lastLength;\r\n    }\r\n\r\n    left(rows: Row[], skipAdjust = false) {\r\n        if (this.i > 0) {\r\n            --this.i;\r\n            --this.x;\r\n            if (this.x < 0) {\r\n                --this.y;\r\n                const row = rows[this.y];\r\n                this.x = row.stringLength - 1;\r\n            }\r\n            else if (!skipAdjust) {\r\n                rows[this.y].adjust(this, -1);\r\n            }\r\n        }\r\n    }\r\n\r\n    skipLeft(rows: Row[]) {\r\n        if (this.x <= 1) {\r\n            this.left(rows);\r\n        }\r\n        else {\r\n            const x = this.x - 1,\r\n                row = rows[this.y],\r\n                word = stringReverse(row.substring(0, x)),\r\n                m = word.match(/\\w+/),\r\n                dx = m\r\n                    ? (m.index + m[0].length + 1)\r\n                    : this.x;\r\n            this.i -= dx;\r\n            this.x -= dx;\r\n            rows[this.y].adjust(this, -1);\r\n        }\r\n    }\r\n\r\n    right(rows: Row[], skipAdjust = false) {\r\n        const row = rows[this.y];\r\n        if (this.y < rows.length - 1\r\n            || this.x < row.stringLength) {\r\n            ++this.i;\r\n            ++this.x;\r\n            if (this.y < rows.length - 1\r\n                && this.x === row.stringLength) {\r\n                this.x = 0;\r\n                ++this.y;\r\n            }\r\n            else if (!skipAdjust) {\r\n                rows[this.y].adjust(this, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    skipRight(rows: Row[]) {\r\n        const row = rows[this.y];\r\n        if (this.x < row.stringLength - 1) {\r\n            const x = this.x + 1,\r\n                subrow = row.substring(x),\r\n                m = subrow.match(/\\w+/),\r\n                dx = m\r\n                    ? (m.index + m[0].length + 1)\r\n                    : (row.stringLength - this.x);\r\n            this.i += dx;\r\n            this.x += dx;\r\n            if (this.x > 0\r\n                && this.x === row.stringLength\r\n                && this.y < rows.length - 1) {\r\n                --this.x;\r\n                --this.i;\r\n            }\r\n            rows[this.y].adjust(this, 1);\r\n        }\r\n        else if (this.y < rows.length - 1) {\r\n            this.right(rows);\r\n        }\r\n    }\r\n\r\n    home() {\r\n        this.i -= this.x;\r\n        this.x = 0;\r\n    }\r\n\r\n    end(rows: Row[]) {\r\n        const row = rows[this.y];\r\n        let dx = row.stringLength - this.x;\r\n        if (this.y < rows.length - 1) {\r\n            --dx;\r\n        }\r\n        this.i += dx;\r\n        this.x += dx;\r\n    }\r\n\r\n    up(rows: Row[], skipAdjust = false) {\r\n        if (this.y > 0) {\r\n            --this.y;\r\n            const row = rows[this.y],\r\n                dx = Math.min(0, row.stringLength - this.x - 1);\r\n            this.x += dx;\r\n            this.i -= row.stringLength - dx;\r\n            if (!skipAdjust) {\r\n                rows[this.y].adjust(this, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    down(rows: Row[], skipAdjust = false) {\r\n        if (this.y < rows.length - 1) {\r\n            const prevRow = rows[this.y];\r\n            ++this.y;\r\n            this.i += prevRow.stringLength;\r\n\r\n            const row = rows[this.y];\r\n            if (this.x >= row.stringLength) {\r\n                let dx = this.x - row.stringLength;\r\n                if (this.y < rows.length - 1) {\r\n                    ++dx;\r\n                }\r\n                this.i -= dx;\r\n                this.x -= dx;\r\n            }\r\n            if (!skipAdjust) {\r\n                rows[this.y].adjust(this, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    incX(rows: Row[], dx: number) {\r\n        const dir = Math.sign(dx);\r\n        dx = Math.abs(dx);\r\n        if (dir === -1) {\r\n            for (let i = 0; i < dx; ++i) {\r\n                this.left(rows, true);\r\n            }\r\n            rows[this.y].adjust(this, -1);\r\n        }\r\n        else if (dir === 1) {\r\n            for (let i = 0; i < dx; ++i) {\r\n                this.right(rows, true);\r\n            }\r\n            rows[this.y].adjust(this, 1);\r\n        }\r\n    }\r\n\r\n    incY(rows: Row[], dy: number) {\r\n        const dir = Math.sign(dy);\r\n        dy = Math.abs(dy);\r\n        if (dir === -1) {\r\n            for (let i = 0; i < dy; ++i) {\r\n                this.up(rows, true);\r\n            }\r\n        }\r\n        else if (dir === 1) {\r\n            for (let i = 0; i < dy; ++i) {\r\n                this.down(rows, true);\r\n            }\r\n        }\r\n        rows[this.y].adjust(this, 1);\r\n    }\r\n\r\n    setXY(rows: Row[], x: number, y: number) {\r\n        x = Math.floor(x);\r\n        y = Math.floor(y);\r\n        this.y = Math.max(0, Math.min(rows.length - 1, y));\r\n        const row = rows[this.y];\r\n        this.x = Math.max(0, Math.min(row.stringLength, x));\r\n        this.i = this.x;\r\n        for (let i = 0; i < this.y; ++i) {\r\n            this.i += rows[i].stringLength;\r\n        }\r\n        if (this.x > 0\r\n            && this.x === row.stringLength\r\n            && this.y < rows.length - 1) {\r\n            --this.x;\r\n            --this.i;\r\n        }\r\n        rows[this.y].adjust(this, 1);\r\n    }\r\n\r\n    setI(rows: Row[], i: number) {\r\n        const delta = this.i - i,\r\n            dir = Math.sign(delta);\r\n        this.x = this.i = i;\r\n        this.y = 0;\r\n        let total = 0,\r\n            row = rows[this.y];\r\n        while (this.x > row.stringLength) {\r\n            this.x -= row.stringLength;\r\n            total += row.stringLength;\r\n            if (this.y >= rows.length - 1) {\r\n                this.i = total;\r\n                this.x = row.stringLength;\r\n                break;\r\n            }\r\n            ++this.y;\r\n            row = rows[this.y];\r\n        }\r\n\r\n        if (this.y < rows.length - 1\r\n            && this.x === row.stringLength) {\r\n            this.x = 0;\r\n            ++this.y;\r\n        }\r\n\r\n        rows[this.y].adjust(this, dir);\r\n    }\r\n}\r\n", "\uFEFFimport { TypedEvent, TypedEventBase } from \"@juniper-lib/tslib/events/EventBase\";\r\n\r\nexport class Delayer extends TypedEventBase<{\r\n    \"tick\": TypedEvent<\"tick\">;\r\n}> {\r\n\r\n    private timer: number = null;\r\n\r\n    private readonly tick: () => void;\r\n\r\n    constructor(private readonly timeout: number) {\r\n        super();\r\n\r\n        const tickEvt = new TypedEvent(\"tick\");\r\n\r\n        this.tick = () => {\r\n            this.cancel();\r\n            this.dispatchEvent(tickEvt);\r\n        };\r\n\r\n        Object.freeze(this);\r\n    }\r\n\r\n    get isRunning() {\r\n        return this.timer !== null;\r\n    }\r\n\r\n    cancel() {\r\n        const wasRunning = this.isRunning;\r\n        if (wasRunning) {\r\n            clearTimeout(this.timer);\r\n            this.timer = null;\r\n        }\r\n\r\n        return wasRunning;\r\n    }\r\n\r\n    start() {\r\n        this.cancel();\r\n        this.timer = setInterval(this.tick, this.timeout);\r\n    }\r\n}", "// Color themes for text-oriented controls, for use when coupled with a parsing grammar.\r\n\r\nimport { TokenType } from \"./Grammars\";\r\n\r\nexport interface FontStyle {\r\n    readonly backColor: CSSColorValue;\r\n    readonly foreColor: CSSColorValue;\r\n    readonly fontStyle: string;\r\n    readonly fontWeight: string;\r\n}\r\n\r\nexport interface Theme extends Partial<Record<TokenType, Partial<FontStyle>>> {\r\n    readonly name: string;\r\n    readonly cursorColor?: CSSColorValue;\r\n    readonly unfocused?: CSSColorValue;\r\n    readonly currentRowBackColor?: CSSColorValue;\r\n    readonly selectedBackColor?: CSSColorValue;\r\n    readonly lineNumbers?: Partial<FontStyle>;\r\n    readonly regular?: Partial<FontStyle>;\r\n    readonly strings?: Partial<FontStyle>;\r\n    readonly regexes?: Partial<FontStyle>;\r\n    readonly numbers?: Partial<FontStyle>;\r\n    readonly comments?: Partial<FontStyle>;\r\n    readonly keywords?: Partial<FontStyle>;\r\n    readonly functions?: Partial<FontStyle>;\r\n    readonly members?: Partial<FontStyle>;\r\n    readonly error?: Partial<FontStyle>;\r\n}\r\n\r\n// A dark background with a light foreground for text.\r\nexport const Dark: Theme = {\r\n    name: \"Dark\",\r\n    cursorColor: \"white\",\r\n    unfocused: \"rgba(0, 0, 255, 0.25)\",\r\n    currentRowBackColor: \"#202020\",\r\n    selectedBackColor: \"#404040\",\r\n    lineNumbers: {\r\n        foreColor: \"white\"\r\n    },\r\n    regular: {\r\n        backColor: \"black\",\r\n        foreColor: \"#c0c0c0\"\r\n    },\r\n    strings: {\r\n        foreColor: \"#aa9900\",\r\n        fontStyle: \"italic\"\r\n    },\r\n    regexes: {\r\n        foreColor: \"#aa0099\",\r\n        fontStyle: \"italic\"\r\n    },\r\n    numbers: {\r\n        foreColor: \"green\"\r\n    },\r\n    comments: {\r\n        foreColor: \"yellow\",\r\n        fontStyle: \"italic\"\r\n    },\r\n    keywords: {\r\n        foreColor: \"cyan\"\r\n    },\r\n    functions: {\r\n        foreColor: \"brown\",\r\n        fontWeight: \"bold\"\r\n    },\r\n    members: {\r\n        foreColor: \"green\"\r\n    },\r\n    error: {\r\n        foreColor: \"red\",\r\n        fontStyle: \"underline italic\"\r\n    }\r\n};\r\n\r\n\r\n// A light background with dark foreground text.\r\nexport const Light: Theme = {\r\n    name: \"Light\",\r\n    cursorColor: \"black\",\r\n    unfocused: \"rgba(0, 0, 255, 0.25)\",\r\n    currentRowBackColor: \"#f0f0f0\",\r\n    selectedBackColor: \"#c0c0c0\",\r\n    lineNumbers: {\r\n        foreColor: \"black\"\r\n    },\r\n    regular: {\r\n        backColor: \"white\",\r\n        foreColor: \"black\"\r\n    },\r\n    strings: {\r\n        foreColor: \"#aa9900\",\r\n        fontStyle: \"italic\"\r\n    },\r\n    regexes: {\r\n        foreColor: \"#aa0099\",\r\n        fontStyle: \"italic\"\r\n    },\r\n    numbers: {\r\n        foreColor: \"green\"\r\n    },\r\n    comments: {\r\n        foreColor: \"grey\",\r\n        fontStyle: \"italic\"\r\n    },\r\n    keywords: {\r\n        foreColor: \"blue\"\r\n    },\r\n    functions: {\r\n        foreColor: \"brown\",\r\n        fontWeight: \"bold\"\r\n    },\r\n    members: {\r\n        foreColor: \"green\"\r\n    },\r\n    error: {\r\n        foreColor: \"red\",\r\n        fontStyle: \"underline italic\"\r\n    }\r\n};\r\n\r\nexport const themes = Object.freeze(new Map<string, Theme>([\r\n    [\"light\", Light],\r\n    [\"dark\", Dark]\r\n]));", "import type { Token, TokenType } from \"./Token\";\r\n\r\n// A single syntax matching rule, for tokenizing code.\r\nexport class Rule {\r\n    constructor(public readonly name: TokenType, public readonly test: RegExp) {\r\n        this.name = name;\r\n        this.test = test;\r\n        Object.freeze(this);\r\n    }\r\n\r\n    carveOutMatchedToken(tokens: Token[], j: number) {\r\n        const token = tokens[j];\r\n        if (token.type === \"regular\") {\r\n            const res = this.test.exec(token.value);\r\n            if (!!res) {\r\n                // Only use the last group that matches the regex, to allow for more\r\n                // complex regexes that can match in special contexts, but not make\r\n                // the context part of the token.\r\n                const midx = res[res.length - 1],\r\n                    start = res.input.indexOf(midx),\r\n                    end = start + midx.length;\r\n                if (start === 0) {\r\n                    // the rule matches the start of the token\r\n                    token.type = this.name;\r\n                    if (end < token.length) {\r\n                        // but not the end\r\n                        const next = token.splitAt(end);\r\n                        next.type = \"regular\";\r\n                        tokens.splice(j + 1, 0, next);\r\n                    }\r\n                }\r\n                else {\r\n                    // the rule matches from the middle of the token\r\n                    const mid = token.splitAt(start);\r\n                    if (midx.length < mid.length) {\r\n                        // but not the end\r\n                        const right = mid.splitAt(midx.length);\r\n                        tokens.splice(j + 1, 0, right);\r\n                    }\r\n                    mid.type = this.name;\r\n                    tokens.splice(j + 1, 0, mid);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n", "export type TokenType =\r\n    | \"regular\"\r\n    | \"stringDelim\"\r\n    | \"newlines\"\r\n    | \"strings\"\r\n    | \"startBlockComments\"\r\n    | \"endBlockComments\"\r\n    | \"startLineComments\"\r\n    | \"comments\"\r\n    | \"lineNumbers\"\r\n    | \"whitespace\"\r\n    | \"numbers\"\r\n    | \"keywords\"\r\n    | \"operators\"\r\n    | \"members\"\r\n    | \"regexes\"\r\n    | \"functions\";\r\n\r\n// A chunk of text that represents a single element of code,\r\n// with fields linking it back to its source.\r\nexport class Token {\r\n    constructor(\r\n        public value: string,\r\n        public type: TokenType,\r\n        public readonly startStringIndex: number) {\r\n        Object.seal(this);\r\n    }\r\n\r\n    get length() {\r\n        return this.value.length;\r\n    }\r\n\r\n    get endStringIndex() {\r\n        return this.startStringIndex + this.length;\r\n    }\r\n\r\n    clone() {\r\n        return new Token(this.value, this.type, this.startStringIndex);\r\n    }\r\n\r\n    splitAt(i: number): Token {\r\n        var next = this.value.substring(i);\r\n        this.value = this.value.substring(0, i);\r\n        return new Token(next, this.type, this.startStringIndex + i);\r\n    }\r\n\r\n    toString() {\r\n        return `[${this.type}: ${this.value}]`;\r\n    }\r\n};\r\n", "/*\r\npliny.class({\r\n  parent: \"Primrose.Text\",\r\n    name: \"Grammar\",\r\n    parameters: [{\r\n      name: \"grammarName\",\r\n      type: \"String\",\r\n      description: \"A user-friendly name for the grammar, to be able to include it in an options listing.\"\r\n    }, {\r\n      name: \"rules\",\r\n      type: \"Array\",\r\n      description: \"A collection of rules to apply to tokenize text. The rules should be an array of two-element arrays. The first element should be a token name (see [`Primrose.Text.Rule`](#Primrose_Text_Rule) for a list of valid token names), followed by a regular expression that selects the token out of the source code.\"\r\n    }],\r\n    description: \"A Grammar is a collection of rules for processing text into tokens. Tokens are special characters that tell us about the structure of the text, things like keywords, curly braces, numbers, etc. After the text is tokenized, the tokens get a rough processing pass that groups them into larger elements that can be rendered in color on the screen.\\n\\\r\n\\n\\\r\nAs tokens are discovered, they are removed from the text being processed, so order is important. Grammar rules are applied in the order they are specified, and more than one rule can produce the same token type.\\n\\\r\n\\n\\\r\nSee [`Primrose.Text.Rule`](#Primrose_Text_Rule) for a list of valid token names.\",\r\n    examples: [{\r\n      name: \"A plain-text \\\"grammar\\\".\",\r\n      description: \"Plain text does not actually have a grammar that needs to be processed. However, to get the text to work with the rendering system, a basic grammar is necessary to be able to break the text up into lines and prepare it for rendering.\\n\\\r\n\\n\\\r\n## Code:\\n\\\r\n\\n\\\r\n  grammar(\\\"JavaScript\\\");\\n\\\r\n  var plainTextGrammar = new Primrose.Text.Grammar(\\n\\\r\n    // The name is for displaying in options views.\\n\\\r\n    \\\"Plain-text\\\", [\\n\\\r\n    // Text needs at least the newlines token, or else every line will attempt to render as a single line and the line count won't work.\\n\\\r\n    [\\\"newlines\\\", /(?:\\\\r\\\\n|\\\\r|\\\\n)/] \\n\\\r\n  ] );\"\r\n    }, {\r\n      name: \"A grammar for BASIC\",\r\n      description: \"The BASIC programming language is now defunct, but a grammar for it to display in Primrose is quite easy to build.\\n\\\r\n\\n\\\r\n## Code:\\n\\\r\n\\n\\\r\n  grammar(\\\"JavaScript\\\");\\n\\\r\n  var basicGrammar = new Primrose.Text.Grammar( \\\"BASIC\\\",\\n\\\r\n    // Grammar rules are applied in the order they are specified.\\n\\\r\n    [\\n\\\r\n      // Text needs at least the newlines token, or else every line will attempt to render as a single line and the line count won't work.\\n\\\r\n      [ \\\"newlines\\\", /(?:\\\\r\\\\n|\\\\r|\\\\n)/ ],\\n\\\r\n      // BASIC programs used to require the programmer type in her own line numbers. The start at the beginning of the line.\\n\\\r\n      [ \\\"lineNumbers\\\", /^\\\\d+\\\\s+/ ],\\n\\\r\n      // Comments were lines that started with the keyword \\\"REM\\\" (for REMARK) and ran to the end of the line. They did not have to be numbered, because they were not executable and were stripped out by the interpreter.\\n\\\r\n      [ \\\"startLineComments\\\", /^REM\\\\s/ ],\\n\\\r\n      // Both double-quoted and single-quoted strings were not always supported, but in this case, I'm just demonstrating how it would be done for both.\\n\\\r\n      [ \\\"strings\\\", /\\\"(?:\\\\\\\\\\\"|[^\\\"])*\\\"/ ],\\n\\\r\n      [ \\\"strings\\\", /'(?:\\\\\\\\'|[^'])*'/ ],\\n\\\r\n      // Numbers are an optional dash, followed by a optional digits, followed by optional period, followed by 1 or more required digits. This allows us to match both integers and decimal numbers, both positive and negative, with or without leading zeroes for decimal numbers between (-1, 1).\\n\\\r\n      [ \\\"numbers\\\", /-?(?:(?:\\\\b\\\\d*)?\\\\.)?\\\\b\\\\d+\\\\b/ ],\\n\\\r\n      // Keywords are really just a list of different words we want to match, surrounded by the \\\"word boundary\\\" selector \\\"\\\\b\\\".\\n\\\r\n      [ \\\"keywords\\\",\\n\\\r\n        /\\\\b(?:RESTORE|REPEAT|RETURN|LOAD|LABEL|DATA|READ|THEN|ELSE|FOR|DIM|LET|IF|TO|STEP|NEXT|WHILE|WEND|UNTIL|GOTO|GOSUB|ON|TAB|AT|END|STOP|PRINT|INPUT|RND|INT|CLS|CLK|LEN)\\\\b/\\n\\\r\n      ],\\n\\\r\n      // Sometimes things we want to treat as keywords have different meanings in different locations. We can specify rules for tokens more than once.\\n\\\r\n      [ \\\"keywords\\\", /^DEF FN/ ],\\n\\\r\n      // These are all treated as mathematical operations.\\n\\\r\n      [ \\\"operators\\\",\\n\\\r\n        /(?:\\\\+|;|,|-|\\\\*\\\\*|\\\\*|\\\\/|>=|<=|=|<>|<|>|OR|AND|NOT|MOD|\\\\(|\\\\)|\\\\[|\\\\])/\\n\\\r\n      ],\\n\\\r\n      // Once everything else has been matched, the left over blocks of words are treated as variable and function names.\\n\\\r\n      [ \\\"identifiers\\\", /\\\\w+\\\\$?/ ]\\n\\\r\n    ] );\"\r\n    }]\r\n});\r\n*/\r\n\r\nimport { backgroundColor, color, fontStyle, fontWeight, getMonospaceFamily } from \"@juniper-lib/dom/css\";\r\nimport { BR, Div, elementApply, Span } from \"@juniper-lib/dom/tags\";\r\nimport { Light as DefaultTheme, Theme } from \"../themes\";\r\nimport { Rule } from \"./Rule\";\r\nimport { Token, TokenType } from \"./Token\";\r\n\r\nfunction crudeParsing(tokens: Token[]) {\r\n    var commentDelim = null,\r\n        stringDelim = null;\r\n    for (let i = 0; i < tokens.length; ++i) {\r\n        const t = tokens[i];\r\n\r\n        if (stringDelim) {\r\n            if (t.type === \"stringDelim\" && t.value === stringDelim && (i === 0 || tokens[i - 1].value[tokens[i - 1].value.length - 1] !== \"\\\\\")) {\r\n                stringDelim = null;\r\n            }\r\n            if (t.type !== \"newlines\") {\r\n                t.type = \"strings\";\r\n            }\r\n        }\r\n        else if (commentDelim) {\r\n            if (commentDelim === \"startBlockComments\" && t.type === \"endBlockComments\" ||\r\n                commentDelim === \"startLineComments\" && t.type === \"newlines\") {\r\n                commentDelim = null;\r\n            }\r\n            if (t.type !== \"newlines\") {\r\n                t.type = \"comments\";\r\n            }\r\n        }\r\n        else if (t.type === \"stringDelim\") {\r\n            stringDelim = t.value;\r\n            t.type = \"strings\";\r\n        }\r\n        else if (t.type === \"startBlockComments\" || t.type === \"startLineComments\") {\r\n            commentDelim = t.type;\r\n            t.type = \"comments\";\r\n        }\r\n    }\r\n\r\n    // recombine like-tokens\r\n    for (let i = tokens.length - 1; i > 0; --i) {\r\n        const p = tokens[i - 1],\r\n            t = tokens[i];\r\n        if (p.type === t.type\r\n            && p.type !== \"newlines\") {\r\n            p.value += t.value;\r\n            tokens.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    // remove empties\r\n    for (let i = tokens.length - 1; i >= 0; --i) {\r\n        if (tokens[i].length === 0) {\r\n            tokens.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Grammar {\r\n    private readonly grammar: Rule[];\r\n\r\n    constructor(public readonly name: string, rules: [TokenType, RegExp][]) {\r\n        rules = rules || [];\r\n        /*\r\n        pliny.property({\r\n          parent: \"Primrose.Text.Grammar\",\r\n          name: \" name\",\r\n          type: \"String\",\r\n          description: \"A user-friendly name for the grammar, to be able to include it in an options listing.\"\r\n        });\r\n        */\r\n\r\n        /*\r\n        pliny.property({\r\n          parent: \"Primrose.Text.Grammar\",\r\n          name: \"grammar\",\r\n          type: \"Array\",\r\n          description: \"A collection of rules to apply to tokenize text. The rules should be an array of two-element arrays. The first element should be a token name (see [`Primrose.Text.Rule`](#Primrose_Text_Rule) for a list of valid token names), followed by a regular expression that selects the token out of the source code.\"\r\n        });\r\n        */\r\n        // clone the preprocessing grammar to start a new grammar\r\n        this.grammar = rules.map((rule) =>\r\n            new Rule(rule[0], rule[1]));\r\n\r\n        Object.freeze(this);\r\n    }\r\n\r\n    /*\r\n    pliny.method({\r\n      parent: \"Primrose.Text.Grammar\",\r\n      name: \"tokenize\",\r\n      parameters: [{\r\n        name: \"text\",\r\n        type: \"String\",\r\n        description: \"The text to tokenize.\"\r\n      }],\r\n      returns: \"An array of tokens, ammounting to drawing instructions to the renderer. However, they still need to be layed out to fit the bounds of the text area.\",\r\n      description: \"Breaks plain text up into a list of tokens that can later be rendered with color.\",\r\n      examples: [{\r\n        name: 'Tokenize some JavaScript',\r\n        description: 'Primrose comes with a grammar for JavaScript built in.\\n\\\r\n  \\n\\\r\n  ## Code:\\n\\\r\n  \\n\\\r\n    grammar(\\\"JavaScript\\\");\\n\\\r\n    var tokens = new Primrose.Text.Grammars.JavaScript\\n\\\r\n      .tokenize(\"var x = 3;\\\\n\\\\\\n\\\r\n    var y = 2;\\\\n\\\\\\n\\\r\n    console.log(x + y);\");\\n\\\r\n    console.log(JSON.stringify(tokens));\\n\\\r\n  \\n\\\r\n  ## Result:\\n\\\r\n  \\n\\\r\n    grammar(\\\"JavaScript\\\");\\n\\\r\n    [ \\n\\\r\n      { \"value\": \"var\", \"type\": \"keywords\", \"index\": 0, \"line\": 0 },\\n\\\r\n      { \"value\": \" x = \", \"type\": \"regular\", \"index\": 3, \"line\": 0 },\\n\\\r\n      { \"value\": \"3\", \"type\": \"numbers\", \"index\": 8, \"line\": 0 },\\n\\\r\n      { \"value\": \";\", \"type\": \"regular\", \"index\": 9, \"line\": 0 },\\n\\\r\n      { \"value\": \"\\\\n\", \"type\": \"newlines\", \"index\": 10, \"line\": 0 },\\n\\\r\n      { \"value\": \" y = \", \"type\": \"regular\", \"index\": 11, \"line\": 1 },\\n\\\r\n      { \"value\": \"2\", \"type\": \"numbers\", \"index\": 16, \"line\": 1 },\\n\\\r\n      { \"value\": \";\", \"type\": \"regular\", \"index\": 17, \"line\": 1 },\\n\\\r\n      { \"value\": \"\\\\n\", \"type\": \"newlines\", \"index\": 18, \"line\": 1 },\\n\\\r\n      { \"value\": \"console\", \"type\": \"members\", \"index\": 19, \"line\": 2 },\\n\\\r\n      { \"value\": \".\", \"type\": \"regular\", \"index\": 26, \"line\": 2 },\\n\\\r\n      { \"value\": \"log\", \"type\": \"functions\", \"index\": 27, \"line\": 2 },\\n\\\r\n      { \"value\": \"(x + y);\", \"type\": \"regular\", \"index\": 30, \"line\": 2 }\\n\\\r\n    ]'\r\n      }]\r\n    });\r\n    */\r\n    tokenize(text: string) {\r\n        // all text starts off as regular text, then gets cut up into tokens of\r\n        // more specific type\r\n        const tokens = [new Token(text, \"regular\", 0)];\r\n        for (let rule of this.grammar) {\r\n            for (var j = 0; j < tokens.length; ++j) {\r\n                rule.carveOutMatchedToken(tokens, j);\r\n            }\r\n        }\r\n\r\n        crudeParsing(tokens);\r\n        return tokens;\r\n    }\r\n\r\n    toHTML(parent: HTMLElement, txt: string, theme: Theme, fontSize: number) {\r\n        if (theme === undefined) {\r\n            theme = DefaultTheme;\r\n        }\r\n\r\n        var tokenRows = this.tokenize(txt),\r\n            temp = Div();\r\n        for (var y = 0; y < tokenRows.length; ++y) {\r\n            // draw the tokens on this row\r\n            var t = tokenRows[y];\r\n            if (t.type === \"newlines\") {\r\n                temp.appendChild(BR());\r\n            }\r\n            else {\r\n                var style = theme[t.type] || {},\r\n                    elem = Span(\r\n                        fontWeight(style.fontWeight || theme.regular.fontWeight),\r\n                        fontStyle(style.fontStyle || theme.regular.fontStyle || \"\"),\r\n                        color(style.foreColor || theme.regular.foreColor),\r\n                        backgroundColor(style.backColor || theme.regular.backColor),\r\n                        getMonospaceFamily());\r\n                elementApply(elem, t.value);\r\n                temp.appendChild(elem);\r\n            }\r\n        }\r\n\r\n        parent.innerHTML = temp.innerHTML;\r\n        Object.assign(parent.style, {\r\n            backgroundColor: theme.regular.backColor,\r\n            fontSize: `${fontSize}px`,\r\n            lineHeight: `${fontSize}px`,\r\n        });\r\n    }\r\n};\r\n", "import { Grammar } from \"./Grammar\";\r\n// import { Token } from \"./Token\";\r\n\r\n// A grammar and an interpreter for a BASIC-like language.\r\nexport class BasicGrammar extends Grammar {\r\n    constructor() {\r\n        super(\"BASIC\",\r\n            // Grammar rules are applied in the order they are specified.\r\n            [\r\n                [\"newlines\", /(?:\\r\\n|\\r|\\n)/],\r\n                // BASIC programs used to require the programmer type in her own line numbers. The start at the beginning of the line.\r\n                [\"lineNumbers\", /^\\d+\\s+/],\r\n                [\"whitespace\", /(?:\\s+)/],\r\n                // Comments were lines that started with the keyword \"REM\" (for REMARK) and ran to the end of the line. They did not have to be numbered, because they were not executable and were stripped out by the interpreter.\r\n                [\"startLineComments\", /^REM\\s/],\r\n                // Both double-quoted and single-quoted strings were not always supported, but in this case, I'm just demonstrating how it would be done for both.\r\n                [\"stringDelim\", /(\"|')/],\r\n                // Numbers are an optional dash, followed by a optional digits, followed by optional period, followed by 1 or more required digits. This allows us to match both integers and decimal numbers, both positive and negative, with or without leading zeroes for decimal numbers between (-1, 1).\r\n                [\"numbers\", /-?(?:(?:\\b\\d*)?\\.)?\\b\\d+\\b/],\r\n                // Keywords are really just a list of different words we want to match, surrounded by the \"word boundary\" selector \"\\b\".\r\n                [\"keywords\",\r\n                    /\\b(?:RESTORE|REPEAT|RETURN|LOAD|LABEL|DATA|READ|THEN|ELSE|FOR|DIM|LET|IF|TO|STEP|NEXT|WHILE|WEND|UNTIL|GOTO|GOSUB|ON|TAB|AT|END|STOP|PRINT|INPUT|RND|INT|CLS|CLK|LEN)\\b/\r\n                ],\r\n                // Sometimes things we want to treat as keywords have different meanings in different locations. We can specify rules for tokens more than once.\r\n                [\"keywords\", /^DEF FN/],\r\n                // These are all treated as mathematical operations.\r\n                [\"operators\",\r\n                    /(?:\\+|;|,|-|\\*\\*|\\*|\\/|>=|<=|=|<>|<|>|OR|AND|NOT|MOD|\\(|\\)|\\[|\\])/\r\n                ],\r\n                // Once everything else has been matched, the left over blocks of words are treated as variable and function names.\r\n                [\"members\", /\\w+\\$?/]\r\n            ]);\r\n    }\r\n\r\n    override tokenize(code: string) {\r\n        return super.tokenize(code.toUpperCase());\r\n    }\r\n\r\n    /*\r\n    interpret(sourceCode: string, input, output, errorOut, next, clearScreen, loadFile, done) {\r\n        var tokens = this.tokenize(sourceCode),\r\n            EQUAL_SIGN = new Token(\"=\", \"operators\"),\r\n            counter = 0,\r\n            isDone = false,\r\n            program = new Map(),\r\n            lineNumbers = [],\r\n            currentLine = [],\r\n            lines = [currentLine],\r\n            data = [],\r\n            returnStack = [],\r\n            forLoopCounters = new Map(),\r\n            dataCounter = 0;\r\n\r\n        Object.assign(window, {\r\n            INT: function (v) {\r\n                return v | 0;\r\n            },\r\n            RND: function () {\r\n                return Math.random();\r\n            },\r\n            CLK: function () {\r\n                return Date.now() / 3600000;\r\n            },\r\n            LEN: function (id) {\r\n                return id.length;\r\n            },\r\n            LINE: function () {\r\n                return lineNumbers[counter];\r\n            },\r\n            TAB: function (v) {\r\n                var str = \"\";\r\n                for (var i = 0; i < v; ++i) {\r\n                    str += \" \";\r\n                }\r\n                return str;\r\n            },\r\n            POW: function (a, b) {\r\n                return Math.pow(a, b);\r\n            }\r\n        });\r\n\r\n        function toNum(ln) {\r\n            return new Token(ln.toString(), \"numbers\");\r\n        }\r\n\r\n        function toStr(str) {\r\n            return new Token(\"\\\"\" + str.replace(\"\\n\", \"\\\\n\")\r\n                .replace(\"\\\"\", \"\\\\\\\"\") + \"\\\"\", \"strings\");\r\n        }\r\n\r\n        var tokenMap = {\r\n            \"OR\": \"||\",\r\n            \"AND\": \"&&\",\r\n            \"NOT\": \"!\",\r\n            \"MOD\": \"%\",\r\n            \"<>\": \"!=\"\r\n        };\r\n\r\n        while (tokens.length > 0) {\r\n            var token = tokens.shift();\r\n            if (token.type === \"newlines\") {\r\n                currentLine = [];\r\n                lines.push(currentLine);\r\n            }\r\n            else if (token.type !== \"regular\" && token.type !== \"comments\") {\r\n                token.value = tokenMap[token.value] || token.value;\r\n                currentLine.push(token);\r\n            }\r\n        }\r\n\r\n        for (var i = 0; i < lines.length; ++i) {\r\n            var line = lines[i];\r\n            if (line.length > 0) {\r\n                var lastLine = lineNumbers[lineNumbers.length - 1];\r\n                var lineNumber = line.shift();\r\n\r\n                if (lineNumber.type !== \"lineNumbers\") {\r\n                    line.unshift(lineNumber);\r\n\r\n                    if (lastLine === undefined) {\r\n                        lastLine = -1;\r\n                    }\r\n\r\n                    lineNumber = toNum(lastLine + 1);\r\n                }\r\n\r\n                lineNumber = parseFloat(lineNumber.value);\r\n                if (lastLine && lineNumber <= lastLine) {\r\n                    throw new Error(\"expected line number greater than \" + lastLine +\r\n                        \", but received \" + lineNumber + \".\");\r\n                }\r\n                else if (line.length > 0) {\r\n                    lineNumbers.push(lineNumber);\r\n                    program.set(lineNumber, line);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        function process(line) {\r\n            if (line && line.length > 0) {\r\n                var op = line.shift();\r\n                if (op) {\r\n                    if (commands.hasOwnProperty(op.value)) {\r\n                        return commands[op.value](line);\r\n                    }\r\n                    else if (!isNaN(op.value)) {\r\n                        return setProgramCounter([op]);\r\n                    }\r\n                    else if (window[op.value] ||\r\n                        (line.length > 0 && line[0].type === \"operators\" &&\r\n                            line[0].value === \"=\")) {\r\n                        line.unshift(op);\r\n                        return translate(line);\r\n                    }\r\n                    else {\r\n                        error(\"Unknown command. >>> \" + op.value);\r\n                    }\r\n                }\r\n            }\r\n            return pauseBeforeComplete();\r\n        }\r\n\r\n        function error(msg) {\r\n            errorOut(\"At line \" + lineNumbers[counter] + \": \" + msg);\r\n        }\r\n\r\n        function getLine(i) {\r\n            var lineNumber = lineNumbers[i];\r\n            var line = program.get(lineNumber);\r\n            return line && line.slice();\r\n        }\r\n\r\n        function evaluate(line) {\r\n            var script = \"\";\r\n            for (var i = 0; i < line.length; ++i) {\r\n                var t = line[i];\r\n                var nest = 0;\r\n                if (t.type === \"identifiers\" &&\r\n                    typeof window[t.value] !== \"function\" &&\r\n                    i < line.length - 1 &&\r\n                    line[i + 1].value === \"(\") {\r\n                    for (var j = i + 1; j < line.length; ++j) {\r\n                        var t2 = line[j];\r\n                        if (t2.value === \"(\") {\r\n                            if (nest === 0) {\r\n                                t2.value = \"[\";\r\n                            }\r\n                            ++nest;\r\n                        }\r\n                        else if (t2.value === \")\") {\r\n                            --nest;\r\n                            if (nest === 0) {\r\n                                t2.value = \"]\";\r\n                            }\r\n                        }\r\n                        else if (t2.value === \",\" && nest === 1) {\r\n                            t2.value = \"][\";\r\n                        }\r\n\r\n                        if (nest === 0) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                script += t.value;\r\n            }\r\n\r\n            try {\r\n                return eval(script); // jshint ignore:line\r\n            }\r\n            catch (exp) {\r\n                console.error(exp);\r\n                console.debug(line.join(\", \"));\r\n                console.error(script);\r\n                error(exp.message + \": \" + script);\r\n            }\r\n        }\r\n\r\n        function declareVariable(line) {\r\n            var decl = [],\r\n                decls = [decl],\r\n                nest = 0,\r\n                i;\r\n            for (i = 0; i < line.length; ++i) {\r\n                var t = line[i];\r\n                if (t.value === \"(\") {\r\n                    ++nest;\r\n                }\r\n                else if (t.value === \")\") {\r\n                    --nest;\r\n                }\r\n                if (nest === 0 && t.value === \",\") {\r\n                    decl = [];\r\n                    decls.push(decl);\r\n                }\r\n                else {\r\n                    decl.push(t);\r\n                }\r\n            }\r\n            for (i = 0; i < decls.length; ++i) {\r\n                decl = decls[i];\r\n                var id = decl.shift();\r\n                if (id.type !== \"identifiers\") {\r\n                    error(\"Identifier expected: \" + id.value);\r\n                }\r\n                else {\r\n                    var val = null,\r\n                        j;\r\n                    id = id.value;\r\n                    if (decl[0].value === \"(\" && decl[decl.length - 1].value === \")\") {\r\n                        var sizes = [];\r\n                        for (j = 1; j < decl.length - 1; ++j) {\r\n                            if (decl[j].type === \"numbers\") {\r\n                                sizes.push(decl[j].value | 0);\r\n                            }\r\n                        }\r\n                        if (sizes.length === 0) {\r\n                            val = [];\r\n                        }\r\n                        else {\r\n                            val = new Array(sizes[0]);\r\n                            var queue = [val];\r\n                            for (j = 1; j < sizes.length; ++j) {\r\n                                var size = sizes[j];\r\n                                for (var k = 0,\r\n                                    l = queue.length; k < l; ++k) {\r\n                                    var arr = queue.shift();\r\n                                    for (var m = 0; m < arr.length; ++m) {\r\n                                        arr[m] = new Array(size);\r\n                                        if (j < sizes.length - 1) {\r\n                                            queue.push(arr[m]);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    window[id] = val;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        function print(line) {\r\n            var endLine = \"\\n\";\r\n            var nest = 0;\r\n            line = line.map(function (t, i) {\r\n                t = t.clone();\r\n                if (t.type === \"operators\") {\r\n                    if (t.value === \",\") {\r\n                        if (nest === 0) {\r\n                            t.value = \"+ \\\", \\\" + \";\r\n                        }\r\n                    }\r\n                    else if (t.value === \";\") {\r\n                        t.value = \"+ \\\" \\\"\";\r\n                        if (i < line.length - 1) {\r\n                            t.value += \" + \";\r\n                        }\r\n                        else {\r\n                            endLine = \"\";\r\n                        }\r\n                    }\r\n                    else if (t.value === \"(\") {\r\n                        ++nest;\r\n                    }\r\n                    else if (t.value === \")\") {\r\n                        --nest;\r\n                    }\r\n                }\r\n                return t;\r\n            });\r\n            var txt = evaluate(line);\r\n            if (txt === undefined) {\r\n                txt = \"\";\r\n            }\r\n            output(txt + endLine);\r\n            return true;\r\n        }\r\n\r\n        function setProgramCounter(line) {\r\n            var lineNumber = parseFloat(evaluate(line));\r\n            counter = -1;\r\n            while (counter < lineNumbers.length - 1 &&\r\n                lineNumbers[counter + 1] < lineNumber) {\r\n                ++counter;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function checkConditional(line) {\r\n            var thenIndex = -1,\r\n                elseIndex = -1,\r\n                i;\r\n            for (i = 0; i < line.length; ++i) {\r\n                if (line[i].type === \"keywords\" && line[i].value === \"THEN\") {\r\n                    thenIndex = i;\r\n                }\r\n                else if (line[i].type === \"keywords\" && line[i].value === \"ELSE\") {\r\n                    elseIndex = i;\r\n                }\r\n            }\r\n            if (thenIndex === -1) {\r\n                error(\"Expected THEN clause.\");\r\n            }\r\n            else {\r\n                var condition = line.slice(0, thenIndex);\r\n                for (i = 0; i < condition.length; ++i) {\r\n                    var t = condition[i];\r\n                    if (t.type === \"operators\" && t.value === \"=\") {\r\n                        t.value = \"==\";\r\n                    }\r\n                }\r\n                var thenClause,\r\n                    elseClause;\r\n                if (elseIndex === -1) {\r\n                    thenClause = line.slice(thenIndex + 1);\r\n                }\r\n                else {\r\n                    thenClause = line.slice(thenIndex + 1, elseIndex);\r\n                    elseClause = line.slice(elseIndex + 1);\r\n                }\r\n                if (evaluate(condition)) {\r\n                    return process(thenClause);\r\n                }\r\n                else if (elseClause) {\r\n                    return process(elseClause);\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function pauseBeforeComplete() {\r\n            output(\"PROGRAM COMPLETE - PRESS RETURN TO FINISH.\");\r\n            input(function () {\r\n                isDone = true;\r\n                if (done) {\r\n                    done();\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n\r\n        function labelLine(line) {\r\n            line.push(EQUAL_SIGN);\r\n            line.push(toNum(lineNumbers[counter]));\r\n            return translate(line);\r\n        }\r\n\r\n        function waitForInput(line: string[]) {\r\n            var toVar = line.pop();\r\n            if (line.length > 0) {\r\n                print(line);\r\n            }\r\n            input(function (str: string) {\r\n                str = str.toUpperCase();\r\n                var valueToken = null;\r\n                if (!isNaN(str)) {\r\n                    valueToken = toNum(str);\r\n                }\r\n                else {\r\n                    valueToken = toStr(str);\r\n                }\r\n                evaluate([toVar, EQUAL_SIGN, valueToken]);\r\n                if (next) {\r\n                    next();\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n\r\n        function onStatement(line: Token[]) {\r\n            var idxExpr = [],\r\n                idx = null,\r\n                targets = [];\r\n            try {\r\n                while (line.length > 0 &&\r\n                    (line[0].type !== \"keywords\" ||\r\n                        line[0].value !== \"GOTO\")) {\r\n                    idxExpr.push(line.shift());\r\n                }\r\n\r\n                if (line.length > 0) {\r\n                    line.shift(); // burn the goto;\r\n\r\n                    for (var i = 0; i < line.length; ++i) {\r\n                        var t = line[i];\r\n                        if (t.type !== \"operators\" ||\r\n                            t.value !== \",\") {\r\n                            targets.push(t);\r\n                        }\r\n                    }\r\n\r\n                    idx = evaluate(idxExpr) - 1;\r\n\r\n                    if (0 <= idx && idx < targets.length) {\r\n                        return setProgramCounter([targets[idx]]);\r\n                    }\r\n                }\r\n            }\r\n            catch (exp) {\r\n                console.error(exp);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function gotoSubroutine(line) {\r\n            returnStack.push(toNum(lineNumbers[counter + 1]));\r\n            return setProgramCounter(line);\r\n        }\r\n\r\n        function setRepeat() {\r\n            returnStack.push(toNum(lineNumbers[counter]));\r\n            return true;\r\n        }\r\n\r\n        function conditionalReturn(cond) {\r\n            var ret = true;\r\n            var val = returnStack.pop();\r\n            if (val && cond) {\r\n                ret = setProgramCounter([val]);\r\n            }\r\n            return ret;\r\n        }\r\n\r\n        function untilLoop(line) {\r\n            var cond = !evaluate(line);\r\n            return conditionalReturn(cond);\r\n        }\r\n\r\n        function findNext(str) {\r\n            for (i = counter + 1; i < lineNumbers.length; ++i) {\r\n                var l = getLine(i);\r\n                if (l[0].value === str) {\r\n                    return i;\r\n                }\r\n            }\r\n            return lineNumbers.length;\r\n        }\r\n\r\n        function whileLoop(line) {\r\n            var cond = evaluate(line);\r\n            if (!cond) {\r\n                counter = findNext(\"WEND\");\r\n            }\r\n            else {\r\n                returnStack.push(toNum(lineNumbers[counter]));\r\n            }\r\n            return true;\r\n        }\r\n\r\n        var FOR_LOOP_DELIMS = [\"=\", \"TO\", \"STEP\"];\r\n\r\n        function forLoop(line) {\r\n            var n = lineNumbers[counter];\r\n            var varExpr = [];\r\n            var fromExpr = [];\r\n            var toExpr = [];\r\n            var skipExpr = [];\r\n            var arrs = [varExpr, fromExpr, toExpr, skipExpr];\r\n            var a = 0;\r\n            var i = 0;\r\n            for (i = 0; i < line.length; ++i) {\r\n                var t = line[i];\r\n                if (t.value === FOR_LOOP_DELIMS[a]) {\r\n                    if (a === 0) {\r\n                        varExpr.push(t);\r\n                    }\r\n                    ++a;\r\n                }\r\n                else {\r\n                    arrs[a].push(t);\r\n                }\r\n            }\r\n\r\n            var skip = 1;\r\n            if (skipExpr.length > 0) {\r\n                skip = evaluate(skipExpr);\r\n            }\r\n\r\n            if (!forLoopCounters.has(n) === undefined) {\r\n                forLoopCounters.set(n, evaluate(fromExpr));\r\n            }\r\n\r\n            var end = evaluate(toExpr);\r\n            var cond = forLoopCounters.get(n) <= end;\r\n            if (!cond) {\r\n                forLoopCounters.delete(n);\r\n                counter = findNext(\"NEXT\");\r\n            }\r\n            else {\r\n                var v = forLoopCounters.get(n);\r\n                varExpr.push(toNum(v));\r\n                process(varExpr);\r\n                v += skip;\r\n                forLoopCounters.set(n, v);\r\n                returnStack.push(toNum(lineNumbers[counter]));\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function stackReturn() {\r\n            return conditionalReturn(true);\r\n        }\r\n\r\n        function loadCodeFile(line) {\r\n            loadFile(evaluate(line))\r\n                .then(next);\r\n            return false;\r\n        }\r\n\r\n        function noop() {\r\n            return true;\r\n        }\r\n\r\n        function loadData(line) {\r\n            while (line.length > 0) {\r\n                var t = line.shift();\r\n                if (t.type !== \"operators\") {\r\n                    data.push(t.value);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function readData(line) {\r\n            if (data.length === 0) {\r\n                var dataLine = findNext(\"DATA\");\r\n                process(getLine(dataLine));\r\n            }\r\n            var value = data[dataCounter];\r\n            ++dataCounter;\r\n            line.push(EQUAL_SIGN);\r\n            line.push(toNum(value));\r\n            return translate(line);\r\n        }\r\n\r\n        function restoreData() {\r\n            dataCounter = 0;\r\n            return true;\r\n        }\r\n\r\n        function defineFunction(line) {\r\n            var name = line.shift()\r\n                .value;\r\n            var signature = \"\";\r\n            var body = \"\";\r\n            var fillSig = true;\r\n            for (var i = 0; i < line.length; ++i) {\r\n                var t = line[i];\r\n                if (t.type === \"operators\" && t.value === \"=\") {\r\n                    fillSig = false;\r\n                }\r\n                else if (fillSig) {\r\n                    signature += t.value;\r\n                }\r\n                else {\r\n                    body += t.value;\r\n                }\r\n            }\r\n            name = \"FN\" + name;\r\n            var script = \"(function \" + name + signature + \"{ return \" + body +\r\n                \"; })\";\r\n            window[name] = eval(script); // jshint ignore:line\r\n            return true;\r\n        }\r\n\r\n        function translate(line) {\r\n            evaluate(line);\r\n            return true;\r\n        }\r\n\r\n        var commands = {\r\n            DIM: declareVariable,\r\n            LET: translate,\r\n            PRINT: print,\r\n            GOTO: setProgramCounter,\r\n            IF: checkConditional,\r\n            INPUT: waitForInput,\r\n            END: pauseBeforeComplete,\r\n            STOP: pauseBeforeComplete,\r\n            REM: noop,\r\n            \"'\": noop,\r\n            CLS: clearScreen,\r\n            ON: onStatement,\r\n            GOSUB: gotoSubroutine,\r\n            RETURN: stackReturn,\r\n            LOAD: loadCodeFile,\r\n            DATA: loadData,\r\n            READ: readData,\r\n            RESTORE: restoreData,\r\n            REPEAT: setRepeat,\r\n            UNTIL: untilLoop,\r\n            \"DEF FN\": defineFunction,\r\n            WHILE: whileLoop,\r\n            WEND: stackReturn,\r\n            FOR: forLoop,\r\n            NEXT: stackReturn,\r\n            LABEL: labelLine\r\n        };\r\n\r\n        return function () {\r\n            if (!isDone) {\r\n                var goNext = true;\r\n                while (goNext) {\r\n                    var line = getLine(counter);\r\n                    goNext = process(line);\r\n                    ++counter;\r\n                }\r\n            }\r\n        };\r\n    };\r\n    */\r\n}\r\n\r\nexport const Basic = new BasicGrammar();", "/*\r\npliny.value({\r\n  parent: \"Primrose.Text.Grammars\",\r\n  name: \"HTML\",\r\n  description: \"A grammar for HyperText Markup Language.\"\r\n});\r\n*/\r\n\r\nimport { Grammar } from \"./Grammar\";\r\nexport const HTML = new Grammar(\"HTML\", [\r\n    [\"newlines\", /(?:\\r\\n|\\r|\\n)/],\r\n    [\"whitespace\", /(?:\\s+)/],\r\n    [\"startBlockComments\", /(?:<|&lt;)!--/],\r\n    [\"endBlockComments\", /--(?:>|&gt;)/],\r\n    [\"stringDelim\", /(\"|')/],\r\n    [\"numbers\", /-?(?:(?:\\b\\d*)?\\.)?\\b\\d+\\b/],\r\n    [\"keywords\",\r\n        /(?:<|&lt;)\\/?(html|base|head|link|meta|style|title|address|article|aside|footer|header|h1|h2|h3|h4|h5|h6|hgroup|nav|section|dd|div|dl|dt|figcaption|figure|hr|li|main|ol|p|pre|ul|a|abbr|b|bdi|bdo|br|cite|code|data|dfn|em|i|kbd|mark|q|rp|rt|rtc|ruby|s|samp|small|span|strong|sub|sup|time|u|var|wbr|area|audio|img|map|track|video|embed|object|param|source|canvas|noscript|script|del|ins|caption|col|colgroup|table|tbody|td|tfoot|th|thead|tr|button|datalist|fieldset|form|input|label|legend|meter|optgroup|option|output|progress|select|textarea|details|dialog|menu|menuitem|summary|content|element|shadow|template|acronym|applet|basefont|big|blink|center|command|content|dir|font|frame|frameset|isindex|keygen|listing|marquee|multicol|nextid|noembed|plaintext|spacer|strike|tt|xmp)\\b/\r\n    ],\r\n    [\"members\", /(\\w+)=/]\r\n]);\r\n", "/*\r\npliny.value({\r\n  parent: \"Primrose.Text.Grammars\",\r\n  name: \"JavaScript\",\r\n  description: \"A grammar for the JavaScript programming language.\"\r\n});\r\n*/\r\n\r\nimport { Grammar } from \"./Grammar\";\r\nexport const JavaScript = new Grammar(\"JavaScript\", [\r\n    [\"newlines\", /(?:\\r\\n|\\r|\\n)/],\r\n    [\"whitespace\", /(?:\\s+)/],\r\n    [\"startBlockComments\", /\\/\\*/],\r\n    [\"endBlockComments\", /\\*\\//],\r\n    [\"regexes\", /(?:^|,|;|\\(|\\[|\\{)(?:\\s*)(\\/(?:\\\\\\/|[^\\n\\/])+\\/)/],\r\n    [\"stringDelim\", /(\"|'|`)/],\r\n    [\"startLineComments\", /\\/\\/.*$/m],\r\n    [\"numbers\", /-?(?:(?:\\b\\d*)?\\.)?\\b\\d+\\b/],\r\n    [\"keywords\",\r\n        /\\b(?:break|case|catch|class|const|continue|debugger|default|delete|do|else|export|finally|for|function|if|import|in|instanceof|let|new|return|super|switch|this|throw|try|typeof|var|void|while|with)\\b/\r\n    ],\r\n    [\"functions\", /(\\w+)(?:\\s*\\()/],\r\n    [\"members\", /(\\w+)\\./],\r\n    [\"members\", /((\\w+\\.)+)(\\w+)/]\r\n]);\r\n", "/*\r\npliny.value({\r\n  parent: \"Primrose.Text.Grammars\",\r\n  name: \"PlainText\",\r\n  description: \"A grammar that makes displaying plain text work with the text editor designed for syntax highlighting.\"\r\n});\r\n*/\r\n\r\nimport { Grammar } from \"./Grammar\";\r\nexport const PlainText = new Grammar(\"PlainText\", [\r\n    [\"newlines\", /(?:\\r\\n|\\r|\\n)/],\r\n    [\"whitespace\", /(?:\\s+)/]\r\n]);\r\n", "\uFEFFimport { Basic } from \"./Basic\";\r\nimport { HTML } from \"./HTML\";\r\nimport { JavaScript } from \"./JavaScript\";\r\nimport { PlainText } from \"./PlainText\";\r\nexport * from \"./Grammar\";\r\nexport * from \"./Token\";\r\nexport * from \"./Rule\";\r\n\r\nexport {\r\n    Basic,\r\n    HTML,\r\n    JavaScript,\r\n    PlainText\r\n};\r\n\r\n\r\nexport const grammars = Object.freeze(new Map([\r\n    [\"basic\", Basic],\r\n    [\"bas\", Basic],\r\n    [\"html\", HTML],\r\n    [\"javascript\", JavaScript],\r\n    [\"js\", JavaScript],\r\n    [\"plaintext\", PlainText],\r\n    [\"txt\", PlainText]\r\n]));", "\uFEFFimport { isApple } from \"@juniper-lib/tslib/flags\";\r\n\r\n// These values are defined here:\r\n//   https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n//   Values read on May 24, 2020\r\nexport const keyGroups = Object.freeze(new Map([\r\n    [\"special\", [\r\n        \"Unidentified\"\r\n    ]],\r\n\r\n    [\"modifier\", [\r\n        \"Alt\",\r\n        \"AltGraph\",\r\n        \"CapsLock\",\r\n        \"Control\",\r\n        \"Fn\",\r\n        \"FnLock\",\r\n        \"Hyper\",\r\n        \"Meta\",\r\n        \"NumLock\",\r\n        \"ScrollLock\",\r\n        \"Shift\",\r\n        \"Super\",\r\n        \"Symbol\",\r\n        \"SymbolLock\"\r\n    ]],\r\n\r\n    [\"whitespace\", [\r\n        \"Enter\",\r\n        \"Tab\"\r\n    ]],\r\n\r\n    [\"navigation\", [\r\n        \"ArrowDown\",\r\n        \"ArrowLeft\",\r\n        \"ArrowRight\",\r\n        \"ArrowUp\",\r\n        \"End\",\r\n        \"Home\",\r\n        \"PageDown\",\r\n        \"PageUp\"\r\n    ]],\r\n\r\n    [\"editing\", [\r\n        \"Backspace\",\r\n        \"Clear\",\r\n        \"Copy\",\r\n        \"CrSel\",\r\n        \"Cut\",\r\n        \"Delete\",\r\n        \"EraseEof\",\r\n        \"ExSel\",\r\n        \"Insert\",\r\n        \"Paste\",\r\n        \"Redo\",\r\n        \"Undo\"\r\n    ]],\r\n\r\n    [\"ui\", [\r\n        \"Accept\",\r\n        \"Again\",\r\n        \"Attn\",\r\n        \"Cancel\",\r\n        \"ContextMenu\",\r\n        \"Escape\",\r\n        \"Execute\",\r\n        \"Find\",\r\n        \"Finish\",\r\n        \"Help\",\r\n        \"Pause\",\r\n        \"Play\",\r\n        \"Props\",\r\n        \"Select\",\r\n        \"ZoomIn\",\r\n        \"ZoomOut\"\r\n    ]],\r\n\r\n    [\"device\", [\r\n        \"BrightnessDown\",\r\n        \"BrightnessUp\",\r\n        \"Eject\",\r\n        \"LogOff\",\r\n        \"Power\",\r\n        \"PowerOff\",\r\n        \"PrintScreen\",\r\n        \"Hibernate\",\r\n        \"Standby\",\r\n        \"WakeUp\"\r\n    ]],\r\n\r\n    [\"ime\", [\r\n        \"AllCandidates\",\r\n        \"Alphanumeric\",\r\n        \"CodeInput\",\r\n        \"Compose\",\r\n        \"Convert\",\r\n        \"Dead\",\r\n        \"FinalMode\",\r\n        \"GroupFirst\",\r\n        \"GroupNext\",\r\n        \"GroupPrevious\",\r\n        \"ModeChange\",\r\n        \"NextCandidate\",\r\n        \"NonConvert\",\r\n        \"PreviousCandidate\",\r\n        \"Process\",\r\n        \"SingleCandidate\"\r\n    ]],\r\n\r\n    [\"korean\", [\r\n        \"HangulMode\",\r\n        \"HanjaMode\",\r\n        \"JunjaMode\"\r\n    ]],\r\n\r\n    [\"japanese\", [\r\n        \"Eisu\",\r\n        \"Hankaku\",\r\n        \"Hiragana\",\r\n        \"HiraganaKatakana\",\r\n        \"KanaMode\",\r\n        \"KanjiMode\",\r\n        \"Katakana\",\r\n        \"Romaji\",\r\n        \"Zenkaku\",\r\n        \"ZenkakuHanaku\"\r\n    ]],\r\n\r\n    [\"function\", [\r\n        \"F1\",\r\n        \"F2\",\r\n        \"F3\",\r\n        \"F4\",\r\n        \"F5\",\r\n        \"F6\",\r\n        \"F7\",\r\n        \"F8\",\r\n        \"F9\",\r\n        \"F10\",\r\n        \"F11\",\r\n        \"F12\",\r\n        \"F13\",\r\n        \"F14\",\r\n        \"F15\",\r\n        \"F16\",\r\n        \"F17\",\r\n        \"F18\",\r\n        \"F19\",\r\n        \"F20\",\r\n        \"Soft1\",\r\n        \"Soft2\",\r\n        \"Soft3\",\r\n        \"Soft4\"\r\n    ]],\r\n\r\n    [\"phone\", [\r\n        \"AppSwitch\",\r\n        \"Call\",\r\n        \"Camera\",\r\n        \"CameraFocus\",\r\n        \"EndCall\",\r\n        \"GoBack\",\r\n        \"GoHome\",\r\n        \"HeadsetHook\",\r\n        \"LastNumberRedial\",\r\n        \"Notification\",\r\n        \"MannerMode\",\r\n        \"VoiceDial\"\r\n    ]],\r\n\r\n    [\"multimedia\", [\r\n        \"ChannelDown\",\r\n        \"ChannelUp\",\r\n        \"MediaFastForward\",\r\n        \"MediaPause\",\r\n        \"MediaPlay\",\r\n        \"MediaPlayPause\",\r\n        \"MediaRecord\",\r\n        \"MediaRewind\",\r\n        \"MediaStop\",\r\n        \"MediaTrackNext\",\r\n        \"MediaTrackPrevious\"\r\n    ]],\r\n\r\n    [\"audio\", [\r\n        \"AudioBalanceLeft\",\r\n        \"AudioBalanceRight\",\r\n        \"AudioBassDown\",\r\n        \"AudioBassBoostDown\",\r\n        \"AudioBassBoostToggle\",\r\n        \"AudioBassBoostUp\",\r\n        \"AudioBassUp\",\r\n        \"AudioFaderFront\",\r\n        \"AudioFaderRear\",\r\n        \"AudioSurroundModeNext\",\r\n        \"AudioTrebleDown\",\r\n        \"AudioTrebleUp\",\r\n        \"AudioVolumeDown\",\r\n        \"AudioVolumeMute\",\r\n        \"AudioVolumeUp\",\r\n        \"MicrophoneToggle\",\r\n        \"MicrophoneVolumeDown\",\r\n        \"MicrophoneVolumeMute\",\r\n        \"MicrophoneVolumeUp\"\r\n    ]],\r\n\r\n    [\"tv\", [\r\n        \"TV\",\r\n        \"TV3DMode\",\r\n        \"TVAntennaCable\",\r\n        \"TVAudioDescription\",\r\n        \"TVAudioDescriptionMixDown\",\r\n        \"TVAudioDescriptionMixUp\",\r\n        \"TVContentsMenu\",\r\n        \"TVDataService\",\r\n        \"TVInput\",\r\n        \"TVInputComponent1\",\r\n        \"TVInputComponent2\",\r\n        \"TVInputComposite1\",\r\n        \"TVInputComposite2\",\r\n        \"TVInputHDMI1\",\r\n        \"TVInputHDMI2\",\r\n        \"TVInputHDMI3\",\r\n        \"TVInputHDMI4\",\r\n        \"TVInputVGA1\",\r\n        \"TVMediaContext\",\r\n        \"TVNetwork\",\r\n        \"TVNumberEntry\",\r\n        \"TVPower\",\r\n        \"TVRadioService\",\r\n        \"TVSatellite\",\r\n        \"TVSatelliteBS\",\r\n        \"TVSatelliteCS\",\r\n        \"TVSatelliteToggle\",\r\n        \"TVTerrestrialAnalog\",\r\n        \"TVTerrestrialDigital\",\r\n        \"TVTimer\"\r\n    ]],\r\n\r\n    [\"mediaController\", [\r\n        \"AVRInput\",\r\n        \"AVRPower\",\r\n        \"ColorF0Red\",\r\n        \"ColorF1Green\",\r\n        \"ColorF2Yellow\",\r\n        \"ColorF3Blue\",\r\n        \"ColorF4Grey\",\r\n        \"ColorF5Brown\",\r\n        \"ClosedCaptionToggle\",\r\n        \"Dimmer\",\r\n        \"DisplaySwap\",\r\n        \"DVR\",\r\n        \"Exit\",\r\n        \"FavoriteClear0\",\r\n        \"FavoriteClear1\",\r\n        \"FavoriteClear2\",\r\n        \"FavoriteClear3\",\r\n        \"FavoriteRecall0\",\r\n        \"FavoriteRecall1\",\r\n        \"FavoriteRecall2\",\r\n        \"FavoriteRecall3\",\r\n        \"FavoriteStore0\",\r\n        \"FavoriteStore1\",\r\n        \"FavoriteStore2\",\r\n        \"FavoriteStore3\",\r\n        \"Guide\",\r\n        \"GuideNextDay\",\r\n        \"GuidePreviousDay\",\r\n        \"Info\",\r\n        \"InstantReplay\",\r\n        \"Link\",\r\n        \"ListProgram\",\r\n        \"LiveContent\",\r\n        \"Lock\",\r\n        \"MediaApps\",\r\n        \"MediaAudioTrack\",\r\n        \"MediaLast\",\r\n        \"MediaSkipBackward\",\r\n        \"MediaSkipForward\",\r\n        \"MediaStepBackward\",\r\n        \"MediaStepForward\",\r\n        \"MediaTopMenu\",\r\n        \"NavigateIn\",\r\n        \"NavigateNext\",\r\n        \"NavigateOut\",\r\n        \"NavigatePrevious\",\r\n        \"NextFavoriteChannel\",\r\n        \"NextUserProfile\",\r\n        \"OnDemand\",\r\n        \"Pairing\",\r\n        \"PinPDown\",\r\n        \"PinPMove\",\r\n        \"PinPToggle\",\r\n        \"PinPUp\",\r\n        \"PlaySpeedDown\",\r\n        \"PlaySpeedReset\",\r\n        \"PlaySpeedUp\",\r\n        \"RandomToggle\",\r\n        \"RcLowBattery\",\r\n        \"RecordSpeedNext\",\r\n        \"RfBypass\",\r\n        \"ScanChannelsToggle\",\r\n        \"ScreenModeNext\",\r\n        \"Settings\",\r\n        \"SplitScreenToggle\",\r\n        \"STBInput\",\r\n        \"STBPower\",\r\n        \"Subtitle\",\r\n        \"Teletext\",\r\n        \"VideoModeNext\",\r\n        \"Wink\",\r\n        \"ZoomToggle\"\r\n    ]],\r\n\r\n    [\"speechRecognition\", [\r\n        \"SpeechCorrectionList\",\r\n        \"SpeechInputToggle\"\r\n    ]],\r\n\r\n    [\"document\", [\r\n        \"Close\",\r\n        \"New\",\r\n        \"Open\",\r\n        \"Print\",\r\n        \"Save\",\r\n        \"SpellCheck\",\r\n        \"MailForward\",\r\n        \"MailReply\",\r\n        \"MailSend\"\r\n    ]],\r\n\r\n    [\"applicationSelector\", [\r\n        \"LaunchCalculator\",\r\n        \"LaunchCalendar\",\r\n        \"LaunchContacts\",\r\n        \"LaunchMail\",\r\n        \"LaunchMediaPlayer\",\r\n        \"LaunchMusicPlayer\",\r\n        \"LaunchMyComputer\",\r\n        \"LaunchPhone\",\r\n        \"LaunchScreenSaver\",\r\n        \"LaunchSpreadsheet\",\r\n        \"LaunchWebBrowser\",\r\n        \"LaunchWebCam\",\r\n        \"LaunchWordProcessor\",\r\n        \"LaunchApplication1\",\r\n        \"LaunchApplication2\",\r\n        \"LaunchApplication3\",\r\n        \"LaunchApplication4\",\r\n        \"LaunchApplication5\",\r\n        \"LaunchApplication6\",\r\n        \"LaunchApplication7\",\r\n        \"LaunchApplication8\",\r\n        \"LaunchApplication9\",\r\n    ]],\r\n\r\n    [\"browserControl\", [\r\n        \"BrowserBack\",\r\n        \"BrowserFavorites\",\r\n        \"BrowserForward\",\r\n        \"BrowserHome\",\r\n        \"BrowserRefresh\",\r\n        \"BrowserSearch\",\r\n        \"BrowserStop\"\r\n    ]],\r\n\r\n    [\"numericKeypad\", [\r\n        \"Clear\"\r\n    ]]\r\n]));\r\n\r\n// reverse lookup for keyGroups\r\nexport const keyTypes = new Map();\r\nfor (let pair of keyGroups) {\r\n    for (let value of pair[1]) {\r\n        keyTypes.set(value, pair[0]);\r\n    }\r\n}\r\nObject.freeze(keyTypes);\r\n\r\nlet isFnDown = false;\r\nif (isApple()) {\r\n    window.addEventListener(\"keydown\", (evt) => {\r\n        if (evt.key === \"Fn\") {\r\n            isFnDown = true;\r\n        }\r\n    });\r\n\r\n    window.addEventListener(\"keyup\", (evt) => {\r\n        if (evt.key === \"Fn\") {\r\n            isFnDown = false;\r\n        }\r\n    });\r\n}\r\n// Fixes for out-of-spec values that some older browser versions might have returned.\r\nexport function normalizeKeyValue(evt: KeyboardEvent) {\r\n    // modifier\r\n    if (evt.key === \"OS\"\r\n        && (evt.code === \"OSLeft\"\r\n            || evt.code === \"OSRight\")) {\r\n        return \"Meta\";\r\n    }\r\n    else if (evt.key === \"Scroll\") {\r\n        return \"ScrollLock\";\r\n    }\r\n    else if (evt.key === \"Win\") {\r\n        return \"Meta\";\r\n    }\r\n    // whitespace\r\n    else if (evt.key === \"Spacebar\") {\r\n        return \" \";\r\n    }\r\n    else if (evt.key === \"\\n\") {\r\n        return \"Enter\";\r\n    }\r\n    // navigation\r\n    else if (evt.key === \"Down\") {\r\n        return \"ArrowDown\";\r\n    }\r\n    else if (evt.key === \"Left\") {\r\n        return \"ArrowLeft\";\r\n    }\r\n    else if (evt.key === \"Right\") {\r\n        return \"ArrowRight\";\r\n    }\r\n    else if (evt.key === \"Up\") {\r\n        return \"ArrowUp\";\r\n    }\r\n    // editing\r\n    else if (evt.key === \"Del\") {\r\n        return \"Delete\";\r\n    }\r\n    else if (evt.key === \"Delete\"\r\n        && isApple()\r\n        && isFnDown) {\r\n        return \"Backspace\";\r\n    }\r\n    else if (evt.key === \"Crsel\") {\r\n        return \"CrSel\";\r\n    }\r\n    else if (evt.key === \"Exsel\") {\r\n        return \"ExSel\";\r\n    }\r\n    // ui\r\n    else if (evt.key === \"Esc\") {\r\n        return \"Escape\";\r\n    }\r\n    else if (evt.key === \"Apps\") {\r\n        return \"ContextMenu\";\r\n    }\r\n    // device - None\r\n    // ime\r\n    else if (evt.key === \"Multi\") {\r\n        return \"Compose\";\r\n    }\r\n    else if (evt.key === \"Nonconvert\") {\r\n        return \"NonConvert\";\r\n    }\r\n    // korean - None\r\n    // japanese\r\n    else if (evt.key === \"RomanCharacters\") {\r\n        return \"Eisu\";\r\n    }\r\n    else if (evt.key === \"HalfWidth\") {\r\n        return \"Hankaku\";\r\n    }\r\n    else if (evt.key === \"FullWidth\") {\r\n        return \"Zenkaku\";\r\n    }\r\n    // dead - None\r\n    // function - None\r\n    // phone\r\n    else if (evt.key === \"Exit\"\r\n        || evt.key === \"MozHomeScreen\") {\r\n        return \"GoHome\";\r\n    }\r\n    // multimedia\r\n    else if (evt.key === \"MediaNextTrack\") {\r\n        return \"MediaTrackNext\";\r\n    }\r\n    else if (evt.key === \"MediaPreviousTrack\") {\r\n        return \"MediaTrackPrevious\";\r\n    }\r\n    else if (evt.key === \"FastFwd\") {\r\n        return \"MedaiFastFwd\";\r\n    }\r\n    // audio\r\n    else if (evt.key === \"VolumeDown\") {\r\n        return \"AudioVolumeDown\";\r\n    }\r\n    else if (evt.key === \"VolumeMute\") {\r\n        return \"AudioVolumeMute\";\r\n    }\r\n    else if (evt.key === \"VolumeUp\") {\r\n        return \"AudioVolumeUp\";\r\n    }\r\n    // TV\r\n    else if (evt.key === \"Live\") {\r\n        return \"TV\";\r\n    }\r\n    // media\r\n    else if (evt.key === \"Zoom\") {\r\n        return \"ZoomToggle\";\r\n    }\r\n    // speech recognition - None\r\n    // document - None\r\n    // application selector\r\n    else if (evt.key === \"SelectMedia\"\r\n        || evt.key === \"MediaSelect\") {\r\n        return \"LaunchMediaPlayer\";\r\n    }\r\n    // browser - None\r\n    // numeric keypad\r\n    else if (evt.key === \"Add\") {\r\n        return \"+\";\r\n    }\r\n    else if (evt.key === \"Divide\") {\r\n        return \"/\";\r\n    }\r\n    else if (evt.key === \"Decimal\") {\r\n        // this is incorrect for some locales, but\r\n        // this is a deprecated value that is fixed in\r\n        // modern browsers, so it shouldn't come up\r\n        // very often.\r\n        return \".\";\r\n    }\r\n    else if (evt.key === \"Key11\") {\r\n        return \"11\";\r\n    }\r\n    else if (evt.key === \"Key12\") {\r\n        return \"12\";\r\n    }\r\n    else if (evt.key === \"Multiply\") {\r\n        return \"*\";\r\n    }\r\n    else if (evt.key === \"Subtract\") {\r\n        return \"-\";\r\n    }\r\n    else if (evt.key === \"Separator\") {\r\n        // this is incorrect for some locales, but \r\n        // this is a deprecated value that is fixed in\r\n        // modern browsers, so it shouldn't come up\r\n        // very often.\r\n        return \",\";\r\n    }\r\n    return evt.key;\r\n}", "\uFEFFimport { keyTypes, normalizeKeyValue } from \"./keys\";\r\n\r\nconst gesture = Object.seal({\r\n    type: \"\",\r\n    text: \"\",\r\n    command: \"\"\r\n});\r\n\r\n// Translates operating system-specific Browser KeyboardEvents into a\r\n// cross-platform Gesture that can then be dispatched to a CommandPack\r\n// for translation to an EditorCommand.\r\nclass OperatingSystem {\r\n\r\n    readonly makeCommand: (evt: KeyboardEvent) => { type: string; text: string; command: string; };\r\n\r\n    constructor(\r\n        public readonly name: string,\r\n        pre1: string,\r\n        pre2: string,\r\n        redo: string,\r\n        pre3: string,\r\n        home: string,\r\n        end: string,\r\n        pre5: string,\r\n        fullHome: string,\r\n        fullEnd: string) {\r\n\r\n        const pre4 = pre3;\r\n        if (pre3.length === 0) {\r\n            pre3 = \"Normal\";\r\n        }\r\n\r\n        const substitutions = Object.freeze(new Map([\r\n            [\"Normal_ArrowDown\", \"CursorDown\"],\r\n            [\"Normal_ArrowLeft\", \"CursorLeft\"],\r\n            [\"Normal_ArrowRight\", \"CursorRight\"],\r\n            [\"Normal_ArrowUp\", \"CursorUp\"],\r\n            [\"Normal_PageDown\", \"CursorPageDown\"],\r\n            [\"Normal_PageUp\", \"CursorPageUp\"],\r\n            [`${pre2}_ArrowLeft`, \"CursorSkipLeft\"],\r\n            [`${pre2}_ArrowRight`, \"CursorSkipRight\"],\r\n            [`${pre3}_${home}`, \"CursorHome\"],\r\n            [`${pre3}_${end}`, \"CursorEnd\"],\r\n            [`${pre5}_${fullHome}`, \"CursorFullHome\"],\r\n            [`${pre5}_${fullEnd}`, \"CursorFullEnd\"],\r\n\r\n\r\n            [\"Shift_ArrowDown\", \"SelectDown\"],\r\n            [\"Shift_ArrowLeft\", \"SelectLeft\"],\r\n            [\"Shift_ArrowRight\", \"SelectRight\"],\r\n            [\"Shift_ArrowUp\", \"SelectUp\"],\r\n            [\"Shift_PageDown\", \"SelectPageDown\"],\r\n            [\"Shift_PageUp\", \"SelectPageUp\"],\r\n            [`${pre2}Shift_ArrowLeft`, \"SelectSkipLeft\"],\r\n            [`${pre2}Shift_ArrowRight`, \"SelectSkipRight\"],\r\n            [`${pre4}Shift_${home}`, \"SelectHome\"],\r\n            [`${pre4}Shift_${end}`, \"SelectEnd\"],\r\n            [`${pre5}Shift_${fullHome}`, \"SelectFullHome\"],\r\n            [`${pre5}Shift_${fullEnd}`, \"SelectFullEnd\"],\r\n\r\n            [`${pre1}_a`, \"SelectAll\"],\r\n\r\n            [`${pre1}_ArrowDown`, \"ScrollDown\"],\r\n            [`${pre1}_ArrowUp`, \"ScrollUp\"],\r\n\r\n            [\"Normal_Backspace\", \"DeleteLetterLeft\"],\r\n            [\"Normal_Delete\", \"DeleteLetterRight\"],\r\n            [`${pre2}_Backspace`, \"DeleteWordLeft\"],\r\n            [`${pre2}_Delete`, \"DeleteWordRight\"],\r\n            [`Shift_Delete`, \"DeleteLine\"],\r\n\r\n            [\"Normal_Enter\", \"AppendNewline\"],\r\n            [`${pre2}_Enter`, \"PrependNewline\"],\r\n\r\n            [\"Normal_Tab\", \"InsertTab\"],\r\n            [\"Shift_Tab\", \"RemoveTab\"],\r\n\r\n            [`${pre1}_z`, \"Undo\"],\r\n            [redo, \"Redo\"]\r\n        ]));\r\n\r\n        this.makeCommand = (evt: KeyboardEvent) => {\r\n            gesture.text = normalizeKeyValue(evt);\r\n\r\n            gesture.type = keyTypes.has(gesture.text)\r\n                ? keyTypes.get(gesture.text)\r\n                : \"printable\";\r\n\r\n            gesture.command = \"\";\r\n\r\n            if (evt.ctrlKey\r\n                || evt.altKey\r\n                || evt.metaKey) {\r\n                if (gesture.type === \"printable\"\r\n                    || gesture.type === \"whitespace\") {\r\n                    gesture.type = \"special\";\r\n                }\r\n\r\n                if (evt.ctrlKey) {\r\n                    gesture.command += \"Control\";\r\n                }\r\n\r\n                if (evt.altKey) {\r\n                    gesture.command += \"Alt\";\r\n                }\r\n\r\n                if (evt.metaKey) {\r\n                    gesture.command += \"Meta\";\r\n                }\r\n            }\r\n\r\n            if (evt.shiftKey) {\r\n                gesture.command += \"Shift\";\r\n            }\r\n\r\n            if (gesture.command === \"\") {\r\n                gesture.command += \"Normal\";\r\n            }\r\n\r\n            gesture.command += \"_\" + gesture.text;\r\n\r\n            if (substitutions.has(gesture.command)) {\r\n                gesture.command = substitutions.get(gesture.command);\r\n            }\r\n\r\n            if (gesture.command === \"PrependNewline\") {\r\n                gesture.type = \"whitespace\";\r\n            }\r\n\r\n            return gesture;\r\n        }\r\n\r\n        Object.freeze(this);\r\n    }\r\n};\r\n\r\nexport const Windows = new OperatingSystem(\r\n    \"Windows\",\r\n    \"Control\", \"Control\",\r\n    \"Control_y\",\r\n    \"\", \"Home\", \"End\",\r\n    \"Control\", \"Home\", \"End\");\r\n\r\nexport const MacOS = new OperatingSystem(\r\n    \"macOS\",\r\n    \"Meta\", \"Alt\",\r\n    \"MetaShift_z\",\r\n    \"Meta\", \"ArrowLeft\", \"ArrowRight\",\r\n    \"Meta\", \"ArrowUp\", \"ArrowDown\");", "\uFEFF/*\r\npliny.class({\r\n  parent: \"Primrose.Text\",\r\n    name: \"Point\",\r\n    description: \"| [under construction]\"\r\n});\r\n*/\r\n\r\nimport type { Rectangle } from \"./Rectangle\";\r\nimport type { Size } from \"./Size\";\r\n\r\n\r\nexport class Point {\r\n    constructor(public x: number = 0, public y: number = 0) {\r\n        Object.seal(this);\r\n    }\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    copy(p: Point) {\r\n        if (p) {\r\n            this.x = p.x;\r\n            this.y = p.y;\r\n        }\r\n    }\r\n\r\n    toCell(character: Size, scroll: Point, gridBounds: Rectangle) {\r\n        this.x = Math.round(this.x / character.width) + scroll.x - gridBounds.x;\r\n        this.y = Math.floor((this.y / character.height) - 0.25) + scroll.y;\r\n    }\r\n\r\n    inBounds(bounds: Rectangle) {\r\n        return bounds.left <= this.x\r\n            && this.x < bounds.right\r\n            && bounds.top <= this.y\r\n            && this.y < bounds.bottom;\r\n    }\r\n\r\n    clone() {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    toString() {\r\n        return `(x:${this.x}, y:${this.y})`;\r\n    }\r\n}\r\n", "\uFEFFexport class Size {\r\n    constructor(\r\n        public width: number = 0,\r\n        public height: number = 0) {\r\n        Object.seal(this);\r\n    }\r\n\r\n    set(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    copy(s: Size) {\r\n        if (!!s) {\r\n            this.width = s.width;\r\n            this.height = s.height;\r\n        }\r\n    }\r\n\r\n    clone() {\r\n        return new Size(this.width, this.height);\r\n    }\r\n\r\n    toString() {\r\n        return `<w:${this.width}, h:${this.height}>`;\r\n    }\r\n}\r\n", "\uFEFFimport { Point } from \"./Point\";\r\nimport { Size } from \"./Size\";\r\n\r\nexport class Rectangle {\r\n    readonly point: Point;\r\n    readonly size: Size;\r\n\r\n    constructor(x?: number, y?: number, width?: number, height?: number) {\r\n        this.point = new Point(x, y);\r\n        this.size = new Size(width, height);\r\n        Object.freeze(this);\r\n    }\r\n\r\n    get x() {\r\n        return this.point.x;\r\n    }\r\n\r\n    set x(x) {\r\n        this.point.x = x;\r\n    }\r\n\r\n    get left() {\r\n        return this.point.x;\r\n    }\r\n    set left(x) {\r\n        this.point.x = x;\r\n    }\r\n\r\n    get width() {\r\n        return this.size.width;\r\n    }\r\n    set width(width) {\r\n        this.size.width = width;\r\n    }\r\n\r\n    get right() {\r\n        return this.point.x + this.size.width;\r\n    }\r\n    set right(right) {\r\n        this.point.x = right - this.size.width;\r\n    }\r\n\r\n    get y() {\r\n        return this.point.y;\r\n    }\r\n    set y(y) {\r\n        this.point.y = y;\r\n    }\r\n\r\n    get top() {\r\n        return this.point.y;\r\n    }\r\n    set top(y) {\r\n        this.point.y = y;\r\n    }\r\n\r\n    get height() {\r\n        return this.size.height;\r\n    }\r\n    set height(height) {\r\n        this.size.height = height;\r\n    }\r\n\r\n    get bottom() {\r\n        return this.point.y + this.size.height;\r\n    }\r\n    set bottom(bottom) {\r\n        this.point.y = bottom - this.size.height;\r\n    }\r\n\r\n    get area() {\r\n        return this.width * this.height;\r\n    }\r\n\r\n    set(x: number, y: number, width: number, height: number) {\r\n        this.point.set(x, y);\r\n        this.size.set(width, height);\r\n    }\r\n\r\n    copy(r: Rectangle) {\r\n        if (r) {\r\n            this.point.copy(r.point);\r\n            this.size.copy(r.size);\r\n        }\r\n    }\r\n\r\n    clone() {\r\n        return new Rectangle(this.point.x, this.point.y, this.size.width, this.size.height);\r\n    }\r\n\r\n    overlap(r: Rectangle) {\r\n        const left = Math.max(this.left, r.left),\r\n            top = Math.max(this.top, r.top),\r\n            right = Math.min(this.right, r.right),\r\n            bottom = Math.min(this.bottom, r.bottom);\r\n        if (right > left && bottom > top) {\r\n            return new Rectangle(left, top, right - left, bottom - top);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    toString() {\r\n        return `[${this.point.toString()} x ${this.size.toString()}]`;\r\n    }\r\n}\r\n", "\uFEFFimport type { Cursor } from \"./Cursor\";\r\nimport type { Token } from \"./Grammars\";\r\n\r\nexport class Row {\r\n    static emptyRow(startStringIndex: number, startTokenIndex: number, lineNumber: number) {\r\n        return new Row(\"\", [], startStringIndex, startTokenIndex, lineNumber);\r\n    }\r\n\r\n\r\n    private readonly leftCorrections: number[];\r\n    private readonly rightCorrections: number[];\r\n\r\n    constructor(\r\n        public text: string,\r\n        public tokens: Token[],\r\n        public startStringIndex: number,\r\n        public startTokenIndex: number,\r\n        public lineNumber: number) {\r\n\r\n        const graphemes = Object.freeze([...text]);\r\n        this.leftCorrections = new Array<number>(text.length);\r\n        this.rightCorrections = new Array<number>(text.length);\r\n\r\n        let x = 0;\r\n        for (let grapheme of graphemes) {\r\n            this.leftCorrections[x] = 0;\r\n            this.rightCorrections[x] = 0;\r\n            for (let i = 1; i < grapheme.length; ++i) {\r\n                this.leftCorrections[x + i] = -i;\r\n                this.rightCorrections[x + i] = grapheme.length - i;\r\n            }\r\n            x += grapheme.length;\r\n        }\r\n\r\n        Object.seal(this);\r\n    }\r\n\r\n    toString() {\r\n        return this.text;\r\n    }\r\n\r\n    substring(x: number, y?: number) {\r\n        return this.text.substring(x, y);\r\n    }\r\n\r\n    adjust(cursor: Cursor, dir: number) {\r\n        const correction = dir === -1\r\n            ? this.leftCorrections\r\n            : this.rightCorrections;\r\n\r\n        if (cursor.x < correction.length) {\r\n            const delta = correction[cursor.x];\r\n            cursor.x += delta;\r\n            cursor.i += delta;\r\n        }\r\n        else if (dir === 1\r\n            && this.text[this.text.length - 1] === '\\n') {\r\n            this.adjust(cursor, -1);\r\n        }\r\n    }\r\n\r\n    get stringLength() {\r\n        return this.text.length;\r\n    }\r\n\r\n    get endStringIndex() {\r\n        return this.startStringIndex + this.stringLength;\r\n    }\r\n\r\n    get numTokens() {\r\n        return this.tokens.length;\r\n    }\r\n\r\n    get endTokenIndex() {\r\n        return this.startTokenIndex + this.numTokens;\r\n    }\r\n}", "import { CanvasTypes, Context2D, createOffscreenCanvas, isCanvas, isHTMLCanvas, resizeContext, setContextSize } from \"@juniper-lib/dom/canvas\";\r\nimport { border, display, getMonospaceFonts, height, overflow, padding as cssPadding, perc, width } from \"@juniper-lib/dom/css\";\r\nimport { Canvas, elementApply, elementClearChildren } from \"@juniper-lib/dom/tags\";\r\nimport { arrayReplace } from \"@juniper-lib/tslib/collections/arrays\";\r\nimport { TypedEvent, TypedEventBase } from \"@juniper-lib/tslib/events/EventBase\";\r\nimport { isApple, isFirefox } from \"@juniper-lib/tslib/flags\";\r\nimport { isDefined, isString } from \"@juniper-lib/tslib/typeChecks\";\r\nimport { multiLineInput, multiLineOutput, singleLineInput, singleLineOutput } from \"./controlTypes\";\r\nimport { Cursor } from \"./Cursor\";\r\nimport { Delayer } from \"./Delayer\";\r\nimport { grammars, JavaScript, Grammar, Token } from \"./Grammars\";\r\nimport { MacOS, Windows } from \"./os\";\r\nimport { Point } from \"./Point\";\r\nimport { Rectangle } from \"./Rectangle\";\r\nimport { Row } from \"./Row\";\r\nimport { Size } from \"./Size\";\r\nimport { Dark as DefaultTheme } from \"./themes\";\r\n\r\nexport interface UVEvent {\r\n    uv: {\r\n        x: number;\r\n        y: number;\r\n    }\r\n}\r\n\r\nexport interface PointerControlMap {\r\n\r\n    /// <summary>\r\n    /// Read's a THREE Raycast intersection to perform the hover gestures.\r\n    // </summary>\r\n    readOverEventUV: () => void;\r\n\r\n    /// <summary>\r\n    /// Read's a THREE Raycast intersection to perform the end of the hover gesture.\r\n    // </summary>\r\n    readOutEventUV: () => void;\r\n\r\n    /// <summary>\r\n    /// Read's a THREE Raycast intersection to perform mouse-like behavior for primary-button-down gesture.\r\n    // </summary>\r\n    readDownEventUV: (evt: UVEvent) => void;\r\n\r\n    /// <summary>\r\n    /// Read's a THREE Raycast intersection to perform mouse-like behavior for primary-button-up gesture.\r\n    // </summary>\r\n    readUpEventUV: (evt: UVEvent) => void;\r\n\r\n    /// <summary>\r\n    /// Read's a THREE Raycast intersection to perform mouse-like behavior for move gesture, whether the primary button is pressed or not.\r\n    // </summary>\r\n    readMoveEventUV: (evt: UVEvent) => void;\r\n}\r\n\r\nexport interface PrimroseOptions {\r\n    readOnly: boolean;\r\n    multiLine: boolean;\r\n    wordWrap: boolean;\r\n    scrollBars: boolean;\r\n    lineNumbers: boolean;\r\n    padding: number;\r\n    fontSize: number;\r\n    language: string | Grammar;\r\n    scaleFactor: number;\r\n    element: HTMLElement;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface History {\r\n    value: string;\r\n    frontCursor: number;\r\n    backCursor: number;\r\n}\r\n\r\nfunction minDelta(v: number, minV: number, maxV: number): number {\r\n    const dvMinV = v - minV;\r\n    const dvMaxV = v - maxV + 5;\r\n    let dv = 0;\r\n    if (dvMinV < 0 || dvMaxV >= 0) {\r\n        // compare the absolute values, so we get the smallest change\r\n        // regardless of direction.\r\n        dv = Math.abs(dvMinV) < Math.abs(dvMaxV)\r\n            ? dvMinV\r\n            : dvMaxV;\r\n    }\r\n\r\n    return dv;\r\n}\r\n\r\n//>>>>>>>>>> PRIVATE STATIC FIELDS >>>>>>>>>>\r\nlet focusedControl: Primrose = null,\r\n    hoveredControl: Primrose = null;\r\n\r\nconst publicControls: Primrose[] = [],\r\n    controls: Primrose[] = [],\r\n    wheelScrollSpeed = 4,\r\n    vScrollWidth = 2,\r\n    scrollScale = isFirefox() ? 3 : 100,\r\n    optionDefaults: Partial<PrimroseOptions> = Object.freeze({\r\n        readOnly: false,\r\n        multiLine: true,\r\n        wordWrap: true,\r\n        scrollBars: true,\r\n        lineNumbers: true,\r\n        padding: 0,\r\n        fontSize: 16,\r\n        language: \"JavaScript\",\r\n        scaleFactor: devicePixelRatio\r\n    }),\r\n    elements: WeakMap<any, Primrose> = new WeakMap(),\r\n    ready = (document.readyState === \"complete\"\r\n        ? Promise.resolve(\"already\")\r\n        : new Promise((resolve) => {\r\n            document.addEventListener(\"readystatechange\", () => {\r\n                if (document.readyState === \"complete\") {\r\n                    resolve(\"had to wait for it\");\r\n                }\r\n            }, false);\r\n        }))\r\n        .then(() => {\r\n            for (let element of document.getElementsByTagName(\"primrose\")) {\r\n                new Primrose({\r\n                    element: element as HTMLElement\r\n                });\r\n            }\r\n        });\r\n\r\n//<<<<<<<<<< PRIVATE STATIC FIELDS <<<<<<<<<<\r\n\r\nexport class Primrose extends TypedEventBase<{\r\n    blur: TypedEvent<\"blur\">;\r\n    focus: TypedEvent<\"focus\">;\r\n    over: TypedEvent<\"over\">;\r\n    out: TypedEvent<\"out\">;\r\n}>{\r\n\r\n    /// <summary>\r\n    /// Registers a new Primrose editor control with the Event Manager, to wire-up key, clipboard, and mouse wheel events, and to manage the currently focused element.\r\n    /// The Event Manager maintains the references in a WeakMap, so when the JS Garbage Collector collects the objects, they will be gone.\r\n    /// Multiple objects may be used to register a single control with the Event Manager without causing issue.This is useful for associating the control with closed objects from other systems, such as Three Mesh objects being targeted for pointer picking.\r\n    /// If you are working with Three, it's recommended to use the Mesh on which you are texturing the canvas as the key when adding the editor to the Event Manager.\r\n    /// </summary>\r\n    static add(key: any, control: Primrose) {\r\n        if (key !== null) {\r\n            elements.set(key, control);\r\n        }\r\n\r\n        if (controls.indexOf(control) === -1) {\r\n            controls.push(control);\r\n            arrayReplace(publicControls, ...controls.slice());\r\n\r\n            control.addEventListener(\"blur\", () => {\r\n                focusedControl = null;\r\n            });\r\n\r\n            control.addEventListener(\"focus\", () => {\r\n                // make sure the previous control knows it has \r\n                // gotten unselected.\r\n                if (focusedControl !== null\r\n                    && (!focusedControl.isInDocument\r\n                        || !control.isInDocument)) {\r\n                    focusedControl.blur();\r\n                }\r\n                focusedControl = control;\r\n            });\r\n\r\n            control.addEventListener(\"over\", () => {\r\n                hoveredControl = control;\r\n            });\r\n\r\n            control.addEventListener(\"out\", () => {\r\n                hoveredControl = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Checks for the existence of a control, by the key that the user supplied when calling `Primrose.add()`\r\n    /// </summary>\r\n    static has(key: any) {\r\n        return elements.has(key);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets the control associated with the given key.\r\n    /// </summary>\r\n    static get(key: any) {\r\n        return elements.has(key)\r\n            ? elements.get(key)\r\n            : null;\r\n    }\r\n\r\n    /// <summary>\r\n    /// The current `Primrose` control that has the mouse hovered over it. In 2D contexts, you probably don't need to check this value, but in WebGL contexts, this is useful for helping Primrose manage events.\r\n    /// If no control is hovered, this returns `null`.\r\n    /// </summary>\r\n    static get hoveredControl() {\r\n        return hoveredControl;\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// The current `Primrose` control that has pointer-focus. It will receive all keyboard and clipboard events. In 2D contexts, you probably don't need to check this value, but in WebGL contexts, this is useful for helping Primrose manage events.\r\n    /// If no control is focused, this returns `null`.\r\n    /// </summary>\r\n    static get focusedControl() {\r\n        return focusedControl;\r\n    }\r\n\r\n    /// <summary>\r\n    /// An array of all of the `Primrose` editor controls that Primrose currently knows about.\r\n    /// This array is not mutable and is not the array used by the Event Manager. It is a read-only clone that is created whenever the Event Manager registers or removes a new control\r\n    /// </summary.\r\n    static get editors() {\r\n        return publicControls\r\n    }\r\n\r\n    /// <summary>\r\n    /// A `Promise` that resolves when the document is ready and the Event Manager has finished its initial setup.\r\n    /// </summary>\r\n    static get ready() {\r\n        return ready;\r\n    }\r\n\r\n    private _value = \"\";\r\n    private _padding = 0;\r\n    private _fontSize: number = null;\r\n    private _scaleFactor = 2;\r\n    private _readOnly = false;\r\n    private _wordWrap = false;\r\n    private _multiLine = false;\r\n    private _language = JavaScript;\r\n    private _showScrollBars = false;\r\n    private _showLineNumbers = false;\r\n    private _hovered = false;\r\n    private _focused = false;\r\n    private _element: HTMLElement = null;\r\n    private _theme = DefaultTheme;\r\n    private _tabWidth = 2;\r\n\r\n    private currentTouchID: number = null;\r\n    private vibX = 0;\r\n    private vibY = 0;\r\n    private tx = 0;\r\n    private ty = 0;\r\n    private canv: CanvasTypes = null;\r\n    private resized = false;\r\n    private pressed = false;\r\n    private tabString = \"  \";\r\n    private dragging = false;\r\n    private historyIndex = -1;\r\n    private scrolling = false;\r\n    private tabPressed = false;\r\n    private lineCount = 1;\r\n    private lineCountWidth = 0;\r\n    private controlType = singleLineOutput;\r\n    private maxVerticalScroll = 0;\r\n    private currentValue = \"\";\r\n    private currentTabIndex = -1;\r\n\r\n    private lastCharacterHeight: number = null;\r\n    private lastCharacterWidth: number = null;\r\n    private lastFrontCursor: number = null;\r\n    private lastGridBounds: string = null;\r\n    private lastBackCursor: number = null;\r\n    private lastThemeName: string = null;\r\n    private lastPadding: number = null;\r\n    private lastFocused: boolean = null;\r\n    private lastScrollX: number = null;\r\n    private lastScrollY: number = null;\r\n    private lastScrollDX: number = null;\r\n    private lastScrollDY: number = null;\r\n    private lastFont: string = null;\r\n    private lastText: string = null;\r\n\r\n    private readonly history: History[] = [];\r\n    private readonly tokens = new Array<Token>();\r\n    private readonly rows = [Row.emptyRow(0, 0, 0)];\r\n    private readonly scroll = new Point();\r\n    private readonly pointer = new Point();\r\n    private readonly character = new Size();\r\n    private readonly bottomRightGutter = new Size();\r\n    private readonly gridBounds = new Rectangle();\r\n    private readonly tokenBack = new Cursor();\r\n    private readonly tokenFront = new Cursor();\r\n    private readonly backCursor = new Cursor();\r\n    private readonly frontCursor = new Cursor();\r\n    private readonly outEvt = new TypedEvent(\"out\");\r\n    private readonly overEvt = new TypedEvent(\"over\");\r\n    private readonly blurEvt = new TypedEvent(\"blur\");\r\n    private readonly focusEvt = new TypedEvent(\"focus\");\r\n    private readonly changeEvt = new TypedEvent(\"change\");\r\n    private readonly updateEvt = new TypedEvent(\"update\");\r\n    private readonly os = isApple() ? MacOS : Windows;\r\n    private readonly longPress = new Delayer(1000);\r\n\r\n    private readonly keyPressCommands: Readonly<Map<string, () => void>>;\r\n    private readonly keyDownCommands: Readonly<Map<string, (evt: KeyboardEvent) => void>>;\r\n    private readonly _mouse: PointerControlMap;\r\n    private readonly _touch: PointerControlMap;\r\n\r\n    private readonly context: Context2D;\r\n    private readonly fg: CanvasTypes;\r\n    private readonly fgfx: Context2D;\r\n    private readonly bg: CanvasTypes;\r\n    private readonly bgfx: Context2D;\r\n    private readonly tg: CanvasTypes;\r\n    private readonly tgfx: Context2D;\r\n\r\n    constructor(options: Partial<PrimroseOptions>) {\r\n        super();\r\n\r\n        //>>>>>>>>>> VALIDATE PARAMETERS >>>>>>>>>>\r\n        options = options || {};\r\n\r\n        if (options.element === undefined) {\r\n            options.element = null;\r\n        }\r\n\r\n        if (options.element !== null\r\n            && !(options.element instanceof HTMLElement)) {\r\n            throw new Error(\"element must be null, an instance of HTMLElement, an instance of HTMLCanvaseElement, or an instance of OffscreenCanvas\");\r\n        }\r\n\r\n        options = Object.assign({}, optionDefaults, options);\r\n        //<<<<<<<<<< VALIDATE PARAMETERS <<<<<<<<<<\r\n\r\n\r\n        //>>>>>>>>>> KEY EVENT HANDLERS >>>>>>>>>>\r\n        this.keyDownCommands = Object.freeze(new Map<string, (evt: KeyboardEvent) => void>([\r\n            [\"CursorUp\", () => {\r\n                const minCursor = Cursor.min(this.frontCursor, this.backCursor);\r\n                const maxCursor = Cursor.max(this.frontCursor, this.backCursor);\r\n                minCursor.up(this.rows);\r\n                maxCursor.copy(minCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"CursorDown\", () => {\r\n                const minCursor = Cursor.min(this.frontCursor, this.backCursor);\r\n                const maxCursor = Cursor.max(this.frontCursor, this.backCursor);\r\n                maxCursor.down(this.rows);\r\n                minCursor.copy(maxCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"CursorLeft\", () => {\r\n                const minCursor = Cursor.min(this.frontCursor, this.backCursor);\r\n                const maxCursor = Cursor.max(this.frontCursor, this.backCursor);\r\n                if (minCursor.i === maxCursor.i) {\r\n                    minCursor.left(this.rows);\r\n                }\r\n                maxCursor.copy(minCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"CursorRight\", () => {\r\n                const minCursor = Cursor.min(this.frontCursor, this.backCursor);\r\n                const maxCursor = Cursor.max(this.frontCursor, this.backCursor);\r\n                if (minCursor.i === maxCursor.i) {\r\n                    maxCursor.right(this.rows);\r\n                }\r\n                minCursor.copy(maxCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"CursorPageUp\", () => {\r\n                const minCursor = Cursor.min(this.frontCursor, this.backCursor);\r\n                const maxCursor = Cursor.max(this.frontCursor, this.backCursor);\r\n                minCursor.incY(this.rows, -this.gridBounds.height);\r\n                maxCursor.copy(minCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"CursorPageDown\", () => {\r\n                const minCursor = Cursor.min(this.frontCursor, this.backCursor);\r\n                const maxCursor = Cursor.max(this.frontCursor, this.backCursor);\r\n                maxCursor.incY(this.rows, this.gridBounds.height);\r\n                minCursor.copy(maxCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"CursorSkipLeft\", () => {\r\n                const minCursor = Cursor.min(this.frontCursor, this.backCursor);\r\n                const maxCursor = Cursor.max(this.frontCursor, this.backCursor);\r\n                if (minCursor.i === maxCursor.i) {\r\n                    minCursor.skipLeft(this.rows);\r\n                }\r\n                maxCursor.copy(minCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"CursorSkipRight\", () => {\r\n                const minCursor = Cursor.min(this.frontCursor, this.backCursor);\r\n                const maxCursor = Cursor.max(this.frontCursor, this.backCursor);\r\n                if (minCursor.i === maxCursor.i) {\r\n                    maxCursor.skipRight(this.rows);\r\n                }\r\n                minCursor.copy(maxCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"CursorHome\", () => {\r\n                this.frontCursor.home();\r\n                this.backCursor.copy(this.frontCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"CursorEnd\", () => {\r\n                this.frontCursor.end(this.rows);\r\n                this.backCursor.copy(this.frontCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"CursorFullHome\", () => {\r\n                this.frontCursor.fullHome();\r\n                this.backCursor.copy(this.frontCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"CursorFullEnd\", () => {\r\n                this.frontCursor.fullEnd(this.rows);\r\n                this.backCursor.copy(this.frontCursor);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"SelectDown\", () => {\r\n                this.backCursor.down(this.rows);\r\n                this.scrollIntoView(this.frontCursor);\r\n            }],\r\n\r\n            [\"SelectLeft\", () => {\r\n                this.backCursor.left(this.rows);\r\n                this.scrollIntoView(this.backCursor);\r\n            }],\r\n\r\n            [\"SelectRight\", () => {\r\n                this.backCursor.right(this.rows);\r\n                this.scrollIntoView(this.backCursor);\r\n            }],\r\n\r\n            [\"SelectUp\", () => {\r\n                this.backCursor.up(this.rows);\r\n                this.scrollIntoView(this.backCursor);\r\n            }],\r\n\r\n            [\"SelectPageDown\", () => {\r\n                this.backCursor.incY(this.rows, this.gridBounds.height);\r\n                this.scrollIntoView(this.backCursor);\r\n            }],\r\n\r\n            [\"SelectPageUp\", () => {\r\n                this.backCursor.incY(this.rows, -this.gridBounds.height);\r\n                this.scrollIntoView(this.backCursor);\r\n            }],\r\n\r\n            [\"SelectSkipLeft\", () => {\r\n                this.backCursor.skipLeft(this.rows);\r\n                this.scrollIntoView(this.backCursor);\r\n            }],\r\n\r\n            [\"SelectSkipRight\", () => {\r\n                this.backCursor.skipRight(this.rows);\r\n                this.scrollIntoView(this.backCursor);\r\n            }],\r\n\r\n            [\"SelectHome\", () => {\r\n                this.backCursor.home();\r\n                this.scrollIntoView(this.backCursor);\r\n            }],\r\n\r\n            [\"SelectEnd\", () => {\r\n                this.backCursor.end(this.rows);\r\n                this.scrollIntoView(this.backCursor);\r\n            }],\r\n\r\n            [\"SelectFullHome\", () => {\r\n                this.backCursor.fullHome();\r\n                this.scrollIntoView(this.backCursor);\r\n            }],\r\n\r\n            [\"SelectFullEnd\", () => {\r\n                this.backCursor.fullEnd(this.rows);\r\n                this.scrollIntoView(this.backCursor);\r\n            }],\r\n\r\n            [\"SelectAll\", () => {\r\n                this.frontCursor.fullHome();\r\n                this.backCursor.fullEnd(this.rows);\r\n                this.render();\r\n            }],\r\n\r\n            [\"ScrollDown\", () => {\r\n                if (this.scroll.y < this.rows.length - this.gridBounds.height) {\r\n                    this.scrollBy(0, 1);\r\n                }\r\n            }],\r\n\r\n            [\"ScrollUp\", () => {\r\n                if (this.scroll.y > 0) {\r\n                    this.scrollBy(0, -1);\r\n                }\r\n            }],\r\n\r\n            [\"DeleteLetterLeft\", () => {\r\n                if (this.frontCursor.i === this.backCursor.i) {\r\n                    this.backCursor.left(this.rows);\r\n                }\r\n                this.setSelectedText(\"\");\r\n            }],\r\n\r\n            [\"DeleteLetterRight\", () => {\r\n                if (this.frontCursor.i === this.backCursor.i) {\r\n                    this.backCursor.right(this.rows);\r\n                }\r\n                this.setSelectedText(\"\");\r\n            }],\r\n\r\n            [\"DeleteWordLeft\", () => {\r\n                if (this.frontCursor.i === this.backCursor.i) {\r\n                    this.frontCursor.skipLeft(this.rows);\r\n                }\r\n                this.setSelectedText(\"\");\r\n            }],\r\n\r\n            [\"DeleteWordRight\", () => {\r\n                if (this.frontCursor.i === this.backCursor.i) {\r\n                    this.backCursor.skipRight(this.rows);\r\n                }\r\n                this.setSelectedText(\"\");\r\n            }],\r\n\r\n            [\"DeleteLine\", () => {\r\n                if (this.frontCursor.i === this.backCursor.i) {\r\n                    this.frontCursor.home();\r\n                    this.backCursor.end(this.rows);\r\n                    this.backCursor.right(this.rows);\r\n                }\r\n                this.setSelectedText(\"\");\r\n            }],\r\n\r\n            [\"Undo\", () => {\r\n                this.moveInHistory(-1);\r\n            }],\r\n\r\n            [\"Redo\", () => {\r\n                this.moveInHistory(1);\r\n            }],\r\n\r\n            [\"InsertTab\", () => {\r\n                this.tabPressed = true;\r\n                this.setSelectedText(this.tabString);\r\n            }],\r\n\r\n            [\"RemoveTab\", () => {\r\n                const row = this.rows[this.frontCursor.y];\r\n                const toDelete = Math.min(this.frontCursor.x, this.tabWidth);\r\n                for (let i = 0; i < this.frontCursor.x; ++i) {\r\n                    if (row.text[i] !== ' ') {\r\n                        // can only remove tabs at the beginning of a row\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                this.backCursor.copy(this.frontCursor);\r\n                this.backCursor.incX(this.rows, -toDelete);\r\n                this.setSelectedText(\"\");\r\n            }]\r\n        ]));\r\n\r\n\r\n        this.keyPressCommands = Object.freeze(new Map([\r\n            [\"AppendNewline\", () => {\r\n                if (this.multiLine) {\r\n                    let indent = \"\";\r\n                    const row = this.rows[this.frontCursor.y].tokens;\r\n                    if (row.length > 0\r\n                        && row[0].type === \"whitespace\") {\r\n                        indent = row[0].value;\r\n                    }\r\n                    this.setSelectedText(\"\\n\" + indent);\r\n                }\r\n                else {\r\n                    this.dispatchEvent(this.changeEvt);\r\n                }\r\n            }],\r\n\r\n            [\"PrependNewline\", () => {\r\n                if (this.multiLine) {\r\n                    let indent = \"\";\r\n                    const row = this.rows[this.frontCursor.y].tokens;\r\n                    if (row.length > 0\r\n                        && row[0].type === \"whitespace\") {\r\n                        indent = row[0].value;\r\n                    }\r\n                    this.frontCursor.home();\r\n                    this.backCursor.copy(this.frontCursor);\r\n                    this.setSelectedText(indent + \"\\n\");\r\n                }\r\n                else {\r\n                    this.dispatchEvent(this.changeEvt);\r\n                }\r\n            }],\r\n\r\n            [\"Undo\", () => {\r\n                this.moveInHistory(-1);\r\n            }]\r\n        ]));\r\n\r\n        //<<<<<<<<<< KEY EVENT HANDLERS <<<<<<<<<<\r\n\r\n\r\n        //>>>>>>>>>> UV POINTER EVENT HANDLERS >>>>>>>>>>\r\n        this._mouse = Object.freeze({\r\n\r\n            /// <summary>\r\n            /// Read's a THREE Raycast intersection to perform the hover gestures.\r\n            // </summary>\r\n            readOverEventUV: this.pointerOver,\r\n\r\n            /// <summary>\r\n            /// Read's a THREE Raycast intersection to perform the end of the hover gesture.\r\n            // </summary>\r\n            readOutEventUV: this.pointerOut,\r\n\r\n            /// <summary>\r\n            /// Read's a THREE Raycast intersection to perform mouse-like behavior for primary-button-down gesture.\r\n            // </summary>\r\n            readDownEventUV: this.mouseLikePointerDown(this.setUVPointer),\r\n\r\n            /// <summary>\r\n            /// Read's a THREE Raycast intersection to perform mouse-like behavior for primary-button-up gesture.\r\n            // </summary>\r\n            readUpEventUV: this.mouseLikePointerUp,\r\n\r\n            /// <summary>\r\n            /// Read's a THREE Raycast intersection to perform mouse-like behavior for move gesture, whether the primary button is pressed or not.\r\n            // </summary>\r\n            readMoveEventUV: this.mouseLikePointerMove(this.setUVPointer)\r\n        });\r\n\r\n        this._touch = Object.freeze({\r\n\r\n            /// <summary>\r\n            /// Read's a THREE Raycast intersection to perform the end of the hover gesture. This is the same as mouse.readOverEventUV, included for completeness.\r\n            // </summary>\r\n            readOverEventUV: this.pointerOver,\r\n\r\n            /// <summary>\r\n            /// Read's a THREE Raycast intersection to perform the end of the hover gesture. This is the same as mouse.readOutEventUV, included for completeness.\r\n            // </summary>\r\n            readOutEventUV: this.pointerOut,\r\n\r\n            /// <summary>\r\n            /// Read's a THREE Raycast intersection to perform touch-like behavior for the first finger touching down gesture.\r\n            // </summary>\r\n            readDownEventUV: this.touchLikePointerDown(this.setUVPointer),\r\n\r\n            /// <summary>\r\n            /// Read's a THREE Raycast intersection to perform touch-like behavior for the first finger raising up gesture.\r\n            // </summary>\r\n            readMoveEventUV: this.touchLikePointerMove(this.setUVPointer),\r\n\r\n            /// <summary>\r\n            /// Read's a THREE Raycast intersection to perform touch-like behavior for the first finger moving gesture.\r\n            // </summary>\r\n            readUpEventUV: this.touchLikePointerUp\r\n        });\r\n\r\n        //<<<<<<<<<< UV POINTER EVENT HANDLERS <<<<<<<<<<\r\n        //<<<<<<<<<< POINTER EVENT HANDLERS <<<<<<<<<<\r\n\r\n        //>>>>>>>>>> SETUP CANVAS >>>>>>>>>>\r\n\r\n        if (isHTMLCanvas(options.element)) {\r\n            const elem = options.element;\r\n            const width = elem.width;\r\n            const height = elem.height;\r\n            this.currentTabIndex = elem.tabIndex;\r\n\r\n            const optionsStr = elem.dataset.options || \"\";\r\n            const entries = optionsStr.trim().split(',');\r\n            const optionUser: Partial<PrimroseOptions> = {};\r\n            for (let entry of entries) {\r\n                entry = entry.trim();\r\n                if (entry.length > 0) {\r\n                    const pairs = entry.split('=');\r\n                    if (pairs.length > 1) {\r\n                        const key = pairs[0].trim();\r\n                        const value = pairs[1].trim();\r\n                        const boolTest = value.toLocaleLowerCase();\r\n                        if (boolTest === \"true\"\r\n                            || boolTest === \"false\") {\r\n                            (optionUser as any)[key] = boolTest === \"true\";\r\n                        }\r\n                        else {\r\n                            (optionUser as any)[key] = value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.currentValue = elem.textContent;\r\n            options = Object.assign(\r\n                options,\r\n                { width, height },\r\n                optionUser);\r\n        }\r\n\r\n\r\n        if (options.element === null) {\r\n            this.canv = createOffscreenCanvas(options.width, options.height);\r\n        }\r\n        else if (isCanvas(options.element)) {\r\n            this._element = this.canv = options.element;\r\n        }\r\n        else {\r\n            this._element = options.element;\r\n            elementClearChildren(this.element);\r\n\r\n            this.canv = Canvas(\r\n                width(perc(100)),\r\n                height(perc(100))\r\n            );\r\n            this.element.appendChild(this.canv);\r\n            this.element.removeAttribute(\"tabindex\");\r\n\r\n            elementApply(this.element,\r\n                display(\"block\"),\r\n                cssPadding(0),\r\n                border(\"2px inset #c0c0c0\"),\r\n                overflow(\"unset\")\r\n            );\r\n        }\r\n\r\n        if (this.canv instanceof HTMLCanvasElement\r\n            && this.isInDocument) {\r\n\r\n            if (this.currentTabIndex === -1) {\r\n                const tabbableElements = document.querySelectorAll<HTMLElement>(\"[tabindex]\");\r\n                for (let tabbableElement of tabbableElements) {\r\n                    this.currentTabIndex = Math.max(this.currentTabIndex, tabbableElement.tabIndex);\r\n                }\r\n                ++this.currentTabIndex;\r\n            }\r\n\r\n            this.canv.tabIndex = this.currentTabIndex;\r\n            this.canv.style.touchAction = \"none\";\r\n            this.canv.addEventListener(\"focus\", () => this.focus());\r\n            this.canv.addEventListener(\"blur\", () => this.blur());\r\n\r\n            this.canv.addEventListener(\"mouseover\", this.readMouseOverEvent);\r\n            this.canv.addEventListener(\"mouseout\", this.readMouseOutEvent);\r\n            this.canv.addEventListener(\"mousedown\", this.readMouseDownEvent);\r\n            this.canv.addEventListener(\"mouseup\", this.readMouseUpEvent);\r\n            this.canv.addEventListener(\"mousemove\", this.readMouseMoveEvent);\r\n\r\n            this.canv.addEventListener(\"touchstart\", this.readTouchStartEvent);\r\n            this.canv.addEventListener(\"touchend\", this.readTouchEndEvent);\r\n            this.canv.addEventListener(\"touchmove\", this.readTouchMoveEvent);\r\n\r\n            new ResizeObserver(() => this.resize()).observe(this.canv);\r\n        }\r\n        //<<<<<<<<<< SETUP CANVAS <<<<<<<<<<\r\n\r\n        //>>>>>>>>>> SETUP BUFFERS >>>>>>>>>>\r\n\r\n        this.context.imageSmoothingEnabled\r\n            = this.fgfx.imageSmoothingEnabled\r\n            = this.bgfx.imageSmoothingEnabled\r\n            = this.tgfx.imageSmoothingEnabled\r\n            = true;\r\n        this.context.textBaseline\r\n            = this.fgfx.textBaseline\r\n            = this.bgfx.textBaseline\r\n            = this.tgfx.textBaseline\r\n            = \"top\";\r\n\r\n        this.tgfx.textAlign = \"right\";\r\n        this.fgfx.textAlign = \"left\";\r\n        //<<<<<<<<<< SETUP BUFFERS <<<<<<<<<<\r\n\r\n        //>>>>>>>>>> INITIALIZE STATE >>>>>>>>>>\r\n\r\n        this.longPress.addEventListener(\"tick\", () => {\r\n            this.startSelecting();\r\n            this.backCursor.copy(this.frontCursor);\r\n            this.frontCursor.skipLeft(this.rows);\r\n            this.backCursor.skipRight(this.rows);\r\n            this.render();\r\n            navigator.vibrate(20);\r\n        });\r\n\r\n        this.addEventListener(\"blur\", () => {\r\n            if (this.tabPressed) {\r\n                this.tabPressed = false;\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        let language: Grammar = null;\r\n        if (isString(options.language)) {\r\n            options.language = options.language.toLocaleLowerCase();\r\n            if (grammars.has(options.language)) {\r\n                language = grammars.get(options.language);\r\n            }\r\n        }\r\n\r\n        Object.freeze(options);\r\n\r\n        Object.seal(this);\r\n        this.readOnly = options.readOnly;\r\n        this.multiLine = options.multiLine;\r\n        this.wordWrap = options.wordWrap;\r\n        this.showScrollBars = options.scrollBars;\r\n        this.showLineNumbers = options.lineNumbers;\r\n        this.padding = options.padding;\r\n        this.fontSize = options.fontSize;\r\n        this.language = language;\r\n        this.scaleFactor = options.scaleFactor;\r\n        this.value = this.currentValue;\r\n        //<<<<<<<<<< INITIALIZE STATE <<<<<<<<<<\r\n\r\n        // This is done last so that controls that have errored \r\n        // out during their setup don't get added to the control\r\n        // manager.\r\n        Primrose.add(this.element, this);\r\n    }\r\n\r\n\r\n    private _renderTimer: number = null;\r\n    render() {\r\n        if (isDefined(this._renderTimer)) {\r\n            clearTimeout(this._renderTimer);\r\n            this._renderTimer = null;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this._renderTimer = null;\r\n            this.doRender();\r\n        }, 0)\r\n    }\r\n\r\n\r\n\r\n    /// <summary>\r\n    /// The DOM element that was used to construct the `Primrose` control out of the document tree.If the Control was not constructed from the document tree, this value will be`null`.\r\n    /// </summary>\r\n    get element() {\r\n        return this._element;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Returns `false` if `element` is null. Returns `true` otherwise.\r\n    /// </summary>\r\n    get isInDocument() {\r\n        return isHTMLCanvas(this.canv)\r\n            && document.body.contains(this.canv);\r\n    }\r\n\r\n    /// <summary>\r\n    /// The canvas to which the editor is rendering text. If the `options.element` value was set to a canvas, that canvas will be returned. Otherwise, the canvas will be the canvas that Primrose created for the control. If `OffscreenCanvas` is not available, the canvas will be an `HTMLCanvasElement`.\r\n    /// </summary>\r\n    get canvas() {\r\n        return this.canv;\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// Returns `true` when the control has a pointer hovering over it.\r\n    /// </summary>\r\n    get hovered() {\r\n        return this._hovered;\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// Returns `true` when the control has been selected.Writing to this value will change the focus state of the control.\r\n    /// If the control is already focused and`focused` is set to`true`, or the control is not focused and`focus` is set to`false`, nothing happens.\r\n    /// If the control is focused and`focused` is set to`false`, the control is blurred, just as if `blur()` was called.\r\n    /// If the control is not focused and`focused` is set to`true`, the control is blurred, just as if `focus()` was called.\r\n    /// </summary>\r\n    get focused() {\r\n        return this._focused;\r\n    }\r\n\r\n    set focused(f) {\r\n        if (f !== this.focused) {\r\n            if (f) {\r\n                this.focus();\r\n            }\r\n            else {\r\n                this.blur();\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Indicates whether or not the text in the editor control can be modified.\r\n    /// </summary>\r\n    get readOnly() {\r\n        return this._readOnly;\r\n    }\r\n\r\n    set readOnly(r) {\r\n        r = !!r;\r\n        if (r !== this.readOnly) {\r\n            this._readOnly = r;\r\n            this.refreshControlType();\r\n        }\r\n    }\r\n\r\n\r\n    get multiLine() {\r\n        return this._multiLine;\r\n    }\r\n\r\n    set multiLine(m) {\r\n        m = !!m;\r\n        if (m !== this.multiLine) {\r\n            if (!m && this.wordWrap) {\r\n                this.wordWrap = false;\r\n            }\r\n            this._multiLine = m;\r\n            this.refreshControlType();\r\n            this.refreshGutter();\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// Indicates whether or not the text in the editor control will be broken across lines when it reaches the right edge of the editor control.\r\n    /// </summary>\r\n    get wordWrap() {\r\n        return this._wordWrap;\r\n    }\r\n\r\n    set wordWrap(w) {\r\n        w = !!w;\r\n        if (w !== this.wordWrap\r\n            && (this.multiLine\r\n                || !w)) {\r\n            this._wordWrap = w;\r\n            this.refreshGutter();\r\n            this.render();\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// The text value contained in the control. NOTE: if the text value was set with Windows-style newline characters (`\\r\\n`), the newline characters will be normalized to Unix-style newline characters (`\\n`).\r\n    /// </summary>\r\n    get value() {\r\n        return this._value;\r\n    }\r\n\r\n    set value(txt) {\r\n        this.setValue(txt, true);\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// A synonymn for `value`\r\n    /// </summary>\r\n    get text() {\r\n        return this.value;\r\n    }\r\n\r\n    set text(txt) {\r\n        this.setValue(txt, true);\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// The range of text that is currently selected by the cursor. If no text is selected, reading `selectedText` returns the empty string (`\"\"`) and writing to it inserts text at the current cursor location. \r\n    /// If text is selected, reading `selectedText` returns the text between the front and back cursors, writing to it overwrites the selected text, inserting the provided value.\r\n    /// </summary>\r\n    get selectedText() {\r\n        const minCursor = Cursor.min(this.frontCursor, this.backCursor);\r\n        const maxCursor = Cursor.max(this.frontCursor, this.backCursor);\r\n        return this.value.substring(minCursor.i, maxCursor.i);\r\n    }\r\n\r\n    set selectedText(txt) {\r\n        this.setSelectedText(txt);\r\n    }\r\n\r\n    /// <summary>\r\n    /// The string index at which the front cursor is located. NOTE: the \"front cursor\" is the main cursor, but does not necessarily represent the beginning of the selction range. The selection range runs from the minimum of front and back cursors, to the maximum.\r\n    /// </summary>\r\n    get selectionStart() {\r\n        return this.frontCursor.i;\r\n    }\r\n\r\n    set selectionStart(i) {\r\n        i = i | 0;\r\n        if (i !== this.frontCursor.i) {\r\n            this.frontCursor.setI(this.rows, i);\r\n            this.render();\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// The string index at which the back cursor is located. NOTE: the \"back cursor\" is the selection range cursor, but does not necessarily represent the end of the selction range. The selection range runs from the minimum of front and back cursors, to the maximum.\r\n    /// </summary>\r\n    get selectionEnd() {\r\n        return this.backCursor.i;\r\n    }\r\n\r\n    set selectionEnd(i) {\r\n        i = i | 0;\r\n        if (i !== this.backCursor.i) {\r\n            this.backCursor.setI(this.rows, i);\r\n            this.render();\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// If the back cursor is behind the front cursor, this value returns `\"backward\"`. Otherwise, `\"forward\"` is returned.\r\n    /// </summary>\r\n    get selectionDirection() {\r\n        return this.frontCursor.i <= this.backCursor.i\r\n            ? \"forward\"\r\n            : \"backward\"\r\n    }\r\n\r\n    /// <summary>\r\n    /// The number of spaces to insert when the <kbd>Tab</kbd> key is pressed. Changing this value does not convert existing tabs, it only changes future tabs that get inserted.\r\n    /// </summary>\r\n    get tabWidth() {\r\n        return this._tabWidth;\r\n    }\r\n\r\n    set tabWidth(tw) {\r\n        this._tabWidth = tw || 2;\r\n        this.tabString = \"\";\r\n        for (let i = 0; i < this.tabWidth; ++i) {\r\n            this.tabString += \" \";\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// A JavaScript object that defines the color and style values for rendering different UI and text elements.\r\n    /// </summary>\r\n    get theme() {\r\n        return this._theme;\r\n    }\r\n\r\n    set theme(t) {\r\n        if (t !== this.theme) {\r\n            this._theme = t;\r\n            this.render();\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// Set or get the language pack used to tokenize the control text for syntax highlighting.\r\n    /// </summary>\r\n    get language() {\r\n        return this._language;\r\n    }\r\n\r\n    set language(l) {\r\n        if (l !== this.language) {\r\n            this._language = l;\r\n            this.refreshAllTokens();\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// The `Number` of pixels to inset the control rendering from the edge of the canvas. This is useful for texturing objects where the texture edge cannot be precisely controlled. This value is scale-independent.\r\n    /// </summary>\r\n    get padding() {\r\n        return this._padding;\r\n    }\r\n\r\n    set padding(p) {\r\n        p = p | 0;\r\n        if (p !== this.padding) {\r\n            this._padding = p;\r\n            this.render();\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// Indicates whether or not line numbers should be rendered on the left side of the control.\r\n    /// </summary>\r\n    get showLineNumbers() {\r\n        return this._showLineNumbers;\r\n    }\r\n\r\n    set showLineNumbers(s) {\r\n        s = s || false;\r\n        if (s !== this.showLineNumbers) {\r\n            this._showLineNumbers = s;\r\n            this.refreshGutter();\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// Indicates whether or not scroll bars should be rendered at the right and bottom in the control. If wordWrap is enabled, the bottom, horizontal scrollbar will not be rendered.\r\n    /// </summary>\r\n    get showScrollBars() {\r\n        return this._showScrollBars;\r\n    }\r\n\r\n    set showScrollBars(s) {\r\n        s = s || false;\r\n        if (s !== this.showScrollBars) {\r\n            this._showScrollBars = s;\r\n            this.refreshGutter();\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// The `Number` of pixels tall to draw characters. This value is scale-independent.\r\n    /// </summary>\r\n    get fontSize() {\r\n        return this._fontSize;\r\n    }\r\n\r\n    set fontSize(s) {\r\n        s = Math.max(1, s || 0);\r\n        if (s !== this.fontSize) {\r\n            this._fontSize = s;\r\n            this.context.font = `${this.fontSize}px ${getMonospaceFonts()}`;\r\n            this.character.height = this.fontSize;\r\n            // measure 100 letter M's, then divide by 100, to get the width of an M\r\n            // to two decimal places on systems that return integer values from\r\n            // measureText.\r\n            this.character.width = this.context.measureText(\r\n                \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\")\r\n                .width /\r\n                100;\r\n            this.refreshAllTokens();\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// The value by which pixel values are scaled before being used by the editor control.\r\n    /// With THREE, it's best to set this value to 1 and change the width, height, and fontSize manually.\r\n    /// </summary>\r\n    get scaleFactor() {\r\n        return this._scaleFactor;\r\n    }\r\n\r\n    set scaleFactor(s) {\r\n        s = Math.max(0.25, Math.min(4, s || 0));\r\n        if (s !== this.scaleFactor) {\r\n            const lastWidth = this.width;\r\n            const lastHeight = this.height\r\n            this._scaleFactor = s;\r\n            this.setSize(lastWidth, lastHeight);\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// The scale-independent width of the editor control.\r\n    /// </summary>\r\n    get width() {\r\n        return this.canv.width / this.scaleFactor;\r\n    }\r\n\r\n    set width(w) {\r\n        this.setSize(w, this.height)\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// The scale-independent height of the editor control.\r\n    /// </summary>\r\n    get height() {\r\n        return this.canv.height / this.scaleFactor;\r\n    }\r\n\r\n    set height(h) {\r\n        this.setSize(this.width, h);\r\n    }\r\n\r\n    get mouse() {\r\n        return this._mouse;\r\n    }\r\n\r\n    get touch() {\r\n        return this._touch;\r\n    }\r\n\r\n\r\n    //>>>>>>>>>> PRIVATE METHODS >>>>>>>>>>\r\n    //>>>>>>>>>> RENDERING >>>>>>>>>>\r\n\r\n    private fillRect(gfx: Context2D, fill: CSSColorValue, x: number, y: number, w: number, h: number) {\r\n        gfx.fillStyle = fill;\r\n        gfx.fillRect(\r\n            x * this.character.width,\r\n            y * this.character.height,\r\n            w * this.character.width + 1,\r\n            h * this.character.height + 1);\r\n    }\r\n\r\n    private strokeRect(gfx: Context2D, stroke: CSSColorValue, x: number, y: number, w: number, h: number) {\r\n        gfx.strokeStyle = stroke;\r\n        gfx.strokeRect(\r\n            x * this.character.width,\r\n            y * this.character.height,\r\n            w * this.character.width + 1,\r\n            h * this.character.height + 1);\r\n    }\r\n\r\n    private renderCanvasBackground() {\r\n        const minCursor = Cursor.min(this.frontCursor, this.backCursor);\r\n        const maxCursor = Cursor.max(this.frontCursor, this.backCursor);\r\n\r\n        this.bgfx.clearRect(0, 0, this.canv.width, this.canv.height);\r\n        if (this.theme.regular.backColor) {\r\n            this.bgfx.fillStyle = this.theme.regular.backColor;\r\n            this.bgfx.fillRect(0, 0, this.canv.width, this.canv.height);\r\n        }\r\n\r\n        this.bgfx.save();\r\n        this.bgfx.scale(this.scaleFactor, this.scaleFactor);\r\n        this.bgfx.translate(\r\n            (this.gridBounds.x - this.scroll.x) * this.character.width + this.padding,\r\n            -this.scroll.y * this.character.height + this.padding);\r\n\r\n\r\n        // draw the current row highlighter\r\n        if (this.focused) {\r\n            this.fillRect(this.bgfx, this.theme.currentRowBackColor ||\r\n                DefaultTheme.currentRowBackColor,\r\n                0, minCursor.y,\r\n                this.gridBounds.width,\r\n                maxCursor.y - minCursor.y + 1);\r\n        }\r\n\r\n        const minY = this.scroll.y | 0;\r\n        const maxY = minY + this.gridBounds.height;\r\n        const minX = this.scroll.x | 0;\r\n        const maxX = minX + this.gridBounds.width;\r\n        this.tokenFront.setXY(this.rows, 0, minY);\r\n        this.tokenBack.copy(this.tokenFront);\r\n        for (let y = minY; y <= maxY && y < this.rows.length; ++y) {\r\n            // draw the tokens on this row\r\n            const row = this.rows[y].tokens;\r\n            for (let i = 0; i < row.length; ++i) {\r\n                const t = row[i];\r\n                this.tokenBack.x += t.length;\r\n                this.tokenBack.i += t.length;\r\n\r\n                // skip drawing tokens that aren't in view\r\n                if (minX <= this.tokenBack.x && this.tokenFront.x <= maxX) {\r\n                    // draw the selection box\r\n                    const inSelection = minCursor.i <= this.tokenBack.i\r\n                        && this.tokenFront.i < maxCursor.i;\r\n                    if (inSelection) {\r\n                        const selectionFront = Cursor.max(minCursor, this.tokenFront);\r\n                        const selectionBack = Cursor.min(maxCursor, this.tokenBack);\r\n                        const cw = selectionBack.i - selectionFront.i;\r\n                        this.fillRect(this.bgfx, this.theme.selectedBackColor ||\r\n                            DefaultTheme.selectedBackColor,\r\n                            selectionFront.x, selectionFront.y,\r\n                            cw, 1);\r\n                    }\r\n                }\r\n\r\n                this.tokenFront.copy(this.tokenBack);\r\n            }\r\n\r\n            this.tokenFront.x = 0;\r\n            ++this.tokenFront.y;\r\n            this.tokenBack.copy(this.tokenFront);\r\n        }\r\n\r\n        // draw the cursor caret\r\n        if (this.focused) {\r\n            const cc = this.theme.cursorColor || DefaultTheme.cursorColor;\r\n            const w = 1 / this.character.width;\r\n            this.fillRect(this.bgfx, cc, minCursor.x, minCursor.y, w, 1);\r\n            this.fillRect(this.bgfx, cc, maxCursor.x, maxCursor.y, w, 1);\r\n        }\r\n        this.bgfx.restore();\r\n    }\r\n\r\n    private renderCanvasForeground() {\r\n        this.fgfx.clearRect(0, 0, this.canv.width, this.canv.height);\r\n        this.fgfx.save();\r\n        this.fgfx.scale(this.scaleFactor, this.scaleFactor);\r\n        this.fgfx.translate(\r\n            (this.gridBounds.x - this.scroll.x) * this.character.width + this.padding,\r\n            this.padding);\r\n\r\n        const minY = this.scroll.y | 0;\r\n        const maxY = minY + this.gridBounds.height;\r\n        const minX = this.scroll.x | 0;\r\n        const maxX = minX + this.gridBounds.width;\r\n        this.tokenFront.setXY(this.rows, 0, minY);\r\n        this.tokenBack.copy(this.tokenFront);\r\n        for (let y = minY; y <= maxY && y < this.rows.length; ++y) {\r\n            // draw the tokens on this row\r\n            const row = this.rows[y].tokens;\r\n            const textY = (y - this.scroll.y) * this.character.height;\r\n\r\n            for (let i = 0; i < row.length; ++i) {\r\n                const t = row[i];\r\n                this.tokenBack.x += t.length;\r\n                this.tokenBack.i += t.length;\r\n\r\n                // skip drawing tokens that aren't in view\r\n                if (minX <= this.tokenBack.x && this.tokenFront.x <= maxX) {\r\n\r\n                    // draw the text\r\n                    const style = this.theme[t.type] || {};\r\n                    const fontWeight = style.fontWeight\r\n                        || this.theme.regular.fontWeight\r\n                        || DefaultTheme.regular.fontWeight\r\n                        || \"\",\r\n                        fontStyle = style.fontStyle\r\n                            || this.theme.regular.fontStyle\r\n                            || DefaultTheme.regular.fontStyle\r\n                            || \"\",\r\n                        font = `${fontWeight} ${fontStyle} ${this.context.font}`;\r\n                    this.fgfx.font = font.trim();\r\n                    this.fgfx.fillStyle = style.foreColor || this.theme.regular.foreColor;\r\n                    this.fgfx.fillText(\r\n                        t.value,\r\n                        this.tokenFront.x * this.character.width,\r\n                        textY);\r\n                }\r\n\r\n                this.tokenFront.copy(this.tokenBack);\r\n            }\r\n\r\n            this.tokenFront.x = 0;\r\n            ++this.tokenFront.y;\r\n            this.tokenBack.copy(this.tokenFront);\r\n        }\r\n\r\n        this.fgfx.restore();\r\n    }\r\n\r\n    private renderCanvasTrim() {\r\n        this.tgfx.clearRect(0, 0, this.canv.width, this.canv.height);\r\n        this.tgfx.save();\r\n        this.tgfx.scale(this.scaleFactor, this.scaleFactor);\r\n        this.tgfx.translate(this.padding, this.padding);\r\n\r\n        if (this.showLineNumbers) {\r\n            this.fillRect(this.tgfx,\r\n                this.theme.selectedBackColor ||\r\n                DefaultTheme.selectedBackColor,\r\n                0, 0,\r\n                this.gridBounds.x, this.width - this.padding * 2);\r\n            this.strokeRect(this.tgfx,\r\n                this.theme.regular.foreColor ||\r\n                DefaultTheme.regular.foreColor,\r\n                0, 0,\r\n                this.gridBounds.x, this.height - this.padding * 2);\r\n        }\r\n\r\n        let maxRowWidth = 2;\r\n        this.tgfx.save();\r\n        {\r\n            this.tgfx.translate((this.lineCountWidth - 0.5) * this.character.width, -this.scroll.y * this.character.height);\r\n            let lastLineNumber = -1;\r\n            const minY = this.scroll.y | 0;\r\n            const maxY = minY + this.gridBounds.height;\r\n            this.tokenFront.setXY(this.rows, 0, minY);\r\n            this.tokenBack.copy(this.tokenFront);\r\n            for (let y = minY; y <= maxY && y < this.rows.length; ++y) {\r\n                const row = this.rows[y];\r\n                maxRowWidth = Math.max(maxRowWidth, row.stringLength);\r\n                if (this.showLineNumbers) {\r\n                    // draw the left gutter\r\n                    if (row.lineNumber > lastLineNumber) {\r\n                        lastLineNumber = row.lineNumber;\r\n                        this.tgfx.font = \"bold \" + this.context.font;\r\n                        this.tgfx.fillStyle = this.theme.regular.foreColor;\r\n                        this.tgfx.fillText(\r\n                            row.lineNumber.toFixed(0),\r\n                            0, y * this.character.height);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.tgfx.restore();\r\n\r\n        // draw the scrollbars\r\n        if (this.showScrollBars) {\r\n            this.tgfx.fillStyle = this.theme.selectedBackColor ||\r\n                DefaultTheme.selectedBackColor;\r\n\r\n            // horizontal\r\n            if (!this.wordWrap && maxRowWidth > this.gridBounds.width) {\r\n                const drawWidth = this.gridBounds.width * this.character.width - this.padding;\r\n                const scrollX = (this.scroll.x * drawWidth) / maxRowWidth + this.gridBounds.x * this.character.width;\r\n                const scrollBarWidth = drawWidth * (this.gridBounds.width / maxRowWidth);\r\n                const by = this.height - this.character.height - this.padding;\r\n                const bw = Math.max(this.character.width, scrollBarWidth);\r\n                this.tgfx.fillRect(scrollX, by, bw, this.character.height);\r\n                this.tgfx.strokeRect(scrollX, by, bw, this.character.height);\r\n            }\r\n\r\n            //vertical\r\n            if (this.rows.length > this.gridBounds.height) {\r\n                const drawHeight = this.gridBounds.height * this.character.height;\r\n                const scrollY = (this.scroll.y * drawHeight) / this.rows.length;\r\n                const scrollBarHeight = drawHeight * (this.gridBounds.height / this.rows.length);\r\n                const bx = this.width - vScrollWidth * this.character.width - 2 * this.padding;\r\n                const bw = vScrollWidth * this.character.width;\r\n                const bh = Math.max(this.character.height, scrollBarHeight);\r\n                this.tgfx.fillRect(bx, scrollY, bw, bh);\r\n                this.tgfx.strokeRect(bx, scrollY, bw, bh);\r\n            }\r\n        }\r\n\r\n        this.tgfx.restore();\r\n        if (!this.focused) {\r\n            this.tgfx.fillStyle = this.theme.unfocused || DefaultTheme.unfocused;\r\n            this.tgfx.fillRect(0, 0, this.canv.width, this.canv.height);\r\n        }\r\n    }\r\n\r\n    private doRender() {\r\n        if (this.theme) {\r\n            const textChanged = this.lastText !== this.value;\r\n            const focusChanged = this.focused !== this.lastFocused;\r\n            const fontChanged = this.context.font !== this.lastFont;\r\n            const paddingChanged = this.padding !== this.lastPadding;\r\n            const themeChanged = this.theme.name !== this.lastThemeName;\r\n            const boundsChanged = this.gridBounds.toString() !== this.lastGridBounds;\r\n            const characterWidthChanged = this.character.width !== this.lastCharacterWidth;\r\n            const characterHeightChanged = this.character.height !== this.lastCharacterHeight;\r\n\r\n            const cursorChanged = this.frontCursor.i !== this.lastFrontCursor\r\n                || this.backCursor.i !== this.lastBackCursor,\r\n\r\n                scrollChanged = this.scroll.x !== this.lastScrollX\r\n                    || this.scroll.y !== this.lastScrollY,\r\n\r\n                layoutChanged = this.resized\r\n                    || boundsChanged\r\n                    || textChanged\r\n                    || characterWidthChanged\r\n                    || characterHeightChanged\r\n                    || paddingChanged\r\n                    || scrollChanged\r\n                    || themeChanged,\r\n\r\n                backgroundChanged = layoutChanged\r\n                    || cursorChanged,\r\n\r\n                foregroundChanged = layoutChanged\r\n                    || fontChanged,\r\n\r\n                trimChanged = layoutChanged\r\n                    || focusChanged;\r\n\r\n            if (backgroundChanged) {\r\n                this.renderCanvasBackground();\r\n            }\r\n            if (foregroundChanged) {\r\n                this.renderCanvasForeground();\r\n            }\r\n            if (trimChanged) {\r\n                this.renderCanvasTrim();\r\n            }\r\n\r\n            this.context.clearRect(0, 0, this.canv.width, this.canv.height);\r\n            this.context.save();\r\n            this.context.translate(this.vibX, this.vibY);\r\n            this.context.drawImage(this.bg, 0, 0);\r\n            this.context.drawImage(this.fg, 0, 0);\r\n            this.context.drawImage(this.tg, 0, 0);\r\n            this.context.restore();\r\n\r\n            this.lastGridBounds = this.gridBounds.toString();\r\n            this.lastText = this.value;\r\n            this.lastCharacterWidth = this.character.width;\r\n            this.lastCharacterHeight = this.character.height;\r\n            this.lastPadding = this.padding;\r\n            this.lastFrontCursor = this.frontCursor.i;\r\n            this.lastBackCursor = this.backCursor.i;\r\n            this.lastFocused = this.focused;\r\n            this.lastFont = this.context.font;\r\n            this.lastThemeName = this.theme.name;\r\n            this.lastScrollX = this.scroll.x;\r\n            this.lastScrollY = this.scroll.y;\r\n            this.resized = false;\r\n            this.dispatchEvent(this.updateEvt);\r\n        }\r\n    }\r\n    //<<<<<<<<<< RENDERING <<<<<<<<<<\r\n\r\n    private refreshControlType() {\r\n        const lastControlType = this.controlType;\r\n\r\n        if (this.readOnly && this.multiLine) {\r\n            this.controlType = multiLineOutput;\r\n        }\r\n        else if (this.readOnly && !this.multiLine) {\r\n            this.controlType = singleLineOutput;\r\n        }\r\n        else if (!this.readOnly && this.multiLine) {\r\n            this.controlType = multiLineInput;\r\n        }\r\n        else {\r\n            this.controlType = singleLineInput;\r\n        }\r\n\r\n        if (this.controlType !== lastControlType) {\r\n            this.refreshAllTokens();\r\n        }\r\n    }\r\n\r\n    private refreshGutter() {\r\n        if (!this.showScrollBars) {\r\n            this.bottomRightGutter.set(0, 0);\r\n        }\r\n        else if (this.wordWrap) {\r\n            this.bottomRightGutter.set(vScrollWidth, 0);\r\n        }\r\n        else {\r\n            this.bottomRightGutter.set(vScrollWidth, 1);\r\n        }\r\n    }\r\n\r\n    private setValue(txt: string, setUndo: boolean) {\r\n        txt = txt || \"\";\r\n        txt = txt.replace(/\\r\\n/g, \"\\n\");\r\n        if (txt !== this.value) {\r\n            this._value = txt;\r\n            if (setUndo) {\r\n                this.pushUndo();\r\n            }\r\n            this.refreshAllTokens();\r\n            this.dispatchEvent(this.changeEvt);\r\n        }\r\n    }\r\n\r\n    private setSelectedText(txt: string) {\r\n        txt = txt || \"\";\r\n        txt = txt.replace(/\\r\\n/g, \"\\n\");\r\n\r\n        if (this.frontCursor.i !== this.backCursor.i || txt.length > 0) {\r\n            const minCursor = Cursor.min(this.frontCursor, this.backCursor);\r\n            const maxCursor = Cursor.max(this.frontCursor, this.backCursor);\r\n            const startRow = this.rows[minCursor.y];\r\n            const endRow = this.rows[maxCursor.y];\r\n\r\n            const unchangedLeft = this.value.substring(0, startRow.startStringIndex);\r\n            const unchangedRight = this.value.substring(endRow.endStringIndex);\r\n\r\n            const changedStartSubStringIndex = minCursor.i - startRow.startStringIndex;\r\n            const changedLeft = startRow.substring(0, changedStartSubStringIndex);\r\n\r\n            const changedEndSubStringIndex = maxCursor.i - endRow.startStringIndex;\r\n            const changedRight = endRow.substring(changedEndSubStringIndex);\r\n\r\n            const changedText = changedLeft + txt + changedRight;\r\n\r\n            this.value = unchangedLeft + changedText + unchangedRight;\r\n            this.pushUndo();\r\n\r\n            this.refreshTokens(minCursor.y, maxCursor.y, changedText);\r\n            this.frontCursor.setI(this.rows, minCursor.i + txt.length);\r\n            this.backCursor.copy(this.frontCursor);\r\n            this.scrollIntoView(this.frontCursor);\r\n            this.dispatchEvent(this.changeEvt);\r\n        }\r\n    }\r\n\r\n    private refreshAllTokens() {\r\n        this.refreshTokens(0, this.rows.length - 1, this.value);\r\n    }\r\n\r\n    private refreshTokens(startY: number, endY: number, txt: string) {\r\n\r\n        while (startY > 0\r\n            && this.rows[startY].lineNumber === this.rows[startY - 1].lineNumber) {\r\n            --startY;\r\n            txt = this.rows[startY].text + txt;\r\n        }\r\n\r\n        while (endY < this.rows.length - 1 && this.rows[endY].lineNumber === this.rows[endY + 1].lineNumber) {\r\n            ++endY;\r\n            txt += this.rows[endY].text;\r\n        }\r\n\r\n\r\n        const newTokens = this.language.tokenize(txt);\r\n        const startRow = this.rows[startY];\r\n        const startTokenIndex = startRow.startTokenIndex;\r\n        const startLineNumber = startRow.lineNumber;\r\n        const startStringIndex = startRow.startStringIndex;\r\n        const endRow = this.rows[endY];\r\n        const endTokenIndex = endRow.endTokenIndex;\r\n        const tokenRemoveCount = endTokenIndex - startTokenIndex;\r\n        const oldTokens = this.tokens.splice(startTokenIndex, tokenRemoveCount, ...newTokens);\r\n\r\n        // figure out the width of the line count gutter\r\n        this.lineCountWidth = 0;\r\n        if (this.showLineNumbers) {\r\n            for (let token of oldTokens) {\r\n                if (token.type === \"newlines\") {\r\n                    --this.lineCount;\r\n                }\r\n            }\r\n\r\n            for (let token of newTokens) {\r\n                if (token.type === \"newlines\") {\r\n                    ++this.lineCount;\r\n                }\r\n            }\r\n\r\n            this.lineCountWidth = Math.max(1, Math.ceil(Math.log(this.lineCount) / Math.LN10)) + 1;\r\n        }\r\n\r\n        // measure the grid\r\n        const x = Math.floor(this.lineCountWidth + this.padding / this.character.width);\r\n        const y = Math.floor(this.padding / this.character.height);\r\n        const w = Math.floor((this.width - 2 * this.padding) / this.character.width) - x - this.bottomRightGutter.width;\r\n        const h = Math.floor((this.height - 2 * this.padding) / this.character.height) - y - this.bottomRightGutter.height;\r\n        this.gridBounds.set(x, y, w, h);\r\n\r\n        // Perform the layout\r\n        const tokenQueue = newTokens.map(t => t.clone());\r\n        const rowRemoveCount = endY - startY + 1;\r\n        const newRows = [];\r\n\r\n        let currentString = \"\";\r\n        let currentTokens = [];\r\n        let currentStringIndex = startStringIndex;\r\n        let currentTokenIndex = startTokenIndex;\r\n        let currentLineNumber = startLineNumber;\r\n\r\n        for (let i = 0; i < tokenQueue.length; ++i) {\r\n            const t = tokenQueue[i];\r\n            const widthLeft = this.gridBounds.width - currentString.length;\r\n            const wrap = this.wordWrap && t.type !== \"newlines\" && t.length > widthLeft;\r\n            const breakLine = t.type === \"newlines\" || wrap;\r\n\r\n            if (wrap) {\r\n                const split = t.length > this.gridBounds.width\r\n                    ? widthLeft\r\n                    : 0;\r\n                tokenQueue.splice(i + 1, 0, t.splitAt(split));\r\n            }\r\n\r\n            currentTokens.push(t);\r\n            currentString += t.value;\r\n\r\n            if (breakLine\r\n                || i === tokenQueue.length - 1) {\r\n                newRows.push(new Row(currentString, currentTokens, currentStringIndex, currentTokenIndex, currentLineNumber));\r\n                currentStringIndex += currentString.length;\r\n                currentTokenIndex += currentTokens.length;\r\n\r\n                currentTokens = [];\r\n                currentString = \"\";\r\n\r\n                if (t.type === \"newlines\") {\r\n                    ++currentLineNumber;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.rows.splice(startY, rowRemoveCount, ...newRows);\r\n\r\n        // renumber rows\r\n        for (let y = startY + newRows.length; y < this.rows.length; ++y) {\r\n            const row = this.rows[y];\r\n            row.lineNumber = currentLineNumber;\r\n            row.startStringIndex = currentStringIndex;\r\n            row.startTokenIndex += currentTokenIndex;\r\n\r\n            currentStringIndex += row.stringLength;\r\n            currentTokenIndex += row.numTokens;\r\n\r\n            if (row.tokens[row.tokens.length - 1].type === \"newlines\") {\r\n                ++currentLineNumber;\r\n            }\r\n        }\r\n\r\n        // provide editing room at the end of the buffer\r\n        if (this.rows.length === 0) {\r\n            this.rows.push(Row.emptyRow(0, 0, 0));\r\n        }\r\n        else {\r\n            const lastRow = this.rows[this.rows.length - 1];\r\n            if (lastRow.text.endsWith('\\n')) {\r\n                this.rows.push(Row.emptyRow(lastRow.endStringIndex, lastRow.endTokenIndex, lastRow.lineNumber + 1));\r\n            }\r\n        }\r\n\r\n        this.maxVerticalScroll = Math.max(0, this.rows.length - this.gridBounds.height);\r\n\r\n        this.render();\r\n    }\r\n\r\n    private refreshBuffers() {\r\n        this.resized = true;\r\n        setContextSize(this.fgfx, this.canv.width, this.canv.height);\r\n        setContextSize(this.bgfx, this.canv.width, this.canv.height);\r\n        setContextSize(this.tgfx, this.canv.width, this.canv.height);\r\n        this.refreshAllTokens();\r\n    }\r\n\r\n    private clampScroll() {\r\n        const toHigh = this.scroll.y < 0 || this.maxVerticalScroll === 0;\r\n        const toLow = this.scroll.y > this.maxVerticalScroll;\r\n\r\n        if (toHigh) {\r\n            this.scroll.y = 0;\r\n        }\r\n        else if (toLow) {\r\n            this.scroll.y = this.maxVerticalScroll;\r\n        }\r\n        this.render();\r\n\r\n        return toHigh || toLow;\r\n    }\r\n\r\n    private scrollIntoView(currentCursor: Cursor) {\r\n        const dx = minDelta(currentCursor.x, this.scroll.x, this.scroll.x + this.gridBounds.width);\r\n        const dy = minDelta(currentCursor.y, this.scroll.y, this.scroll.y + this.gridBounds.height);\r\n        this.scrollBy(dx, dy);\r\n    }\r\n\r\n    private pushUndo() {\r\n        if (this.historyIndex < this.history.length - 1) {\r\n            this.history.splice(this.historyIndex + 1);\r\n        }\r\n        this.history.push({\r\n            value: this.value,\r\n            frontCursor: this.frontCursor.i,\r\n            backCursor: this.backCursor.i\r\n        });\r\n        this.historyIndex = this.history.length - 1;\r\n    }\r\n\r\n    private moveInHistory(dh: number) {\r\n        const nextHistoryIndex = this.historyIndex + dh;\r\n        if (0 <= nextHistoryIndex && nextHistoryIndex < this.history.length) {\r\n            const curFrame = this.history[this.historyIndex];\r\n            this.historyIndex = nextHistoryIndex;\r\n            const nextFrame = this.history[this.historyIndex];\r\n            this.setValue(nextFrame.value, false);\r\n            this.frontCursor.setI(this.rows, curFrame.frontCursor);\r\n            this.backCursor.setI(this.rows, curFrame.backCursor);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Removes focus from the control.\r\n    /// </summary>\r\n    blur() {\r\n        if (this.focused) {\r\n            this._focused = false;\r\n            this.dispatchEvent(this.blurEvt);\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Sets the control to be the focused control. If all controls in the app have been properly registered with the Event Manager, then any other, currently focused control will first get `blur`red.\r\n    /// </summary>\r\n    focus() {\r\n        if (!this.focused) {\r\n            this._focused = true;\r\n            this.dispatchEvent(this.focusEvt);\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// </summary>\r\n    resize() {\r\n        if (!isHTMLCanvas(this.canv)) {\r\n            console.warn(\"Can't automatically resize a canvas that is not in the DOM tree\");\r\n        }\r\n\r\n        else if (resizeContext(this.context as CanvasRenderingContext2D, this.scaleFactor)) {\r\n            this.refreshBuffers();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Sets the scale-independent width and height of the editor control.\r\n    /// </summary>\r\n    setSize(w: number, h: number) {\r\n        if (setContextSize(this.context, w, h, this.scaleFactor)) {\r\n            this.refreshBuffers();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Move the scroll window to a new location. Values get clamped to the text contents of the editor.\r\n    /// </summary>\r\n    scrollTo(x: number, y: number) {\r\n        if (!this.wordWrap) {\r\n            this.scroll.x = x;\r\n        }\r\n        this.scroll.y = y;\r\n        return this.clampScroll();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Move the scroll window by a given amount to a new location. The final location of the scroll window gets clamped to the text contents of the editor.\r\n    /// </summary>\r\n    scrollBy(dx: number, dy: number) {\r\n        return this.scrollTo(this.scroll.x + dx, this.scroll.y + dy);\r\n    }\r\n\r\n\r\n\r\n    readKeyDownEvent(evt: KeyboardEvent) {\r\n        const command = this.os.makeCommand(evt);\r\n        if (this.keyDownCommands.has(command.command)) {\r\n            evt.preventDefault();\r\n            this.keyDownCommands.get(command.command)(evt);\r\n        }\r\n    }\r\n\r\n    readKeyPressEvent(evt: KeyboardEvent) {\r\n        const command = this.os.makeCommand(evt);\r\n        if (!this.readOnly) {\r\n            evt.preventDefault();\r\n\r\n            if (this.keyPressCommands.has(command.command)) {\r\n                this.keyPressCommands.get(command.command)();\r\n            }\r\n            else if (command.type === \"printable\"\r\n                || command.type === \"whitespace\") {\r\n                this.setSelectedText(command.text);\r\n            }\r\n\r\n            this.clampScroll();\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    private copySelectedText(evt: ClipboardEvent) {\r\n        if (this.focused && this.frontCursor.i !== this.backCursor.i) {\r\n            evt.clipboardData.setData(\"text/plain\", this.selectedText);\r\n            evt.returnValue = false;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    readCopyEvent(evt: ClipboardEvent) {\r\n        this.copySelectedText(evt);\r\n    }\r\n\r\n    readCutEvent(evt: ClipboardEvent) {\r\n        if (this.copySelectedText(evt)\r\n            && !this.readOnly) {\r\n            this.setSelectedText(\"\");\r\n        }\r\n    }\r\n\r\n    readPasteEvent(evt: ClipboardEvent) {\r\n        if (this.focused && !this.readOnly) {\r\n            evt.returnValue = false;\r\n            const clipboard = evt.clipboardData;\r\n            const str = clipboard.getData(\"text/plain\");\r\n            if (str) {\r\n                this.setSelectedText(str);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    readWheelEvent(evt: WheelEvent) {\r\n        if (this.hovered || this.focused) {\r\n            if (!evt.ctrlKey\r\n                && !evt.altKey\r\n                && !evt.shiftKey\r\n                && !evt.metaKey) {\r\n                const dy = Math.floor(evt.deltaY * wheelScrollSpeed / scrollScale);\r\n                if (!this.scrollBy(0, dy) || this.focused) {\r\n                    evt.preventDefault();\r\n                }\r\n            }\r\n            else if (!evt.ctrlKey\r\n                && !evt.altKey\r\n                && !evt.metaKey) {\r\n                evt.preventDefault();\r\n                this.fontSize += -evt.deltaY / scrollScale;\r\n            }\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    private vibrate(len: number) {\r\n        this.longPress.cancel();\r\n        if (len > 0) {\r\n            this.vibX = (Math.random() - 0.5) * 10;\r\n            this.vibY = (Math.random() - 0.5) * 10;\r\n            setTimeout(() => this.vibrate(len - 10), 10);\r\n        }\r\n        else {\r\n            this.vibX = 0;\r\n            this.vibY = 0;\r\n        }\r\n        this.render();\r\n    }\r\n\r\n    private setUVPointer(evt: { uv: { x: number, y: number } }) {\r\n        this.pointer.set(\r\n            evt.uv.x * this.width,\r\n            (1 - evt.uv.y) * this.height);\r\n    }\r\n\r\n\r\n\r\n\r\n    //>>>>>>>>>> POINTER EVENT HANDLERS >>>>>>>>>>\r\n\r\n    private startSelecting() {\r\n        this.dragging = true;\r\n        this.moveCursor(this.frontCursor);\r\n    }\r\n\r\n    private moveCursor(cursor: Cursor) {\r\n        this.pointer.toCell(this.character, this.scroll, this.gridBounds);\r\n        const gx = this.pointer.x - this.scroll.x;\r\n        const gy = this.pointer.y - this.scroll.y;\r\n        const onBottom = gy >= this.gridBounds.height;\r\n        const onLeft = gx < 0;\r\n        const onRight = this.pointer.x >= this.gridBounds.width;\r\n\r\n        if (!this.scrolling && !onBottom && !onLeft && !onRight) {\r\n            cursor.setXY(this.rows, this.pointer.x, this.pointer.y);\r\n            this.backCursor.copy(cursor);\r\n        }\r\n        else if (this.scrolling || onRight && !onBottom) {\r\n            this.scrolling = true;\r\n            const scrollHeight = this.rows.length - this.gridBounds.height;\r\n            if (gy >= 0 && scrollHeight >= 0) {\r\n                const sy = gy * scrollHeight / this.gridBounds.height;\r\n                this.scrollTo(this.scroll.x, sy);\r\n            }\r\n        }\r\n        else if (onBottom && !onLeft) {\r\n            let maxWidth = 0;\r\n            for (let dy = 0; dy < this.rows.length; ++dy) {\r\n                maxWidth = Math.max(maxWidth, this.rows[dy].stringLength);\r\n            }\r\n            const scrollWidth = maxWidth - this.gridBounds.width;\r\n            if (gx >= 0 && scrollWidth >= 0) {\r\n                const sx = gx * scrollWidth / this.gridBounds.width;\r\n                this.scrollTo(sx, this.scroll.y);\r\n            }\r\n        }\r\n        else if (onLeft && !onBottom) {\r\n            // clicked in number-line gutter\r\n        }\r\n        else {\r\n            // clicked in the lower-left corner\r\n        }\r\n\r\n        this.render();\r\n    }\r\n\r\n    private dragScroll() {\r\n        if (this.lastScrollDX !== null\r\n            && this.lastScrollDY !== null) {\r\n            let dx = (this.lastScrollDX - this.pointer.x) / this.character.width;\r\n            let dy = (this.lastScrollDY - this.pointer.y) / this.character.height;\r\n            this.scrollBy(dx, dy);\r\n        }\r\n        this.lastScrollDX = this.pointer.x;\r\n        this.lastScrollDY = this.pointer.y;\r\n    }\r\n\r\n    private pointerOver() {\r\n        this._hovered = true;\r\n        this.dispatchEvent(this.overEvt);\r\n    }\r\n\r\n    private pointerOut() {\r\n        this._hovered = false;\r\n        this.dispatchEvent(this.outEvt);\r\n    }\r\n\r\n    private pointerDown() {\r\n        this.focus();\r\n        this.pressed = true;\r\n    }\r\n\r\n    private pointerMove = () => {\r\n        if (this.dragging) {\r\n            this.moveCursor(this.backCursor);\r\n        }\r\n        else if (this.pressed) {\r\n            this.dragScroll();\r\n        }\r\n    }\r\n\r\n    private mouseLikePointerDown<T>(setPointer: (evt: T) => void) {\r\n        return (evt: T) => {\r\n            setPointer(evt);\r\n            this.pointerDown();\r\n            this.startSelecting();\r\n        }\r\n    }\r\n\r\n    private mouseLikePointerUp() {\r\n        this.pressed = false;\r\n        this.dragging = false;\r\n        this.scrolling = false;\r\n    }\r\n\r\n    private mouseLikePointerMove<T>(setPointer: (evt: T) => void) {\r\n        return (evt: T) => {\r\n            setPointer(evt);\r\n            this.pointerMove();\r\n        };\r\n    }\r\n\r\n    private touchLikePointerDown<T>(setPointer: (evt: T) => void) {\r\n        return (evt: T) => {\r\n            setPointer(evt);\r\n            this.tx = this.pointer.x;\r\n            this.ty = this.pointer.y;\r\n            this.pointerDown();\r\n            this.longPress.start();\r\n        };\r\n    }\r\n\r\n    private touchLikePointerUp() {\r\n        if (this.longPress.cancel() && !this.dragging) {\r\n            this.startSelecting();\r\n        }\r\n        this.mouseLikePointerUp();\r\n        this.lastScrollDX = null;\r\n        this.lastScrollDY = null;\r\n    }\r\n\r\n    private touchLikePointerMove<T>(setPointer: (evt: T) => void) {\r\n        return (evt: T) => {\r\n            setPointer(evt);\r\n            if (this.longPress.isRunning) {\r\n                const dx = this.pointer.x - this.tx;\r\n                const dy = this.pointer.y - this.ty;\r\n                const lenSq = dx * dx + dy * dy;\r\n                if (lenSq > 25) {\r\n                    this.longPress.cancel();\r\n                }\r\n            }\r\n\r\n            if (!this.longPress.isRunning) {\r\n                this.pointerMove();\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    //>>>>>>>>>> MOUSE EVENT HANDLERS >>>>>>>>>> \r\n    private setMousePointer(evt: MouseEvent) {\r\n        this.pointer.set(\r\n            evt.offsetX,\r\n            evt.offsetY);\r\n    }\r\n\r\n    private readMouseOverEvent() {\r\n        this.pointerOver();\r\n    }\r\n\r\n    private readMouseOutEvent() {\r\n        this.pointerOut();\r\n    }\r\n\r\n\r\n    private readMouseDownEvent(evt: MouseEvent) {\r\n        this.mouseLikePointerDown(this.setMousePointer)(evt);\r\n    }\r\n\r\n    private readMouseUpEvent() {\r\n        this.mouseLikePointerUp();\r\n    }\r\n\r\n    private readMouseMoveEvent(evt: MouseEvent) {\r\n        this.mouseLikePointerMove(this.setMousePointer)(evt);\r\n    }\r\n    //<<<<<<<<<< MOUSE EVENT HANDLERS <<<<<<<<<<\r\n\r\n\r\n    //>>>>>>>>>> TOUCH EVENT HANDLERS >>>>>>>>>>\r\n\r\n    private findTouch(touches: TouchList) {\r\n        for (let touch of touches) {\r\n            if (this.currentTouchID === null\r\n                || touch.identifier === this.currentTouchID) {\r\n                return touch;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private withPrimaryTouch(callback: (touch: Touch) => void) {\r\n        return (evt: TouchEvent) => {\r\n            evt.preventDefault();\r\n            callback(this.findTouch(evt.touches)\r\n                || this.findTouch(evt.changedTouches))\r\n        };\r\n    }\r\n\r\n    private setTouchPointer(touch: Touch) {\r\n        if (isHTMLCanvas(this.canv)) {\r\n            const cb = this.canv.getBoundingClientRect();\r\n            this.pointer.set(\r\n                touch.clientX - cb.left,\r\n                touch.clientY - cb.top);\r\n        }\r\n    }\r\n\r\n    private readTouchStartEvent(evt: TouchEvent) {\r\n        this.withPrimaryTouch(this.touchLikePointerDown(this.setTouchPointer))(evt);\r\n    }\r\n\r\n    private readTouchMoveEvent(evt: TouchEvent) {\r\n        this.withPrimaryTouch(this.touchLikePointerMove(this.setTouchPointer))(evt);\r\n    }\r\n\r\n    private readTouchEndEvent(evt: TouchEvent) {\r\n        this.withPrimaryTouch(this.touchLikePointerUp)(evt);\r\n    }\r\n    //<<<<<<<<<< TOUCH EVENT HANDLERS <<<<<<<<<<\r\n}\r\n\r\nObject.freeze(Primrose);\r\n\r\ntype EventName =\r\n    | \"KeyDown\"\r\n    | \"KeyPress\"\r\n    | \"Copy\"\r\n    | \"Cut\"\r\n    | \"Paste\";\r\n\r\nconst withCurrentControl = (name: EventName) => {\r\n    const evtName = name.toLocaleLowerCase();\r\n    const funcName: keyof Primrose = `read${name}Event`;\r\n\r\n    window.addEventListener(evtName, (evt) => {\r\n        if (focusedControl !== null) {\r\n            focusedControl[funcName](evt as any);\r\n        }\r\n    }, { passive: false });\r\n};\r\n\r\nwithCurrentControl(\"KeyDown\");\r\nwithCurrentControl(\"KeyPress\");\r\nwithCurrentControl(\"Copy\");\r\nwithCurrentControl(\"Cut\");\r\nwithCurrentControl(\"Paste\");\r\n\r\nwindow.addEventListener(\"wheel\", (evt) => {\r\n    const control = focusedControl || hoveredControl;\r\n    if (control !== null) {\r\n        control.readWheelEvent(evt);\r\n    }\r\n}, { passive: false });"],
  "mappings": "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",
  "names": ["type", "t", "width", "height", "type", "t", "width", "height", "width", "height", "controls", "width", "height", "t", "fontWeight", "fontStyle", "y"]
}
