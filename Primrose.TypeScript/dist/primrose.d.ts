import { CanvasTypes } from "@juniper-lib/dom/dist/canvas";
import { TypedEvent, TypedEventTarget } from "@juniper-lib/events/dist/TypedEventTarget";
import { Grammar } from "./Grammars";
export interface UVEvent {
    uv?: {
        x: number;
        y: number;
    };
}
export interface PointerControlMap {
    readOverEventUV: () => void;
    readOutEventUV: () => void;
    readDownEventUV: (evt: UVEvent) => void;
    readUpEventUV: (evt: UVEvent) => void;
    readMoveEventUV: (evt: UVEvent) => void;
}
export interface PrimroseOptions {
    readOnly: boolean;
    multiLine: boolean;
    wordWrap: boolean;
    scrollBars: boolean;
    lineNumbers: boolean;
    padding: number;
    fontSize: number;
    language: string | Grammar;
    scaleFactor: number;
    element: HTMLElement | OffscreenCanvas;
    width: number;
    height: number;
}
export declare class Primrose extends TypedEventTarget<{
    blur: TypedEvent<"blur">;
    focus: TypedEvent<"focus">;
    over: TypedEvent<"over">;
    out: TypedEvent<"out">;
    update: TypedEvent<"update">;
    change: TypedEvent<"change">;
}> {
    static add(key: Element, control: Primrose): void;
    static has(key: Element): boolean;
    static get(key: Element): Primrose;
    static get hoveredControl(): Primrose;
    static get focusedControl(): Primrose;
    static get editors(): Primrose[];
    static get ready(): Promise<void>;
    private _unlocked;
    private _value;
    private _padding;
    private _fontSize;
    private _scaleFactor;
    private _readOnly;
    private _wordWrap;
    private _multiLine;
    private _language;
    private _showScrollBars;
    private _showLineNumbers;
    private _hovered;
    private _focused;
    private _element;
    private _theme;
    private _tabWidth;
    private currentTouchID;
    private vibX;
    private vibY;
    private tx;
    private ty;
    private canv;
    private resized;
    private pressed;
    private tabString;
    private dragging;
    private historyIndex;
    private scrolling;
    private tabPressed;
    private lineCount;
    private lineCountWidth;
    private controlType;
    private maxVerticalScroll;
    private currentValue;
    private currentTabIndex;
    private lastCharacterHeight;
    private lastCharacterWidth;
    private lastFrontCursor;
    private lastGridBounds;
    private lastBackCursor;
    private lastThemeName;
    private lastPadding;
    private lastFocused;
    private lastScrollX;
    private lastScrollY;
    private lastScrollDX;
    private lastScrollDY;
    private lastFont;
    private lastText;
    private readonly history;
    private readonly tokens;
    private readonly rows;
    private readonly scroll;
    private readonly pointer;
    private readonly character;
    private readonly bottomRightGutter;
    private readonly gridBounds;
    private readonly tokenBack;
    private readonly tokenFront;
    private readonly backCursor;
    private readonly frontCursor;
    private readonly outEvt;
    private readonly overEvt;
    private readonly blurEvt;
    private readonly focusEvt;
    private readonly changeEvt;
    private readonly updateEvt;
    private readonly os;
    private readonly longPress;
    private readonly keyPressCommands;
    private readonly keyDownCommands;
    private readonly _mouse;
    private readonly _touch;
    private readonly surrogate;
    private readonly context;
    private readonly fg;
    private readonly fgfx;
    private readonly bg;
    private readonly bgfx;
    private readonly tg;
    private readonly tgfx;
    constructor(options: Partial<PrimroseOptions>);
    private _renderTimer;
    render(): void;
    get element(): HTMLElement;
    get isInDocument(): boolean;
    get canvas(): CanvasTypes;
    get hovered(): boolean;
    get focused(): boolean;
    set focused(f: boolean);
    get readOnly(): boolean;
    set readOnly(r: boolean);
    get multiLine(): boolean;
    set multiLine(m: boolean);
    get wordWrap(): boolean;
    set wordWrap(w: boolean);
    get value(): string;
    set value(txt: string);
    get text(): string;
    set text(txt: string);
    get selectedText(): string;
    set selectedText(txt: string);
    get selectionStart(): number;
    set selectionStart(i: number);
    get selectionEnd(): number;
    set selectionEnd(i: number);
    get selectionDirection(): "forward" | "backward";
    get tabWidth(): number;
    set tabWidth(tw: number);
    get theme(): import("./themes").Theme;
    set theme(t: import("./themes").Theme);
    get language(): Grammar;
    set language(l: Grammar);
    get padding(): number;
    set padding(p: number);
    get showLineNumbers(): boolean;
    set showLineNumbers(s: boolean);
    get showScrollBars(): boolean;
    set showScrollBars(s: boolean);
    get fontSize(): number;
    set fontSize(s: number);
    get scaleFactor(): number;
    set scaleFactor(s: number);
    get width(): number;
    set width(w: number);
    get height(): number;
    set height(h: number);
    get mouse(): PointerControlMap;
    get touch(): PointerControlMap;
    private fillRect;
    private strokeRect;
    private renderCanvasBackground;
    private renderCanvasForeground;
    private renderCanvasTrim;
    private doRender;
    private refreshControlType;
    private refreshGutter;
    private setValue;
    private setSelectedText;
    private refreshAllTokens;
    private refreshTokens;
    private refreshBuffers;
    private clampScroll;
    private scrollIntoView;
    private pushUndo;
    private moveInHistory;
    blur(): void;
    focus(): void;
    resize(): void;
    setSize(w: number, h: number): void;
    scrollTo(x: number, y: number): boolean;
    scrollBy(dx: number, dy: number): boolean;
    readKeyDownEvent(evt: KeyboardEvent): void;
    readKeyPressEvent(evt: KeyboardEvent): void;
    private copySelectedText;
    readCopyEvent(evt: ClipboardEvent): void;
    readCutEvent(evt: ClipboardEvent): void;
    readPasteEvent(evt: ClipboardEvent): void;
    readWheelEvent(evt: WheelEvent): void;
    private vibrate;
    private setUVPointer;
    private startSelecting;
    private moveCursor;
    private dragScroll;
    private pointerOver;
    private pointerOut;
    private pointerDown;
    private pointerMove;
    private mouseLikePointerDown;
    private mouseLikePointerUp;
    private mouseLikePointerMove;
    private touchLikePointerDown;
    private touchLikePointerUp;
    private touchLikePointerMove;
    private setMousePointer;
    private readMouseOverEvent;
    private readMouseOutEvent;
    private readMouseDownEvent;
    private readMouseUpEvent;
    private readMouseMoveEvent;
    set2DMouseEvents(canv: HTMLElement): void;
    private findTouch;
    private withPrimaryTouch;
    private setTouchPointer;
    private readTouchStartEvent;
    private readTouchMoveEvent;
    private readTouchEndEvent;
    set2DTouchEvents(canv: HTMLElement): void;
}
//# sourceMappingURL=primrose.d.ts.map