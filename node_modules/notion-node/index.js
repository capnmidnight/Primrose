var opts = require("./src/options"),
  fs = require("fs"),
  http = require("http"),
  https = require("https"),
  path = require("path"),
  setupWebServer = require("./src/setupWebServer");

module.exports = function(controllerDirectory, key, cert, certAuthority, webSocketServer) {
  // start the HTTP server
  var options = opts.parse(process.argv),
    servePath = options.path || ".",
    webServer = setupWebServer(servePath, controllerDirectory),
    isDev = options.mode === "dev" || process.env.NODE_ENV === "dev",
    keys = isDev && {
      key: maybeGetFile(key),
      cert: maybeGetFile(cert),
      ca: maybeGetFile(certAuthority)
    },
    isSecure = !options.insecure && !!(keys && keys.key && keys.cert);

  console.log("Mode is " + options.mode);
  console.log("Serving from directory " + servePath);

  function maybeGetFile(file) {
    if(file){
      file = path.resolve(file);
      if (fs.existsSync(file)) {
        return fs.readFileSync(file);
      }
    }
  }

  if(options.port !== undefined){
    options.port = parseFloat(options.port);
  }

  var port = options.port || process.env.PORT || (isSecure ? 443 : 80);
  console.log("Listening on port " + port);

  var appServer = null;
  if (isSecure) {
    console.log("starting secure server");
    appServer = https.createServer(keys, webServer);
    appServer.listen(port);
    var portB = port - 443 + 80;
    http.createServer(require("./src/redirector")(port)).listen(portB);
  }
  else {
    console.log("starting insecure server", keys);
    appServer = http.createServer(webServer)
    appServer.listen(port);
  }

  // start the WebSocket server
  if(webSocketServer && (!isDev || options.mode !== "localOnly")){
    socketio = require("socket.io"),
    io = socketio.listen(appServer);
    io.sockets.on("connection", webSocketServer);
  }

  // start the browser
  if (isDev) {
    require("./src/starter")(isSecure, port, options.url || "");
  }
};