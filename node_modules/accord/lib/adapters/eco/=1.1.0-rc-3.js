// Generated by CoffeeScript 1.12.1
(function() {
  var Adapter, Eco, W, fs, path,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Adapter = require('../../adapter_base');

  path = require('path');

  fs = require('fs');

  W = require('when');

  Eco = (function(superClass) {
    var compile;

    extend(Eco, superClass);

    function Eco() {
      return Eco.__super__.constructor.apply(this, arguments);
    }

    Eco.prototype.name = 'eco';

    Eco.prototype.extensions = ['eco'];

    Eco.prototype.output = 'html';

    Eco.prototype._render = function(str, options) {
      return compile((function(_this) {
        return function() {
          return _this.engine.render(str, options);
        };
      })(this));
    };

    Eco.prototype._compile = function(str, options) {
      return compile((function(_this) {
        return function() {
          return _this.engine.compile(str, options);
        };
      })(this));
    };

    Eco.prototype._compileClient = function(str, options) {
      return compile((function(_this) {
        return function() {
          return _this.engine.compile(str, options).toString().trim() + '\n';
        };
      })(this));
    };

    compile = function(fn) {
      var err, res;
      try {
        res = fn();
      } catch (error) {
        err = error;
        return W.reject(err);
      }
      return W.resolve({
        result: res
      });
    };

    return Eco;

  })(Adapter);

  module.exports = Eco;

}).call(this);
