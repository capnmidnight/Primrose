var data = require("gulp-data"),
  fs = require("fs"),
  lsJSFiles = require("./lsJSFiles"),
  makeWatch = require("./makeWatch"),
  glob = require("glob").sync,
  path = require("path"),
  pug = require("gulp-pug"),
  defaultBase = {
    base: "./"
  };

function readDir(fileConfig, w) {
  return glob(path.resolve(fileConfig.dir, w));
}

function html(gulp, pkg, name, files, jsDir){
  var pre = name + ":html:",
    cwd = process.cwd(),
    rem = function(name){
      return name.substring(cwd.length);
    }

  var leBuild = function(debug, min) {
    const buildConfig = {
      jsFiles: jsDir && lsJSFiles(jsDir) || ["index.js"],
      readFile: fs.readFileSync,
      debug: debug,
      cssExt: min ? ".min.css" : ".css",
      jsExt: min ? ".min.js" : ".js",
      rem: rem,
      path: path,
      parent: (p) => path.parse(p).dir
    };

    return function() {
      return gulp.src(files, defaultBase)
        .pipe(data(function(file) {
          var fileConfig = path.parse(file.path),
            name = rem(file.path).replace(/\\/g, "/"),
            parts = name.split("/")
              .map(function(){ return "../"; });

          parts.pop();
          parts.pop();

          return Object.assign({}, pkg, buildConfig, fileConfig, {
            fileRoot: parts.join(""),
            dir: readDir.bind(null, fileConfig)
          });
        }))
        .pipe(pug({ pretty: !min }))
        .pipe(gulp.dest("./"));
    };
  };

  gulp.task(pre + "debug", leBuild(true, false));
  gulp.task(pre + "test", leBuild(false, false));
  gulp.task(pre + "release", leBuild(false, true));

  return {
    default: makeWatch(gulp, pre + "debug", files),
    debug: pre + "debug",
    test: pre + "test",
    release: pre + "release"
  };
}

module.exports = html;