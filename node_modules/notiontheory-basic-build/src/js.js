var babel = require("rollup-plugin-babel"),
  beautify = require("gulp-beautify"),
  changed = require("gulp-changed"),
  commonjs = require("rollup-plugin-commonjs"),
  json = require("rollup-plugin-json"),
  replace = require("rollup-plugin-replace"),
  nodeResolve = require("rollup-plugin-node-resolve"),
  rollup = require("rollup").rollup,
  work = require("./work"),
  path = require("path"),
  defaultBase = {
    base: "./"
  },
  cache = {};

function glsl () {
  return {
    transform ( code, id ) {
      if ( !/\.glsl$/.test( id ) ) return;

      return "export default " + JSON.stringify(
        code
          .replace( /[ \t]*\/\/.*\n/g, "" )
          .replace( /[ \t]*\/\*[\s\S]*?\*\//g, "" )
          .replace( /\n{2,}/g, "\n" )
      ) + ";";
    }
  };
}

function js(gulp, pkg, name, entry, options) {

  if(typeof name !== "string") {
    throw new Error("`name` parameter is required and it must be a string.");
  }

  if(typeof entry !== "string") {
    throw new Error("`entry` point parameter is required and it must be a string");
  }

  var moduleName = name.replace(/(?:^|-)(\w)/g, function(match, group1) {
    return group1.toLocaleUpperCase();
  });

  var dir = path.resolve(path.parse(entry).dir);

  options = Object.assign({}, {
    dependencies: null,
    files: [path.join(dir, "**", "*")],
    advertise: false,
    banner: null,
    moduleName: moduleName,
    entry: entry,
    exclude: ["node_modules/**"],
    sourceMap: false,
    external: null,
    paths: null,
    format: "umd",
    post: null,
    watch: []
  }, options);

  if(options.advertise && !options.banner) {
    options.banner = `\nconsole.info(\"[${name}]:> ${pkg.packageName} v${pkg.version}. see ${pkg.homepage} for more information.\");`
  }

  if(!options.fileName) {
    options.fileName = name;
    if(options.format === "es" ){
      options.fileName += ".modules";
    }
    else if(options.format !== "umd"){
      options.fileName += "." + options.format;
    }
    options.fileName += ".js";
  }

  var cacheName = name + ":js",
    presets = [
      ["es2015", { "modules": false }],
      "stage-0"
    ];

  if(/\.jsx$/.test(entry)) {
    presets.push("react");
  }

  var tasks = work(gulp, "js", cacheName, function(debug) {
      var rollupOptions = {
        cache: cache[cacheName],
        entry: options.entry,
        acorn: {
          allowReserved: true
        },
        external: options.external,
        paths: options.paths,
        sourceMap: options.sourceMap,
        plugins: [
          json(),
          glsl(),
          babel({
            babelrc: false,
            exclude: options.exclude,
            runtimeHelpers: true,
            presets: presets,
            plugins: ["external-helpers"]
          }),
          replace({
            "process.env.NODE_ENV": JSON.stringify(debug
              ? "development"
              : "production")
          }),
          nodeResolve({ jsnext: true }),
          commonjs({
            include: "node_modules/**/*"
          })
        ]
      };

      if(options.advertise){
        rollupOptions.banner = options.banner;
      }

      return rollup(rollupOptions)
        .then(function(bundle) {
          cache[cacheName] = bundle;
          console.log("Writing " + options.fileName);
          return bundle.write({
            format: options.format,
            moduleName: options.moduleName,
            dest: options.fileName,
            sourceMap: options.sourceMap
          });
      });
    }, name, options.files.concat(options.watch), options.dependencies, options.post, {
      debug: options.fileName,
      release: options.fileName
    });

  tasks.format = cacheName + ":beautify";
  gulp.task(tasks.format, function() {
    return gulp.src(options.files, defaultBase)
      .pipe(changed("./"))
      .pipe(beautify({
        indent_size: 2,
        brace_style: "end-expand",
        space_after_anon_function: true,
        break_chained_methods: true
      }))
      .pipe(gulp.dest("./"));
  });

  return tasks;
}

module.exports = js;